
STM32F746_SMS_RFM_Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08007bc8  08007bc8  00017bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e44  08007e44  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e44  08007e44  00017e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e4c  08007e4c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e4c  08007e4c  00017e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e50  08007e50  00017e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e64  2000007c  08007ed0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ee0  08007ed0  00024ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec3a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000398c  00000000  00000000  0003ece6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001790  00000000  00000000  00042678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015e8  00000000  00000000  00043e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028371  00000000  00000000  000453f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000131dc  00000000  00000000  0006d761  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fae1b  00000000  00000000  0008093d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017b758  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006650  00000000  00000000  0017b7d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007bb0 	.word	0x08007bb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08007bb0 	.word	0x08007bb0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <ConsoleInitialize>:
	uint32_t rd_timeout;
} console;

const char newline_str[] =  "\r\n";

void ConsoleInitialize(UART_HandleTypeDef *uart_ptr){
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    console.p_uart     = uart_ptr;
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <ConsoleInitialize+0x28>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6013      	str	r3, [r2, #0]
	console.priority   = development;
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <ConsoleInitialize+0x28>)
 80005d0:	2232      	movs	r2, #50	; 0x32
 80005d2:	711a      	strb	r2, [r3, #4]
	console.rd_timeout = 5000;
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <ConsoleInitialize+0x28>)
 80005d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80005da:	609a      	str	r2, [r3, #8]
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	200049ac 	.word	0x200049ac

080005ec <ConsoleWr>:
void ConsoleSetPriority(enum console_priority c_p){
	console.priority = 	c_p;
}

void ConsoleWr(enum console_priority c_priority, char *txt, uint8_t newline){
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
	//if (c_priority >= console.priority){
	if CONSOLE_PRIORITY_IS_OK(c_priority){
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <ConsoleWr+0x4c>)
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	79fa      	ldrb	r2, [r7, #7]
 8000602:	429a      	cmp	r2, r3
 8000604:	d313      	bcc.n	800062e <ConsoleWr+0x42>
		HAL_UART_Transmit(console.p_uart, (uint8_t*)txt, strlen(txt),HAL_MAX_DELAY);
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <ConsoleWr+0x4c>)
 8000608:	681c      	ldr	r4, [r3, #0]
 800060a:	6838      	ldr	r0, [r7, #0]
 800060c:	f7ff fe00 	bl	8000210 <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	b29a      	uxth	r2, r3
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	6839      	ldr	r1, [r7, #0]
 800061a:	4620      	mov	r0, r4
 800061c:	f002 fda4 	bl	8003168 <HAL_UART_Transmit>
		if (newline) {
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d003      	beq.n	800062e <ConsoleWr+0x42>
			ConsoleNewline(c_priority);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f823 	bl	8000674 <ConsoleNewline>
		}
	}
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bd90      	pop	{r4, r7, pc}
 8000636:	bf00      	nop
 8000638:	200049ac 	.word	0x200049ac

0800063c <ConsoleWrChar>:

void ConsoleWrChar(enum console_priority c_priority, char c){
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]
	if CONSOLE_PRIORITY_IS_OK(c_priority){
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <ConsoleWrChar+0x34>)
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	79fa      	ldrb	r2, [r7, #7]
 8000652:	429a      	cmp	r2, r3
 8000654:	d307      	bcc.n	8000666 <ConsoleWrChar+0x2a>
		HAL_UART_Transmit(console.p_uart, &c, 1,HAL_MAX_DELAY);
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <ConsoleWrChar+0x34>)
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	1db9      	adds	r1, r7, #6
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	2201      	movs	r2, #1
 8000662:	f002 fd81 	bl	8003168 <HAL_UART_Transmit>
	}
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200049ac 	.word	0x200049ac

08000674 <ConsoleNewline>:

void ConsoleNewline(enum console_priority c_priority){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
	if (c_priority >= console.priority){
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <ConsoleNewline+0x2c>)
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	79fa      	ldrb	r2, [r7, #7]
 8000684:	429a      	cmp	r2, r3
 8000686:	d307      	bcc.n	8000698 <ConsoleNewline+0x24>
    	HAL_UART_Transmit(console.p_uart, (uint8_t*)newline_str, strlen( newline_str), HAL_MAX_DELAY);
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <ConsoleNewline+0x2c>)
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	2202      	movs	r2, #2
 8000692:	4904      	ldr	r1, [pc, #16]	; (80006a4 <ConsoleNewline+0x30>)
 8000694:	f002 fd68 	bl	8003168 <HAL_UART_Transmit>
	}
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200049ac 	.word	0x200049ac
 80006a4:	08007d24 	.word	0x08007d24

080006a8 <ConsoleWrDec>:

void ConsoleWrDec(enum console_priority c_priority, char *pre_txt, uint16_t value ,char *post_txt, uint8_t newline){
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b08b      	sub	sp, #44	; 0x2c
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
 80006b6:	4613      	mov	r3, r2
 80006b8:	81bb      	strh	r3, [r7, #12]
	if CONSOLE_PRIORITY_IS_OK(c_priority){
 80006ba:	4b21      	ldr	r3, [pc, #132]	; (8000740 <ConsoleWrDec+0x98>)
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	7bfa      	ldrb	r2, [r7, #15]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d338      	bcc.n	8000736 <ConsoleWrDec+0x8e>
		char value_str[VALUE_TEXT_LEN];
		sprintf(value_str,"%d", value);
 80006c4:	89ba      	ldrh	r2, [r7, #12]
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	491e      	ldr	r1, [pc, #120]	; (8000744 <ConsoleWrDec+0x9c>)
 80006cc:	4618      	mov	r0, r3
 80006ce:	f006 fe73 	bl	80073b8 <siprintf>
		HAL_UART_Transmit(console.p_uart, (uint8_t*)pre_txt, strlen(pre_txt),HAL_MAX_DELAY);
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <ConsoleWrDec+0x98>)
 80006d4:	681c      	ldr	r4, [r3, #0]
 80006d6:	68b8      	ldr	r0, [r7, #8]
 80006d8:	f7ff fd9a 	bl	8000210 <strlen>
 80006dc:	4603      	mov	r3, r0
 80006de:	b29a      	uxth	r2, r3
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	4620      	mov	r0, r4
 80006e8:	f002 fd3e 	bl	8003168 <HAL_UART_Transmit>
		HAL_UART_Transmit(console.p_uart, (uint8_t*)value_str, strlen(value_str),HAL_MAX_DELAY);
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <ConsoleWrDec+0x98>)
 80006ee:	681c      	ldr	r4, [r3, #0]
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fd8b 	bl	8000210 <strlen>
 80006fa:	4603      	mov	r3, r0
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	f107 0114 	add.w	r1, r7, #20
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	4620      	mov	r0, r4
 8000708:	f002 fd2e 	bl	8003168 <HAL_UART_Transmit>
		HAL_UART_Transmit(console.p_uart, (uint8_t*)post_txt, strlen(post_txt),HAL_MAX_DELAY);
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <ConsoleWrDec+0x98>)
 800070e:	681c      	ldr	r4, [r3, #0]
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff fd7d 	bl	8000210 <strlen>
 8000716:	4603      	mov	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	4620      	mov	r0, r4
 8000722:	f002 fd21 	bl	8003168 <HAL_UART_Transmit>
		if (newline) {
 8000726:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800072a:	2b00      	cmp	r3, #0
 800072c:	d003      	beq.n	8000736 <ConsoleWrDec+0x8e>
			ConsoleNewline(c_priority);
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff9f 	bl	8000674 <ConsoleNewline>
		}
	}
}
 8000736:	bf00      	nop
 8000738:	372c      	adds	r7, #44	; 0x2c
 800073a:	46bd      	mov	sp, r7
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	bf00      	nop
 8000740:	200049ac 	.word	0x200049ac
 8000744:	08007bc8 	.word	0x08007bc8

08000748 <ConsoleRdChar>:
  * @param pData
  * @param Size
  * @param Timeout
  * @retval
  */
HAL_StatusTypeDef ConsoleRdChar( uint8_t *pData ){
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef uart_status;
	uart_status = HAL_UART_Receive(console.p_uart, pData, 1, console.rd_timeout);
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <ConsoleRdChar+0x28>)
 8000752:	6818      	ldr	r0, [r3, #0]
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <ConsoleRdChar+0x28>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	2201      	movs	r2, #1
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	f002 fd95 	bl	800328a <HAL_UART_Receive>
 8000760:	4603      	mov	r3, r0
 8000762:	73fb      	strb	r3, [r7, #15]
	return uart_status;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200049ac 	.word	0x200049ac

08000774 <ConsoleRdLn>:


HAL_StatusTypeDef ConsoleRdLn(uint8_t *pData, uint8_t max_len ){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef uart_status = HAL_OK;
 8000780:	2300      	movs	r3, #0
 8000782:	73fb      	strb	r3, [r7, #15]
	uint8_t  cnt= 0;
 8000784:	2300      	movs	r3, #0
 8000786:	73bb      	strb	r3, [r7, #14]
	uint8_t  done = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	737b      	strb	r3, [r7, #13]

	while ((cnt < max_len) && (uart_status == HAL_OK) && !done) {
 800078c:	e018      	b.n	80007c0 <ConsoleRdLn+0x4c>
		uart_status = HAL_UART_Receive(console.p_uart, pData, 1, console.rd_timeout);
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <ConsoleRdLn+0x6c>)
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <ConsoleRdLn+0x6c>)
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	2201      	movs	r2, #1
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	f002 fd76 	bl	800328a <HAL_UART_Receive>
 800079e:	4603      	mov	r3, r0
 80007a0:	73fb      	strb	r3, [r7, #15]

		if (*pData == ASCII_CR){
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b13      	cmp	r3, #19
 80007a8:	d104      	bne.n	80007b4 <ConsoleRdLn+0x40>
			*pData = 0x00;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
			done = 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	737b      	strb	r3, [r7, #13]
		}
		pData++;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3301      	adds	r3, #1
 80007b8:	607b      	str	r3, [r7, #4]
		cnt++;
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	3301      	adds	r3, #1
 80007be:	73bb      	strb	r3, [r7, #14]
	while ((cnt < max_len) && (uart_status == HAL_OK) && !done) {
 80007c0:	7bba      	ldrb	r2, [r7, #14]
 80007c2:	78fb      	ldrb	r3, [r7, #3]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d205      	bcs.n	80007d4 <ConsoleRdLn+0x60>
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d102      	bne.n	80007d4 <ConsoleRdLn+0x60>
 80007ce:	7b7b      	ldrb	r3, [r7, #13]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0dc      	beq.n	800078e <ConsoleRdLn+0x1a>
	}
}
 80007d4:	bf00      	nop
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200049ac 	.word	0x200049ac

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	; 0x30
 80007e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ea:	f000 fd00 	bl	80011ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ee:	f000 f8ad 	bl	800094c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f2:	f000 f999 	bl	8000b28 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007f6:	f000 f939 	bl	8000a6c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007fa:	f000 f967 	bl	8000acc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  uint8_t cbuf[32];
  uint8_t *pdata = cbuf;
 80007fe:	463b      	mov	r3, r7
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef uart_status;


  ConsoleInitialize(&huart3);
 8000802:	4839      	ldr	r0, [pc, #228]	; (80008e8 <main+0x104>)
 8000804:	f7ff fedc 	bl	80005c0 <ConsoleInitialize>

  ConsoleWr(development, "https://github.com/infrapale/STM32F746_SMS_RFM_Gateway", 1);
 8000808:	2201      	movs	r2, #1
 800080a:	4938      	ldr	r1, [pc, #224]	; (80008ec <main+0x108>)
 800080c:	2032      	movs	r0, #50	; 0x32
 800080e:	f7ff feed 	bl	80005ec <ConsoleWr>
  ConsoleWrDec(development, "Elaman tarkoitus on ", 42 ,".", 1);
 8000812:	2301      	movs	r3, #1
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	4b36      	ldr	r3, [pc, #216]	; (80008f0 <main+0x10c>)
 8000818:	222a      	movs	r2, #42	; 0x2a
 800081a:	4936      	ldr	r1, [pc, #216]	; (80008f4 <main+0x110>)
 800081c:	2032      	movs	r0, #50	; 0x32
 800081e:	f7ff ff43 	bl	80006a8 <ConsoleWrDec>

  ConsoleRdLn(pdata, 10 );
 8000822:	210a      	movs	r1, #10
 8000824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000826:	f7ff ffa5 	bl	8000774 <ConsoleRdLn>
  ConsoleWr(development, pdata, 1);
 800082a:	2201      	movs	r2, #1
 800082c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800082e:	2032      	movs	r0, #50	; 0x32
 8000830:	f7ff fedc 	bl	80005ec <ConsoleWr>

  uart_status = ConsoleRdChar( pdata );
 8000834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000836:	f7ff ff87 	bl	8000748 <ConsoleRdChar>
 800083a:	4603      	mov	r3, r0
 800083c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (uart_status == HAL_OK) {
 8000840:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000844:	2b00      	cmp	r3, #0
 8000846:	d105      	bne.n	8000854 <main+0x70>
      ConsoleWrChar(development, cbuf[0]);
 8000848:	783b      	ldrb	r3, [r7, #0]
 800084a:	4619      	mov	r1, r3
 800084c:	2032      	movs	r0, #50	; 0x32
 800084e:	f7ff fef5 	bl	800063c <ConsoleWrChar>
 8000852:	e009      	b.n	8000868 <main+0x84>
  }
  else {
	  ConsoleWrDec(development, "HAL status", uart_status ,"!", 1);
 8000854:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000858:	b29a      	uxth	r2, r3
 800085a:	2301      	movs	r3, #1
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <main+0x114>)
 8000860:	4926      	ldr	r1, [pc, #152]	; (80008fc <main+0x118>)
 8000862:	2032      	movs	r0, #50	; 0x32
 8000864:	f7ff ff20 	bl	80006a8 <ConsoleWrDec>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000868:	f003 fc8a 	bl	8004180 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerScanKeypad */
  TimerScanKeypadHandle = osTimerNew(CallbackScanKeypad, osTimerPeriodic, NULL, &TimerScanKeypad_attributes);
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <main+0x11c>)
 800086e:	2200      	movs	r2, #0
 8000870:	2101      	movs	r1, #1
 8000872:	4824      	ldr	r0, [pc, #144]	; (8000904 <main+0x120>)
 8000874:	f003 fdd8 	bl	8004428 <osTimerNew>
 8000878:	4602      	mov	r2, r0
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <main+0x124>)
 800087c:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue01 */
  Queue01Handle = osMessageQueueNew (256, sizeof(uint8_t), &Queue01_attributes);
 800087e:	4a23      	ldr	r2, [pc, #140]	; (800090c <main+0x128>)
 8000880:	2101      	movs	r1, #1
 8000882:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000886:	f003 fe93 	bl	80045b0 <osMessageQueueNew>
 800088a:	4602      	mov	r2, r0
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <main+0x12c>)
 800088e:	601a      	str	r2, [r3, #0]

  /* creation of Queue02 */
  Queue02Handle = osMessageQueueNew (16, sizeof(Data), &Queue02_attributes);
 8000890:	4a20      	ldr	r2, [pc, #128]	; (8000914 <main+0x130>)
 8000892:	2104      	movs	r1, #4
 8000894:	2010      	movs	r0, #16
 8000896:	f003 fe8b 	bl	80045b0 <osMessageQueueNew>
 800089a:	4602      	mov	r2, r0
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <main+0x134>)
 800089e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008a0:	4a1e      	ldr	r2, [pc, #120]	; (800091c <main+0x138>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	481e      	ldr	r0, [pc, #120]	; (8000920 <main+0x13c>)
 80008a6:	f003 fcd5 	bl	8004254 <osThreadNew>
 80008aa:	4602      	mov	r2, r0
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <main+0x140>)
 80008ae:	601a      	str	r2, [r3, #0]

  /* creation of Sender1 */
  Sender1Handle = osThreadNew(StartSender1, NULL, &Sender1_attributes);
 80008b0:	4a1d      	ldr	r2, [pc, #116]	; (8000928 <main+0x144>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	481d      	ldr	r0, [pc, #116]	; (800092c <main+0x148>)
 80008b6:	f003 fccd 	bl	8004254 <osThreadNew>
 80008ba:	4602      	mov	r2, r0
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <main+0x14c>)
 80008be:	601a      	str	r2, [r3, #0]

  /* creation of Receiver */
  ReceiverHandle = osThreadNew(StartReceiver, NULL, &Receiver_attributes);
 80008c0:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <main+0x150>)
 80008c2:	2100      	movs	r1, #0
 80008c4:	481c      	ldr	r0, [pc, #112]	; (8000938 <main+0x154>)
 80008c6:	f003 fcc5 	bl	8004254 <osThreadNew>
 80008ca:	4602      	mov	r2, r0
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <main+0x158>)
 80008ce:	601a      	str	r2, [r3, #0]

  /* creation of Sender2 */
  Sender2Handle = osThreadNew(StartSender2, NULL, &Sender2_attributes);
 80008d0:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <main+0x15c>)
 80008d2:	2100      	movs	r1, #0
 80008d4:	481b      	ldr	r0, [pc, #108]	; (8000944 <main+0x160>)
 80008d6:	f003 fcbd 	bl	8004254 <osThreadNew>
 80008da:	4602      	mov	r2, r0
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <main+0x164>)
 80008de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008e0:	f003 fc82 	bl	80041e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <main+0x100>
 80008e6:	bf00      	nop
 80008e8:	200049c4 	.word	0x200049c4
 80008ec:	08007c14 	.word	0x08007c14
 80008f0:	08007c4c 	.word	0x08007c4c
 80008f4:	08007c50 	.word	0x08007c50
 80008f8:	08007c68 	.word	0x08007c68
 80008fc:	08007c6c 	.word	0x08007c6c
 8000900:	08007de8 	.word	0x08007de8
 8000904:	08000e45 	.word	0x08000e45
 8000908:	200049c0 	.word	0x200049c0
 800090c:	08007db8 	.word	0x08007db8
 8000910:	200049b8 	.word	0x200049b8
 8000914:	08007dd0 	.word	0x08007dd0
 8000918:	20004e54 	.word	0x20004e54
 800091c:	08007d28 	.word	0x08007d28
 8000920:	08000cf5 	.word	0x08000cf5
 8000924:	200049bc 	.word	0x200049bc
 8000928:	08007d4c 	.word	0x08007d4c
 800092c:	08000d15 	.word	0x08000d15
 8000930:	20004e48 	.word	0x20004e48
 8000934:	08007d70 	.word	0x08007d70
 8000938:	08000d65 	.word	0x08000d65
 800093c:	20004e4c 	.word	0x20004e4c
 8000940:	08007d94 	.word	0x08007d94
 8000944:	08000df9 	.word	0x08000df9
 8000948:	20004e50 	.word	0x20004e50

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b0b4      	sub	sp, #208	; 0xd0
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000956:	2230      	movs	r2, #48	; 0x30
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f006 fd23 	bl	80073a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	2284      	movs	r2, #132	; 0x84
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f006 fd14 	bl	80073a6 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800097e:	f001 f873 	bl	8001a68 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b37      	ldr	r3, [pc, #220]	; (8000a60 <SystemClock_Config+0x114>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a36      	ldr	r2, [pc, #216]	; (8000a60 <SystemClock_Config+0x114>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b34      	ldr	r3, [pc, #208]	; (8000a60 <SystemClock_Config+0x114>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800099a:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <SystemClock_Config+0x118>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009a2:	4a30      	ldr	r2, [pc, #192]	; (8000a64 <SystemClock_Config+0x118>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6013      	str	r3, [r2, #0]
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <SystemClock_Config+0x118>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b6:	2301      	movs	r3, #1
 80009b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c4:	2302      	movs	r3, #2
 80009c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009d2:	2304      	movs	r3, #4
 80009d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80009d8:	2348      	movs	r3, #72	; 0x48
 80009da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009de:	2302      	movs	r3, #2
 80009e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009e4:	2303      	movs	r3, #3
 80009e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 f84a 	bl	8001a88 <HAL_RCC_OscConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80009fa:	f000 fa3f 	bl	8000e7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fe:	230f      	movs	r3, #15
 8000a00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2302      	movs	r3, #2
 8000a06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a22:	2102      	movs	r1, #2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fad3 	bl	8001fd0 <HAL_RCC_ClockConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000a30:	f000 fa24 	bl	8000e7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <SystemClock_Config+0x11c>)
 8000a36:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fcec 	bl	8002424 <HAL_RCCEx_PeriphCLKConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000a52:	f000 fa13 	bl	8000e7c <Error_Handler>
  }
}
 8000a56:	bf00      	nop
 8000a58:	37d0      	adds	r7, #208	; 0xd0
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40007000 	.word	0x40007000
 8000a68:	00200100 	.word	0x00200100

08000a6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a72:	4a15      	ldr	r2, [pc, #84]	; (8000ac8 <MX_USART3_UART_Init+0x5c>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000ab0:	f002 fb0c 	bl	80030cc <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aba:	f000 f9df 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200049c4 	.word	0x200049c4
 8000ac8:	40004800 	.word	0x40004800

08000acc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ad6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ada:	2206      	movs	r2, #6
 8000adc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aec:	2202      	movs	r2, #2
 8000aee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b10:	f000 fe61 	bl	80017d6 <HAL_PCD_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b1a:	f000 f9af 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20004a44 	.word	0x20004a44

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08c      	sub	sp, #48	; 0x30
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	4b67      	ldr	r3, [pc, #412]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a66      	ldr	r2, [pc, #408]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b64      	ldr	r3, [pc, #400]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b56:	4b61      	ldr	r3, [pc, #388]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a60      	ldr	r2, [pc, #384]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b5e      	ldr	r3, [pc, #376]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b5b      	ldr	r3, [pc, #364]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a5a      	ldr	r2, [pc, #360]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b58      	ldr	r3, [pc, #352]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	4b55      	ldr	r3, [pc, #340]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a54      	ldr	r2, [pc, #336]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b52      	ldr	r3, [pc, #328]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9e:	4b4f      	ldr	r3, [pc, #316]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a4e      	ldr	r2, [pc, #312]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b4c      	ldr	r3, [pc, #304]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb6:	4b49      	ldr	r3, [pc, #292]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a48      	ldr	r2, [pc, #288]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b46      	ldr	r3, [pc, #280]	; (8000cdc <MX_GPIO_Init+0x1b4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bd4:	4842      	ldr	r0, [pc, #264]	; (8000ce0 <MX_GPIO_Init+0x1b8>)
 8000bd6:	f000 fde5 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2140      	movs	r1, #64	; 0x40
 8000bde:	4841      	ldr	r0, [pc, #260]	; (8000ce4 <MX_GPIO_Init+0x1bc>)
 8000be0:	f000 fde0 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bea:	4b3f      	ldr	r3, [pc, #252]	; (8000ce8 <MX_GPIO_Init+0x1c0>)
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	483c      	ldr	r0, [pc, #240]	; (8000cec <MX_GPIO_Init+0x1c4>)
 8000bfa:	f000 fc29 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bfe:	2332      	movs	r3, #50	; 0x32
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c0e:	230b      	movs	r3, #11
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	4834      	ldr	r0, [pc, #208]	; (8000cec <MX_GPIO_Init+0x1c4>)
 8000c1a:	f000 fc19 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c1e:	2386      	movs	r3, #134	; 0x86
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2e:	230b      	movs	r3, #11
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	482d      	ldr	r0, [pc, #180]	; (8000cf0 <MX_GPIO_Init+0x1c8>)
 8000c3a:	f000 fc09 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c3e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4822      	ldr	r0, [pc, #136]	; (8000ce0 <MX_GPIO_Init+0x1b8>)
 8000c58:	f000 fbfa 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6e:	230b      	movs	r3, #11
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	4819      	ldr	r0, [pc, #100]	; (8000ce0 <MX_GPIO_Init+0x1b8>)
 8000c7a:	f000 fbe9 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c7e:	2340      	movs	r3, #64	; 0x40
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <MX_GPIO_Init+0x1bc>)
 8000c96:	f000 fbdb 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_GPIO_Init+0x1bc>)
 8000cae:	f000 fbcf 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cb2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc4:	230b      	movs	r3, #11
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_GPIO_Init+0x1bc>)
 8000cd0:	f000 fbbe 	bl	8001450 <HAL_GPIO_Init>

}
 8000cd4:	bf00      	nop
 8000cd6:	3730      	adds	r7, #48	; 0x30
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020400 	.word	0x40020400
 8000ce4:	40021800 	.word	0x40021800
 8000ce8:	10110000 	.word	0x10110000
 8000cec:	40020800 	.word	0x40020800
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  osTimerStart(TimerScanKeypadHandle,100);
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <StartDefaultTask+0x1c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2164      	movs	r1, #100	; 0x64
 8000d02:	4618      	mov	r0, r3
 8000d04:	f003 fc14 	bl	8004530 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f003 fb49 	bl	80043a0 <osDelay>
 8000d0e:	e7fb      	b.n	8000d08 <StartDefaultTask+0x14>
 8000d10:	200049c0 	.word	0x200049c0

08000d14 <StartSender1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSender1 */
void StartSender1(void *argument)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSender1 */
  uint8_t buf = 0x01;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  ConsoleWr(development, "Task 1 send..",0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	490c      	ldr	r1, [pc, #48]	; (8000d54 <StartSender1+0x40>)
 8000d24:	2032      	movs	r0, #50	; 0x32
 8000d26:	f7ff fc61 	bl	80005ec <ConsoleWr>
	  //osMessageQueuePut(Queue01Handle,&buf,osPriorityNormal,200 );
	  osMessageQueuePut(Queue02Handle,(uint32_t) &DataToSend1, (uint8_t*)osPriorityNormal,200 );
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <StartSender1+0x44>)
 8000d2c:	6818      	ldr	r0, [r3, #0]
 8000d2e:	23c8      	movs	r3, #200	; 0xc8
 8000d30:	2218      	movs	r2, #24
 8000d32:	490a      	ldr	r1, [pc, #40]	; (8000d5c <StartSender1+0x48>)
 8000d34:	f003 fcc2 	bl	80046bc <osMessageQueuePut>
	  ConsoleWr(development, "..sent",1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4909      	ldr	r1, [pc, #36]	; (8000d60 <StartSender1+0x4c>)
 8000d3c:	2032      	movs	r0, #50	; 0x32
 8000d3e:	f7ff fc55 	bl	80005ec <ConsoleWr>
	  buf++;
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	3301      	adds	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
      osDelay(2000);
 8000d48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d4c:	f003 fb28 	bl	80043a0 <osDelay>
	  ConsoleWr(development, "Task 1 send..",0);
 8000d50:	e7e6      	b.n	8000d20 <StartSender1+0xc>
 8000d52:	bf00      	nop
 8000d54:	08007c78 	.word	0x08007c78
 8000d58:	20004e54 	.word	0x20004e54
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	08007c88 	.word	0x08007c88

08000d64 <StartReceiver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiver */
void StartReceiver(void *argument)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //retvalue = osMessageQueueGet(Queue01Handle,(uint8_t *)&buf,osPriorityNormal,4000);
	  //ConsoleWrDec(development, "Received:", buf,">",1);
	  retvalue = osMessageQueueGet(Queue02Handle,(uint16_t*)&qitem, (uint8_t*)osPriorityNormal, 4000);
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <StartReceiver+0x78>)
 8000d6e:	6818      	ldr	r0, [r3, #0]
 8000d70:	f107 0108 	add.w	r1, r7, #8
 8000d74:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000d78:	2218      	movs	r2, #24
 8000d7a:	f003 fd13 	bl	80047a4 <osMessageQueueGet>
 8000d7e:	60f8      	str	r0, [r7, #12]
      if(retvalue == osOK){
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d123      	bne.n	8000dce <StartReceiver+0x6a>
    	  ConsoleWr(development, "os call was OK",1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	4915      	ldr	r1, [pc, #84]	; (8000de0 <StartReceiver+0x7c>)
 8000d8a:	2032      	movs	r0, #50	; 0x32
 8000d8c:	f7ff fc2e 	bl	80005ec <ConsoleWr>
    	  if(qitem.Source == 1){
 8000d90:	7abb      	ldrb	r3, [r7, #10]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d105      	bne.n	8000da2 <StartReceiver+0x3e>
    		 ConsoleWr(development, "Received from sender 1",1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	4912      	ldr	r1, [pc, #72]	; (8000de4 <StartReceiver+0x80>)
 8000d9a:	2032      	movs	r0, #50	; 0x32
 8000d9c:	f7ff fc26 	bl	80005ec <ConsoleWr>
 8000da0:	e004      	b.n	8000dac <StartReceiver+0x48>
    	  } else{
        	 ConsoleWr(development, "Received from sender 2",1);
 8000da2:	2201      	movs	r2, #1
 8000da4:	4910      	ldr	r1, [pc, #64]	; (8000de8 <StartReceiver+0x84>)
 8000da6:	2032      	movs	r0, #50	; 0x32
 8000da8:	f7ff fc20 	bl	80005ec <ConsoleWr>
          }
          ConsoleWrDec(development, "Received value: ",qitem.Value,"",1);
 8000dac:	893a      	ldrh	r2, [r7, #8]
 8000dae:	2301      	movs	r3, #1
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <StartReceiver+0x88>)
 8000db4:	490e      	ldr	r1, [pc, #56]	; (8000df0 <StartReceiver+0x8c>)
 8000db6:	2032      	movs	r0, #50	; 0x32
 8000db8:	f7ff fc76 	bl	80006a8 <ConsoleWrDec>
          if(retvalue == osOK){
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1d4      	bne.n	8000d6c <StartReceiver+0x8>
        	  ConsoleWr(development, "os call was OK",1);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4906      	ldr	r1, [pc, #24]	; (8000de0 <StartReceiver+0x7c>)
 8000dc6:	2032      	movs	r0, #50	; 0x32
 8000dc8:	f7ff fc10 	bl	80005ec <ConsoleWr>
 8000dcc:	e7ce      	b.n	8000d6c <StartReceiver+0x8>
          }

      } else{
    	  ConsoleWr(development, "os call was NOT OK",1);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4908      	ldr	r1, [pc, #32]	; (8000df4 <StartReceiver+0x90>)
 8000dd2:	2032      	movs	r0, #50	; 0x32
 8000dd4:	f7ff fc0a 	bl	80005ec <ConsoleWr>
	  retvalue = osMessageQueueGet(Queue02Handle,(uint16_t*)&qitem, (uint8_t*)osPriorityNormal, 4000);
 8000dd8:	e7c8      	b.n	8000d6c <StartReceiver+0x8>
 8000dda:	bf00      	nop
 8000ddc:	20004e54 	.word	0x20004e54
 8000de0:	08007c90 	.word	0x08007c90
 8000de4:	08007ca0 	.word	0x08007ca0
 8000de8:	08007cb8 	.word	0x08007cb8
 8000dec:	08007cd0 	.word	0x08007cd0
 8000df0:	08007cd4 	.word	0x08007cd4
 8000df4:	08007ce8 	.word	0x08007ce8

08000df8 <StartSender2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSender2 */
void StartSender2(void *argument)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSender2 */
  uint8_t buf;
  /* Infinite loop */
  for(;;)
  {
	  ConsoleWr(development, "Task 2 send..",0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	490c      	ldr	r1, [pc, #48]	; (8000e34 <StartSender2+0x3c>)
 8000e04:	2032      	movs	r0, #50	; 0x32
 8000e06:	f7ff fbf1 	bl	80005ec <ConsoleWr>
	  //osMessageQueuePut(Queue01Handle,&buf,osPriorityNormal,200 );
	  osMessageQueuePut(Queue02Handle,(uint32_t)&DataToSend2, (uint8_t*)osPriorityNormal,200 );
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <StartSender2+0x40>)
 8000e0c:	6818      	ldr	r0, [r3, #0]
 8000e0e:	23c8      	movs	r3, #200	; 0xc8
 8000e10:	2218      	movs	r2, #24
 8000e12:	490a      	ldr	r1, [pc, #40]	; (8000e3c <StartSender2+0x44>)
 8000e14:	f003 fc52 	bl	80046bc <osMessageQueuePut>
	  ConsoleWr(development, "..sent",1);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4909      	ldr	r1, [pc, #36]	; (8000e40 <StartSender2+0x48>)
 8000e1c:	2032      	movs	r0, #50	; 0x32
 8000e1e:	f7ff fbe5 	bl	80005ec <ConsoleWr>
	  buf--;
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
      osDelay(2000);
 8000e28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e2c:	f003 fab8 	bl	80043a0 <osDelay>
	  ConsoleWr(development, "Task 2 send..",0);
 8000e30:	e7e6      	b.n	8000e00 <StartSender2+0x8>
 8000e32:	bf00      	nop
 8000e34:	08007cfc 	.word	0x08007cfc
 8000e38:	20004e54 	.word	0x20004e54
 8000e3c:	20000004 	.word	0x20000004
 8000e40:	08007c88 	.word	0x08007c88

08000e44 <CallbackScanKeypad>:
  /* USER CODE END StartSender2 */
}

/* CallbackScanKeypad function */
void CallbackScanKeypad(void *argument)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackScanKeypad */

  /* USER CODE END CallbackScanKeypad */
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d101      	bne.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e6a:	f000 f9cd 	bl	8001208 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40001400 	.word	0x40001400

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <Error_Handler+0x6>

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	f06f 0001 	mvn.w	r0, #1
 8000ec2:	f000 fa9b 	bl	80013fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <HAL_UART_MspInit+0x7c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d128      	bne.n	8000f48 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a16      	ldr	r2, [pc, #88]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a10      	ldr	r2, [pc, #64]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000f14:	f043 0308 	orr.w	r3, r3, #8
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_UART_MspInit+0x80>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f38:	2307      	movs	r3, #7
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <HAL_UART_MspInit+0x84>)
 8000f44:	f000 fa84 	bl	8001450 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	; 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40004800 	.word	0x40004800
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40020c00 	.word	0x40020c00

08000f5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f7c:	d141      	bne.n	8001002 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <HAL_PCD_MspInit+0xb0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a22      	ldr	r2, [pc, #136]	; (800100c <HAL_PCD_MspInit+0xb0>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <HAL_PCD_MspInit+0xb0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f96:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fa8:	230a      	movs	r3, #10
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4817      	ldr	r0, [pc, #92]	; (8001010 <HAL_PCD_MspInit+0xb4>)
 8000fb4:	f000 fa4c 	bl	8001450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4810      	ldr	r0, [pc, #64]	; (8001010 <HAL_PCD_MspInit+0xb4>)
 8000fce:	f000 fa3f 	bl	8001450 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_PCD_MspInit+0xb0>)
 8000fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd6:	4a0d      	ldr	r2, [pc, #52]	; (800100c <HAL_PCD_MspInit+0xb0>)
 8000fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fdc:	6353      	str	r3, [r2, #52]	; 0x34
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_PCD_MspInit+0xb0>)
 8000fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <HAL_PCD_MspInit+0xb0>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a07      	ldr	r2, [pc, #28]	; (800100c <HAL_PCD_MspInit+0xb0>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <HAL_PCD_MspInit+0xb0>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001002:	bf00      	nop
 8001004:	3728      	adds	r7, #40	; 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40020000 	.word	0x40020000

08001014 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08c      	sub	sp, #48	; 0x30
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	2037      	movs	r0, #55	; 0x37
 800102a:	f000 f9e7 	bl	80013fc <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800102e:	2037      	movs	r0, #55	; 0x37
 8001030:	f000 fa00 	bl	8001434 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <HAL_InitTick+0xa0>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	4a1e      	ldr	r2, [pc, #120]	; (80010b4 <HAL_InitTick+0xa0>)
 800103a:	f043 0320 	orr.w	r3, r3, #32
 800103e:	6413      	str	r3, [r2, #64]	; 0x40
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_InitTick+0xa0>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f003 0320 	and.w	r3, r3, #32
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800104c:	f107 0210 	add.w	r2, r7, #16
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f001 f9b2 	bl	80023c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800105c:	f001 f988 	bl	8002370 <HAL_RCC_GetPCLK1Freq>
 8001060:	4603      	mov	r3, r0
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001068:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <HAL_InitTick+0xa4>)
 800106a:	fba2 2303 	umull	r2, r3, r2, r3
 800106e:	0c9b      	lsrs	r3, r3, #18
 8001070:	3b01      	subs	r3, #1
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_InitTick+0xa8>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <HAL_InitTick+0xac>)
 8001078:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_InitTick+0xa8>)
 800107c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001080:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001082:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <HAL_InitTick+0xa8>)
 8001084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001086:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <HAL_InitTick+0xa8>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_InitTick+0xa8>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001094:	4809      	ldr	r0, [pc, #36]	; (80010bc <HAL_InitTick+0xa8>)
 8001096:	f001 fdb3 	bl	8002c00 <HAL_TIM_Base_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d104      	bne.n	80010aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <HAL_InitTick+0xa8>)
 80010a2:	f001 fde3 	bl	8002c6c <HAL_TIM_Base_Start_IT>
 80010a6:	4603      	mov	r3, r0
 80010a8:	e000      	b.n	80010ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3730      	adds	r7, #48	; 0x30
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	431bde83 	.word	0x431bde83
 80010bc:	20004e58 	.word	0x20004e58
 80010c0:	40001400 	.word	0x40001400

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <NMI_Handler+0x4>

080010ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <TIM7_IRQHandler+0x10>)
 80010f6:	f001 fde3 	bl	8002cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20004e58 	.word	0x20004e58

08001104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <_sbrk+0x5c>)
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <_sbrk+0x60>)
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <_sbrk+0x64>)
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <_sbrk+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	d207      	bcs.n	8001144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001134:	f006 f902 	bl	800733c <__errno>
 8001138:	4602      	mov	r2, r0
 800113a:	230c      	movs	r3, #12
 800113c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e009      	b.n	8001158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <_sbrk+0x64>)
 8001154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20050000 	.word	0x20050000
 8001164:	00000400 	.word	0x00000400
 8001168:	20000098 	.word	0x20000098
 800116c:	20004ee0 	.word	0x20004ee0

08001170 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <SystemInit+0x28>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <SystemInit+0x28>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <SystemInit+0x28>)
 8001186:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800118a:	609a      	str	r2, [r3, #8]
#endif
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800119c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011a2:	e003      	b.n	80011ac <LoopCopyDataInit>

080011a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011aa:	3104      	adds	r1, #4

080011ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011ac:	480b      	ldr	r0, [pc, #44]	; (80011dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011b4:	d3f6      	bcc.n	80011a4 <CopyDataInit>
  ldr  r2, =_sbss
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011b8:	e002      	b.n	80011c0 <LoopFillZerobss>

080011ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011bc:	f842 3b04 	str.w	r3, [r2], #4

080011c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011c4:	d3f9      	bcc.n	80011ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011c6:	f7ff ffd3 	bl	8001170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ca:	f006 f8bd 	bl	8007348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ce:	f7ff fb09 	bl	80007e4 <main>
  bx  lr    
 80011d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011d4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80011d8:	08007e54 	.word	0x08007e54
  ldr  r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011e0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80011e4:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 80011e8:	20004ee0 	.word	0x20004ee0

080011ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC_IRQHandler>

080011ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f2:	2003      	movs	r0, #3
 80011f4:	f000 f8f7 	bl	80013e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff ff0b 	bl	8001014 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80011fe:	f7ff fe41 	bl	8000e84 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x20>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x24>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <HAL_IncTick+0x24>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000010 	.word	0x20000010
 800122c:	20004e98 	.word	0x20004e98

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_GetTick+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20004e98 	.word	0x20004e98

08001248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff ffee 	bl	8001230 <HAL_GetTick>
 8001254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001260:	d005      	beq.n	800126e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_Delay+0x40>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126e:	bf00      	nop
 8001270:	f7ff ffde 	bl	8001230 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	d8f7      	bhi.n	8001270 <HAL_Delay+0x28>
  {
  }
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000010 	.word	0x20000010

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <__NVIC_SetPriorityGrouping+0x40>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x40>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00
 80012d0:	05fa0000 	.word	0x05fa0000

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db0b      	blt.n	800131a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 021f 	and.w	r2, r3, #31
 8001308:	4907      	ldr	r1, [pc, #28]	; (8001328 <__NVIC_EnableIRQ+0x38>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	2001      	movs	r0, #1
 8001312:	fa00 f202 	lsl.w	r2, r0, r2
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	db0a      	blt.n	8001356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	490c      	ldr	r1, [pc, #48]	; (8001378 <__NVIC_SetPriority+0x4c>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	0112      	lsls	r2, r2, #4
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	440b      	add	r3, r1
 8001350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001354:	e00a      	b.n	800136c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4908      	ldr	r1, [pc, #32]	; (800137c <__NVIC_SetPriority+0x50>)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	3b04      	subs	r3, #4
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	440b      	add	r3, r1
 800136a:	761a      	strb	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f1c3 0307 	rsb	r3, r3, #7
 800139a:	2b04      	cmp	r3, #4
 800139c:	bf28      	it	cs
 800139e:	2304      	movcs	r3, #4
 80013a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3304      	adds	r3, #4
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d902      	bls.n	80013b0 <NVIC_EncodePriority+0x30>
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3b03      	subs	r3, #3
 80013ae:	e000      	b.n	80013b2 <NVIC_EncodePriority+0x32>
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	4313      	orrs	r3, r2
         );
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	; 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff4c 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800140e:	f7ff ff61 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 8001412:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	6978      	ldr	r0, [r7, #20]
 800141a:	f7ff ffb1 	bl	8001380 <NVIC_EncodePriority>
 800141e:	4602      	mov	r2, r0
 8001420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff80 	bl	800132c <__NVIC_SetPriority>
}
 800142c:	bf00      	nop
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff54 	bl	80012f0 <__NVIC_EnableIRQ>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	e175      	b.n	800175c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	429a      	cmp	r2, r3
 800148a:	f040 8164 	bne.w	8001756 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d00b      	beq.n	80014ae <HAL_GPIO_Init+0x5e>
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014a2:	2b11      	cmp	r3, #17
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b12      	cmp	r3, #18
 80014ac:	d130      	bne.n	8001510 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	2203      	movs	r2, #3
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e4:	2201      	movs	r2, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	091b      	lsrs	r3, r3, #4
 80014fa:	f003 0201 	and.w	r2, r3, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x100>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b12      	cmp	r3, #18
 800154e:	d123      	bne.n	8001598 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	220f      	movs	r2, #15
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	69b9      	ldr	r1, [r7, #24]
 8001594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0203 	and.w	r2, r3, #3
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80be 	beq.w	8001756 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	4b65      	ldr	r3, [pc, #404]	; (8001770 <HAL_GPIO_Init+0x320>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	4a64      	ldr	r2, [pc, #400]	; (8001770 <HAL_GPIO_Init+0x320>)
 80015e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e4:	6453      	str	r3, [r2, #68]	; 0x44
 80015e6:	4b62      	ldr	r3, [pc, #392]	; (8001770 <HAL_GPIO_Init+0x320>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80015f2:	4a60      	ldr	r2, [pc, #384]	; (8001774 <HAL_GPIO_Init+0x324>)
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a57      	ldr	r2, [pc, #348]	; (8001778 <HAL_GPIO_Init+0x328>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d037      	beq.n	800168e <HAL_GPIO_Init+0x23e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a56      	ldr	r2, [pc, #344]	; (800177c <HAL_GPIO_Init+0x32c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d031      	beq.n	800168a <HAL_GPIO_Init+0x23a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a55      	ldr	r2, [pc, #340]	; (8001780 <HAL_GPIO_Init+0x330>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d02b      	beq.n	8001686 <HAL_GPIO_Init+0x236>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a54      	ldr	r2, [pc, #336]	; (8001784 <HAL_GPIO_Init+0x334>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d025      	beq.n	8001682 <HAL_GPIO_Init+0x232>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a53      	ldr	r2, [pc, #332]	; (8001788 <HAL_GPIO_Init+0x338>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d01f      	beq.n	800167e <HAL_GPIO_Init+0x22e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a52      	ldr	r2, [pc, #328]	; (800178c <HAL_GPIO_Init+0x33c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d019      	beq.n	800167a <HAL_GPIO_Init+0x22a>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a51      	ldr	r2, [pc, #324]	; (8001790 <HAL_GPIO_Init+0x340>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d013      	beq.n	8001676 <HAL_GPIO_Init+0x226>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a50      	ldr	r2, [pc, #320]	; (8001794 <HAL_GPIO_Init+0x344>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00d      	beq.n	8001672 <HAL_GPIO_Init+0x222>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4f      	ldr	r2, [pc, #316]	; (8001798 <HAL_GPIO_Init+0x348>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d007      	beq.n	800166e <HAL_GPIO_Init+0x21e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4e      	ldr	r2, [pc, #312]	; (800179c <HAL_GPIO_Init+0x34c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d101      	bne.n	800166a <HAL_GPIO_Init+0x21a>
 8001666:	2309      	movs	r3, #9
 8001668:	e012      	b.n	8001690 <HAL_GPIO_Init+0x240>
 800166a:	230a      	movs	r3, #10
 800166c:	e010      	b.n	8001690 <HAL_GPIO_Init+0x240>
 800166e:	2308      	movs	r3, #8
 8001670:	e00e      	b.n	8001690 <HAL_GPIO_Init+0x240>
 8001672:	2307      	movs	r3, #7
 8001674:	e00c      	b.n	8001690 <HAL_GPIO_Init+0x240>
 8001676:	2306      	movs	r3, #6
 8001678:	e00a      	b.n	8001690 <HAL_GPIO_Init+0x240>
 800167a:	2305      	movs	r3, #5
 800167c:	e008      	b.n	8001690 <HAL_GPIO_Init+0x240>
 800167e:	2304      	movs	r3, #4
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x240>
 8001682:	2303      	movs	r3, #3
 8001684:	e004      	b.n	8001690 <HAL_GPIO_Init+0x240>
 8001686:	2302      	movs	r3, #2
 8001688:	e002      	b.n	8001690 <HAL_GPIO_Init+0x240>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <HAL_GPIO_Init+0x240>
 800168e:	2300      	movs	r3, #0
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	f002 0203 	and.w	r2, r2, #3
 8001696:	0092      	lsls	r2, r2, #2
 8001698:	4093      	lsls	r3, r2
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016a0:	4934      	ldr	r1, [pc, #208]	; (8001774 <HAL_GPIO_Init+0x324>)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	3302      	adds	r3, #2
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ae:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <HAL_GPIO_Init+0x350>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016d2:	4a33      	ldr	r2, [pc, #204]	; (80017a0 <HAL_GPIO_Init+0x350>)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016d8:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <HAL_GPIO_Init+0x350>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016fc:	4a28      	ldr	r2, [pc, #160]	; (80017a0 <HAL_GPIO_Init+0x350>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001702:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_GPIO_Init+0x350>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001726:	4a1e      	ldr	r2, [pc, #120]	; (80017a0 <HAL_GPIO_Init+0x350>)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_GPIO_Init+0x350>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001750:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <HAL_GPIO_Init+0x350>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3301      	adds	r3, #1
 800175a:	61fb      	str	r3, [r7, #28]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	2b0f      	cmp	r3, #15
 8001760:	f67f ae86 	bls.w	8001470 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001764:	bf00      	nop
 8001766:	3724      	adds	r7, #36	; 0x24
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	40023800 	.word	0x40023800
 8001774:	40013800 	.word	0x40013800
 8001778:	40020000 	.word	0x40020000
 800177c:	40020400 	.word	0x40020400
 8001780:	40020800 	.word	0x40020800
 8001784:	40020c00 	.word	0x40020c00
 8001788:	40021000 	.word	0x40021000
 800178c:	40021400 	.word	0x40021400
 8001790:	40021800 	.word	0x40021800
 8001794:	40021c00 	.word	0x40021c00
 8001798:	40022000 	.word	0x40022000
 800179c:	40022400 	.word	0x40022400
 80017a0:	40013c00 	.word	0x40013c00

080017a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80017c0:	e003      	b.n	80017ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	041a      	lsls	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	619a      	str	r2, [r3, #24]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d8:	b08f      	sub	sp, #60	; 0x3c
 80017da:	af0a      	add	r7, sp, #40	; 0x28
 80017dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e116      	b.n	8001a16 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d106      	bne.n	8001808 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff fbaa 	bl	8000f5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2203      	movs	r2, #3
 800180c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f002 fa4a 	bl	8003cc0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	687e      	ldr	r6, [r7, #4]
 8001834:	466d      	mov	r5, sp
 8001836:	f106 0410 	add.w	r4, r6, #16
 800183a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001842:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001846:	e885 0003 	stmia.w	r5, {r0, r1}
 800184a:	1d33      	adds	r3, r6, #4
 800184c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184e:	6838      	ldr	r0, [r7, #0]
 8001850:	f002 f9de 	bl	8003c10 <USB_CoreInit>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2202      	movs	r2, #2
 800185e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e0d7      	b.n	8001a16 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f002 fa38 	bl	8003ce2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
 8001876:	e04a      	b.n	800190e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	1a9b      	subs	r3, r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	333d      	adds	r3, #61	; 0x3d
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	333c      	adds	r3, #60	; 0x3c
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	b298      	uxth	r0, r3
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	3342      	adds	r3, #66	; 0x42
 80018b4:	4602      	mov	r2, r0
 80018b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	333f      	adds	r3, #63	; 0x3f
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	3344      	adds	r3, #68	; 0x44
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	3348      	adds	r3, #72	; 0x48
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	3350      	adds	r3, #80	; 0x50
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	3301      	adds	r3, #1
 800190c:	73fb      	strb	r3, [r7, #15]
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	429a      	cmp	r2, r3
 8001916:	d3af      	bcc.n	8001878 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001918:	2300      	movs	r3, #0
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e044      	b.n	80019a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001934:	7bfa      	ldrb	r2, [r7, #15]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800198c:	7bfa      	ldrb	r2, [r7, #15]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	3301      	adds	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
 80019a8:	7bfa      	ldrb	r2, [r7, #15]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d3b5      	bcc.n	800191e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	687e      	ldr	r6, [r7, #4]
 80019ba:	466d      	mov	r5, sp
 80019bc:	f106 0410 	add.w	r4, r6, #16
 80019c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80019d0:	1d33      	adds	r3, r6, #4
 80019d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d4:	6838      	ldr	r0, [r7, #0]
 80019d6:	f002 f9af 	bl	8003d38 <USB_DevInit>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e014      	b.n	8001a16 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d102      	bne.n	8001a0a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f80b 	bl	8001a20 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 fb61 	bl	80040d6 <USB_DevDisconnect>

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001a20 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_PCDEx_ActivateLPM+0x44>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	10000003 	.word	0x10000003

08001a68 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40007000 	.word	0x40007000

08001a88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e291      	b.n	8001fc2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 8087 	beq.w	8001bba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aac:	4b96      	ldr	r3, [pc, #600]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d00c      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab8:	4b93      	ldr	r3, [pc, #588]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d112      	bne.n	8001aea <HAL_RCC_OscConfig+0x62>
 8001ac4:	4b90      	ldr	r3, [pc, #576]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ad0:	d10b      	bne.n	8001aea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad2:	4b8d      	ldr	r3, [pc, #564]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d06c      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x130>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d168      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e26b      	b.n	8001fc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x7a>
 8001af4:	4b84      	ldr	r3, [pc, #528]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a83      	ldr	r2, [pc, #524]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	e02e      	b.n	8001b60 <HAL_RCC_OscConfig+0xd8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x9c>
 8001b0a:	4b7f      	ldr	r3, [pc, #508]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a7e      	ldr	r2, [pc, #504]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b7c      	ldr	r3, [pc, #496]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a7b      	ldr	r2, [pc, #492]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e01d      	b.n	8001b60 <HAL_RCC_OscConfig+0xd8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0xc0>
 8001b2e:	4b76      	ldr	r3, [pc, #472]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a75      	ldr	r2, [pc, #468]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4b73      	ldr	r3, [pc, #460]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a72      	ldr	r2, [pc, #456]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e00b      	b.n	8001b60 <HAL_RCC_OscConfig+0xd8>
 8001b48:	4b6f      	ldr	r3, [pc, #444]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a6e      	ldr	r2, [pc, #440]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b6c      	ldr	r3, [pc, #432]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a6b      	ldr	r2, [pc, #428]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d013      	beq.n	8001b90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff fb62 	bl	8001230 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff fb5e 	bl	8001230 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e21f      	b.n	8001fc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	4b61      	ldr	r3, [pc, #388]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0xe8>
 8001b8e:	e014      	b.n	8001bba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff fb4e 	bl	8001230 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b98:	f7ff fb4a 	bl	8001230 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	; 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e20b      	b.n	8001fc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001baa:	4b57      	ldr	r3, [pc, #348]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x110>
 8001bb6:	e000      	b.n	8001bba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d069      	beq.n	8001c9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc6:	4b50      	ldr	r3, [pc, #320]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00b      	beq.n	8001bea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd2:	4b4d      	ldr	r3, [pc, #308]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d11c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x190>
 8001bde:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d116      	bne.n	8001c18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bea:	4b47      	ldr	r3, [pc, #284]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <HAL_RCC_OscConfig+0x17a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e1df      	b.n	8001fc2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	493d      	ldr	r1, [pc, #244]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c16:	e040      	b.n	8001c9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d023      	beq.n	8001c68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c20:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a38      	ldr	r2, [pc, #224]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fb00 	bl	8001230 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c34:	f7ff fafc 	bl	8001230 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e1bd      	b.n	8001fc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c46:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c52:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4929      	ldr	r1, [pc, #164]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
 8001c66:	e018      	b.n	8001c9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c68:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a26      	ldr	r2, [pc, #152]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff fadc 	bl	8001230 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fad8 	bl	8001230 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e199      	b.n	8001fc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d038      	beq.n	8001d18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d019      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb2:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cba:	f7ff fab9 	bl	8001230 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fab5 	bl	8001230 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e176      	b.n	8001fc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x23a>
 8001ce0:	e01a      	b.n	8001d18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce6:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <HAL_RCC_OscConfig+0x280>)
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cee:	f7ff fa9f 	bl	8001230 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf6:	f7ff fa9b 	bl	8001230 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d903      	bls.n	8001d0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e15c      	b.n	8001fc2 <HAL_RCC_OscConfig+0x53a>
 8001d08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	4b91      	ldr	r3, [pc, #580]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ee      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80a4 	beq.w	8001e6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d26:	4b8b      	ldr	r3, [pc, #556]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10d      	bne.n	8001d4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	4b88      	ldr	r3, [pc, #544]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a87      	ldr	r2, [pc, #540]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3e:	4b85      	ldr	r3, [pc, #532]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4e:	4b82      	ldr	r3, [pc, #520]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d118      	bne.n	8001d8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d5a:	4b7f      	ldr	r3, [pc, #508]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a7e      	ldr	r2, [pc, #504]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d66:	f7ff fa63 	bl	8001230 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6e:	f7ff fa5f 	bl	8001230 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b64      	cmp	r3, #100	; 0x64
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e120      	b.n	8001fc2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d80:	4b75      	ldr	r3, [pc, #468]	; (8001f58 <HAL_RCC_OscConfig+0x4d0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d106      	bne.n	8001da2 <HAL_RCC_OscConfig+0x31a>
 8001d94:	4b6f      	ldr	r3, [pc, #444]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d98:	4a6e      	ldr	r2, [pc, #440]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001da0:	e02d      	b.n	8001dfe <HAL_RCC_OscConfig+0x376>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x33c>
 8001daa:	4b6a      	ldr	r3, [pc, #424]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dae:	4a69      	ldr	r2, [pc, #420]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001db0:	f023 0301 	bic.w	r3, r3, #1
 8001db4:	6713      	str	r3, [r2, #112]	; 0x70
 8001db6:	4b67      	ldr	r3, [pc, #412]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dba:	4a66      	ldr	r2, [pc, #408]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001dbc:	f023 0304 	bic.w	r3, r3, #4
 8001dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc2:	e01c      	b.n	8001dfe <HAL_RCC_OscConfig+0x376>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b05      	cmp	r3, #5
 8001dca:	d10c      	bne.n	8001de6 <HAL_RCC_OscConfig+0x35e>
 8001dcc:	4b61      	ldr	r3, [pc, #388]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd0:	4a60      	ldr	r2, [pc, #384]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd8:	4b5e      	ldr	r3, [pc, #376]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a5d      	ldr	r2, [pc, #372]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
 8001de4:	e00b      	b.n	8001dfe <HAL_RCC_OscConfig+0x376>
 8001de6:	4b5b      	ldr	r3, [pc, #364]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dea:	4a5a      	ldr	r2, [pc, #360]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	6713      	str	r3, [r2, #112]	; 0x70
 8001df2:	4b58      	ldr	r3, [pc, #352]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	4a57      	ldr	r2, [pc, #348]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001df8:	f023 0304 	bic.w	r3, r3, #4
 8001dfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d015      	beq.n	8001e32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e06:	f7ff fa13 	bl	8001230 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7ff fa0f 	bl	8001230 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e0ce      	b.n	8001fc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e24:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0ee      	beq.n	8001e0e <HAL_RCC_OscConfig+0x386>
 8001e30:	e014      	b.n	8001e5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e32:	f7ff f9fd 	bl	8001230 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff f9f9 	bl	8001230 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0b8      	b.n	8001fc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e50:	4b40      	ldr	r3, [pc, #256]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1ee      	bne.n	8001e3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d105      	bne.n	8001e6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e62:	4b3c      	ldr	r3, [pc, #240]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a3b      	ldr	r2, [pc, #236]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80a4 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e78:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d06b      	beq.n	8001f5c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d149      	bne.n	8001f20 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8c:	4b31      	ldr	r3, [pc, #196]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a30      	ldr	r2, [pc, #192]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff f9ca 	bl	8001230 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff f9c6 	bl	8001230 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e087      	b.n	8001fc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	019b      	lsls	r3, r3, #6
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001ee6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001eea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a18      	ldr	r2, [pc, #96]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff f99a 	bl	8001230 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7ff f996 	bl	8001230 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e057      	b.n	8001fc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x478>
 8001f1e:	e04f      	b.n	8001fc0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff f980 	bl	8001230 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f34:	f7ff f97c 	bl	8001230 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e03d      	b.n	8001fc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f46:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4ac>
 8001f52:	e035      	b.n	8001fc0 <HAL_RCC_OscConfig+0x538>
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x544>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d028      	beq.n	8001fbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d121      	bne.n	8001fbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d11a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d111      	bne.n	8001fbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	085b      	lsrs	r3, r3, #1
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d107      	bne.n	8001fbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800

08001fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0d0      	b.n	800218a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b6a      	ldr	r3, [pc, #424]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d910      	bls.n	8002018 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b67      	ldr	r3, [pc, #412]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 020f 	bic.w	r2, r3, #15
 8001ffe:	4965      	ldr	r1, [pc, #404]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b63      	ldr	r3, [pc, #396]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0b8      	b.n	800218a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002030:	4b59      	ldr	r3, [pc, #356]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a58      	ldr	r2, [pc, #352]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800203a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002048:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a52      	ldr	r2, [pc, #328]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 800204e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002052:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b50      	ldr	r3, [pc, #320]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	494d      	ldr	r1, [pc, #308]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d040      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b47      	ldr	r3, [pc, #284]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d115      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e07f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002092:	4b41      	ldr	r3, [pc, #260]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e073      	b.n	800218a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a2:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e06b      	b.n	800218a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b2:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f023 0203 	bic.w	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4936      	ldr	r1, [pc, #216]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020c4:	f7ff f8b4 	bl	8001230 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7ff f8b0 	bl	8001230 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e053      	b.n	800218a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 020c 	and.w	r2, r3, #12
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1eb      	bne.n	80020cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d210      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 020f 	bic.w	r2, r3, #15
 800210a:	4922      	ldr	r1, [pc, #136]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e032      	b.n	800218a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4916      	ldr	r1, [pc, #88]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	490e      	ldr	r1, [pc, #56]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002162:	f000 f821 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002166:	4601      	mov	r1, r0
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <HAL_RCC_ClockConfig+0x1cc>)
 8002174:	5cd3      	ldrb	r3, [r2, r3]
 8002176:	fa21 f303 	lsr.w	r3, r1, r3
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <HAL_RCC_ClockConfig+0x1d0>)
 800217c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1d4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe ff46 	bl	8001014 <HAL_InitTick>

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00
 8002198:	40023800 	.word	0x40023800
 800219c:	08007df8 	.word	0x08007df8
 80021a0:	20000008 	.word	0x20000008
 80021a4:	2000000c 	.word	0x2000000c

080021a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	2300      	movs	r3, #0
 80021b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021be:	4b63      	ldr	r3, [pc, #396]	; (800234c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d007      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x32>
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d008      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x38>
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f040 80b4 	bne.w	800233c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b5e      	ldr	r3, [pc, #376]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021d6:	60bb      	str	r3, [r7, #8]
      break;
 80021d8:	e0b3      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021da:	4b5e      	ldr	r3, [pc, #376]	; (8002354 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80021dc:	60bb      	str	r3, [r7, #8]
      break;
 80021de:	e0b0      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e0:	4b5a      	ldr	r3, [pc, #360]	; (800234c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021ea:	4b58      	ldr	r3, [pc, #352]	; (800234c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d04a      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f6:	4b55      	ldr	r3, [pc, #340]	; (800234c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	099b      	lsrs	r3, r3, #6
 80021fc:	f04f 0400 	mov.w	r4, #0
 8002200:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	ea03 0501 	and.w	r5, r3, r1
 800220c:	ea04 0602 	and.w	r6, r4, r2
 8002210:	4629      	mov	r1, r5
 8002212:	4632      	mov	r2, r6
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	f04f 0400 	mov.w	r4, #0
 800221c:	0154      	lsls	r4, r2, #5
 800221e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002222:	014b      	lsls	r3, r1, #5
 8002224:	4619      	mov	r1, r3
 8002226:	4622      	mov	r2, r4
 8002228:	1b49      	subs	r1, r1, r5
 800222a:	eb62 0206 	sbc.w	r2, r2, r6
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	f04f 0400 	mov.w	r4, #0
 8002236:	0194      	lsls	r4, r2, #6
 8002238:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800223c:	018b      	lsls	r3, r1, #6
 800223e:	1a5b      	subs	r3, r3, r1
 8002240:	eb64 0402 	sbc.w	r4, r4, r2
 8002244:	f04f 0100 	mov.w	r1, #0
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	00e2      	lsls	r2, r4, #3
 800224e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002252:	00d9      	lsls	r1, r3, #3
 8002254:	460b      	mov	r3, r1
 8002256:	4614      	mov	r4, r2
 8002258:	195b      	adds	r3, r3, r5
 800225a:	eb44 0406 	adc.w	r4, r4, r6
 800225e:	f04f 0100 	mov.w	r1, #0
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	0262      	lsls	r2, r4, #9
 8002268:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800226c:	0259      	lsls	r1, r3, #9
 800226e:	460b      	mov	r3, r1
 8002270:	4614      	mov	r4, r2
 8002272:	4618      	mov	r0, r3
 8002274:	4621      	mov	r1, r4
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f04f 0400 	mov.w	r4, #0
 800227c:	461a      	mov	r2, r3
 800227e:	4623      	mov	r3, r4
 8002280:	f7fe f81e 	bl	80002c0 <__aeabi_uldivmod>
 8002284:	4603      	mov	r3, r0
 8002286:	460c      	mov	r4, r1
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e049      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800228c:	4b2f      	ldr	r3, [pc, #188]	; (800234c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	f04f 0400 	mov.w	r4, #0
 8002296:	f240 11ff 	movw	r1, #511	; 0x1ff
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	ea03 0501 	and.w	r5, r3, r1
 80022a2:	ea04 0602 	and.w	r6, r4, r2
 80022a6:	4629      	mov	r1, r5
 80022a8:	4632      	mov	r2, r6
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	f04f 0400 	mov.w	r4, #0
 80022b2:	0154      	lsls	r4, r2, #5
 80022b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022b8:	014b      	lsls	r3, r1, #5
 80022ba:	4619      	mov	r1, r3
 80022bc:	4622      	mov	r2, r4
 80022be:	1b49      	subs	r1, r1, r5
 80022c0:	eb62 0206 	sbc.w	r2, r2, r6
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	f04f 0400 	mov.w	r4, #0
 80022cc:	0194      	lsls	r4, r2, #6
 80022ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022d2:	018b      	lsls	r3, r1, #6
 80022d4:	1a5b      	subs	r3, r3, r1
 80022d6:	eb64 0402 	sbc.w	r4, r4, r2
 80022da:	f04f 0100 	mov.w	r1, #0
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	00e2      	lsls	r2, r4, #3
 80022e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022e8:	00d9      	lsls	r1, r3, #3
 80022ea:	460b      	mov	r3, r1
 80022ec:	4614      	mov	r4, r2
 80022ee:	195b      	adds	r3, r3, r5
 80022f0:	eb44 0406 	adc.w	r4, r4, r6
 80022f4:	f04f 0100 	mov.w	r1, #0
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	02a2      	lsls	r2, r4, #10
 80022fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002302:	0299      	lsls	r1, r3, #10
 8002304:	460b      	mov	r3, r1
 8002306:	4614      	mov	r4, r2
 8002308:	4618      	mov	r0, r3
 800230a:	4621      	mov	r1, r4
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f04f 0400 	mov.w	r4, #0
 8002312:	461a      	mov	r2, r3
 8002314:	4623      	mov	r3, r4
 8002316:	f7fd ffd3 	bl	80002c0 <__aeabi_uldivmod>
 800231a:	4603      	mov	r3, r0
 800231c:	460c      	mov	r4, r1
 800231e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	3301      	adds	r3, #1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	fbb2 f3f3 	udiv	r3, r2, r3
 8002338:	60bb      	str	r3, [r7, #8]
      break;
 800233a:	e002      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800233e:	60bb      	str	r3, [r7, #8]
      break;
 8002340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002342:	68bb      	ldr	r3, [r7, #8]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800234c:	40023800 	.word	0x40023800
 8002350:	00f42400 	.word	0x00f42400
 8002354:	007a1200 	.word	0x007a1200

08002358 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_RCC_GetHCLKFreq+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000008 	.word	0x20000008

08002370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002374:	f7ff fff0 	bl	8002358 <HAL_RCC_GetHCLKFreq>
 8002378:	4601      	mov	r1, r0
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	0a9b      	lsrs	r3, r3, #10
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4a03      	ldr	r2, [pc, #12]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002386:	5cd3      	ldrb	r3, [r2, r3]
 8002388:	fa21 f303 	lsr.w	r3, r1, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800
 8002394:	08007e08 	.word	0x08007e08

08002398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800239c:	f7ff ffdc 	bl	8002358 <HAL_RCC_GetHCLKFreq>
 80023a0:	4601      	mov	r1, r0
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	0b5b      	lsrs	r3, r3, #13
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4a03      	ldr	r2, [pc, #12]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ae:	5cd3      	ldrb	r3, [r2, r3]
 80023b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40023800 	.word	0x40023800
 80023bc:	08007e08 	.word	0x08007e08

080023c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	220f      	movs	r2, #15
 80023ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_RCC_GetClockConfig+0x5c>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0203 	and.w	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <HAL_RCC_GetClockConfig+0x5c>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_RCC_GetClockConfig+0x5c>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_RCC_GetClockConfig+0x5c>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	08db      	lsrs	r3, r3, #3
 80023fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <HAL_RCC_GetClockConfig+0x60>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 020f 	and.w	r2, r3, #15
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	601a      	str	r2, [r3, #0]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	40023c00 	.word	0x40023c00

08002424 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d012      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800244c:	4b69      	ldr	r3, [pc, #420]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4a68      	ldr	r2, [pc, #416]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002452:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002456:	6093      	str	r3, [r2, #8]
 8002458:	4b66      	ldr	r3, [pc, #408]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002460:	4964      	ldr	r1, [pc, #400]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800246e:	2301      	movs	r3, #1
 8002470:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d017      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800247e:	4b5d      	ldr	r3, [pc, #372]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248c:	4959      	ldr	r1, [pc, #356]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800249c:	d101      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80024aa:	2301      	movs	r3, #1
 80024ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d017      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024ba:	4b4e      	ldr	r3, [pc, #312]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	494a      	ldr	r1, [pc, #296]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d8:	d101      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80024da:	2301      	movs	r3, #1
 80024dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 808b 	beq.w	800261e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b3a      	ldr	r3, [pc, #232]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	4a39      	ldr	r2, [pc, #228]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002512:	6413      	str	r3, [r2, #64]	; 0x40
 8002514:	4b37      	ldr	r3, [pc, #220]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002520:	4b35      	ldr	r3, [pc, #212]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a34      	ldr	r2, [pc, #208]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800252c:	f7fe fe80 	bl	8001230 <HAL_GetTick>
 8002530:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002534:	f7fe fe7c 	bl	8001230 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e355      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002546:	4b2c      	ldr	r3, [pc, #176]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002552:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d035      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d02e      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002570:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002578:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002584:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a1a      	ldr	r2, [pc, #104]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002590:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002592:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d114      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe fe44 	bl	8001230 <HAL_GetTick>
 80025a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025aa:	e00a      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f7fe fe40 	bl	8001230 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e317      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0ee      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025da:	d111      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025ea:	400b      	ands	r3, r1
 80025ec:	4901      	ldr	r1, [pc, #4]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
 80025f2:	e00b      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40007000 	.word	0x40007000
 80025fc:	0ffffcff 	.word	0x0ffffcff
 8002600:	4bb0      	ldr	r3, [pc, #704]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4aaf      	ldr	r2, [pc, #700]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002606:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800260a:	6093      	str	r3, [r2, #8]
 800260c:	4bad      	ldr	r3, [pc, #692]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800260e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002618:	49aa      	ldr	r1, [pc, #680]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800261a:	4313      	orrs	r3, r2
 800261c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d010      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800262a:	4ba6      	ldr	r3, [pc, #664]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800262c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002630:	4aa4      	ldr	r2, [pc, #656]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002636:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800263a:	4ba2      	ldr	r3, [pc, #648]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800263c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	499f      	ldr	r1, [pc, #636]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002658:	4b9a      	ldr	r3, [pc, #616]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002666:	4997      	ldr	r1, [pc, #604]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800267a:	4b92      	ldr	r3, [pc, #584]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002680:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002688:	498e      	ldr	r1, [pc, #568]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800269c:	4b89      	ldr	r3, [pc, #548]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026aa:	4986      	ldr	r1, [pc, #536]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026be:	4b81      	ldr	r3, [pc, #516]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	497d      	ldr	r1, [pc, #500]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e0:	4b78      	ldr	r3, [pc, #480]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	4975      	ldr	r1, [pc, #468]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002702:	4b70      	ldr	r3, [pc, #448]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f023 020c 	bic.w	r2, r3, #12
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002710:	496c      	ldr	r1, [pc, #432]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002724:	4b67      	ldr	r3, [pc, #412]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002732:	4964      	ldr	r1, [pc, #400]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002746:	4b5f      	ldr	r3, [pc, #380]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002754:	495b      	ldr	r1, [pc, #364]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002768:	4b56      	ldr	r3, [pc, #344]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	4953      	ldr	r1, [pc, #332]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800278a:	4b4e      	ldr	r3, [pc, #312]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	494a      	ldr	r1, [pc, #296]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80027ac:	4b45      	ldr	r3, [pc, #276]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	4942      	ldr	r1, [pc, #264]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80027ce:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027dc:	4939      	ldr	r1, [pc, #228]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027f0:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027fe:	4931      	ldr	r1, [pc, #196]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d011      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002812:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002820:	4928      	ldr	r1, [pc, #160]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800282c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002830:	d101      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002842:	2301      	movs	r3, #1
 8002844:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002852:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002858:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002860:	4918      	ldr	r1, [pc, #96]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00b      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002884:	490f      	ldr	r1, [pc, #60]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d005      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800289a:	f040 80d8 	bne.w	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80028a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028aa:	f7fe fcc1 	bl	8001230 <HAL_GetTick>
 80028ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028b2:	f7fe fcbd 	bl	8001230 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b64      	cmp	r3, #100	; 0x64
 80028be:	d903      	bls.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e196      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80028c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028c8:	4b6c      	ldr	r3, [pc, #432]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1ee      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d021      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d11d      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028e8:	4b64      	ldr	r3, [pc, #400]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ee:	0c1b      	lsrs	r3, r3, #16
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028f6:	4b61      	ldr	r3, [pc, #388]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028fc:	0e1b      	lsrs	r3, r3, #24
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	019a      	lsls	r2, r3, #6
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	041b      	lsls	r3, r3, #16
 800290e:	431a      	orrs	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	061b      	lsls	r3, r3, #24
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	071b      	lsls	r3, r3, #28
 800291c:	4957      	ldr	r1, [pc, #348]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d004      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002934:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002938:	d00a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002942:	2b00      	cmp	r3, #0
 8002944:	d02e      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294e:	d129      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002950:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002956:	0c1b      	lsrs	r3, r3, #16
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002964:	0f1b      	lsrs	r3, r3, #28
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	019a      	lsls	r2, r3, #6
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	041b      	lsls	r3, r3, #16
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	061b      	lsls	r3, r3, #24
 800297e:	431a      	orrs	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	071b      	lsls	r3, r3, #28
 8002984:	493d      	ldr	r1, [pc, #244]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800298c:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800298e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002992:	f023 021f 	bic.w	r2, r3, #31
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	3b01      	subs	r3, #1
 800299c:	4937      	ldr	r1, [pc, #220]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01d      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029b0:	4b32      	ldr	r3, [pc, #200]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80029b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b6:	0e1b      	lsrs	r3, r3, #24
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029be:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80029c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c4:	0f1b      	lsrs	r3, r3, #28
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	019a      	lsls	r2, r3, #6
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	431a      	orrs	r2, r3
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	431a      	orrs	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	071b      	lsls	r3, r3, #28
 80029e4:	4925      	ldr	r1, [pc, #148]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d011      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	019a      	lsls	r2, r3, #6
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	041b      	lsls	r3, r3, #16
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	061b      	lsls	r3, r3, #24
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	071b      	lsls	r3, r3, #28
 8002a14:	4919      	ldr	r1, [pc, #100]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a1c:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a16      	ldr	r2, [pc, #88]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a28:	f7fe fc02 	bl	8001230 <HAL_GetTick>
 8002a2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a30:	f7fe fbfe 	bl	8001230 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	; 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e0d7      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	f040 80cd 	bne.w	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a62:	f7fe fbe5 	bl	8001230 <HAL_GetTick>
 8002a66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a6a:	f7fe fbe1 	bl	8001230 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b64      	cmp	r3, #100	; 0x64
 8002a76:	d903      	bls.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e0ba      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002a7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a80:	4b5e      	ldr	r3, [pc, #376]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a8c:	d0ed      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d02e      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d12a      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ab6:	4b51      	ldr	r3, [pc, #324]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ac4:	4b4d      	ldr	r3, [pc, #308]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	0f1b      	lsrs	r3, r3, #28
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	019a      	lsls	r2, r3, #6
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	041b      	lsls	r3, r3, #16
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	061b      	lsls	r3, r3, #24
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	071b      	lsls	r3, r3, #28
 8002aea:	4944      	ldr	r1, [pc, #272]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002af2:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	3b01      	subs	r3, #1
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	493d      	ldr	r1, [pc, #244]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d022      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b20:	d11d      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b22:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b28:	0e1b      	lsrs	r3, r3, #24
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b30:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	0f1b      	lsrs	r3, r3, #28
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	019a      	lsls	r2, r3, #6
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	041b      	lsls	r3, r3, #16
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	061b      	lsls	r3, r3, #24
 8002b50:	431a      	orrs	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	071b      	lsls	r3, r3, #28
 8002b56:	4929      	ldr	r1, [pc, #164]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d028      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b70:	0e1b      	lsrs	r3, r3, #24
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b78:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	0c1b      	lsrs	r3, r3, #16
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	019a      	lsls	r2, r3, #6
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	041b      	lsls	r3, r3, #16
 8002b90:	431a      	orrs	r2, r3
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	061b      	lsls	r3, r3, #24
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	071b      	lsls	r3, r3, #28
 8002b9e:	4917      	ldr	r1, [pc, #92]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	4911      	ldr	r1, [pc, #68]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc8:	f7fe fb32 	bl	8001230 <HAL_GetTick>
 8002bcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bd0:	f7fe fb2e 	bl	8001230 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e007      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bee:	d1ef      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800

08002c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e01d      	b.n	8002c4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f815 	bl	8002c56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f000 f986 	bl	8002f50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <HAL_TIM_Base_Start_IT+0x50>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b06      	cmp	r3, #6
 8002c94:	d00b      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x42>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9c:	d007      	beq.n	8002cae <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	00010007 	.word	0x00010007

08002cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d122      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d11b      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0202 	mvn.w	r2, #2
 8002cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f905 	bl	8002f12 <HAL_TIM_IC_CaptureCallback>
 8002d08:	e005      	b.n	8002d16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f8f7 	bl	8002efe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f908 	bl	8002f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d122      	bne.n	8002d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d11b      	bne.n	8002d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0204 	mvn.w	r2, #4
 8002d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2202      	movs	r2, #2
 8002d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f8db 	bl	8002f12 <HAL_TIM_IC_CaptureCallback>
 8002d5c:	e005      	b.n	8002d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f8cd 	bl	8002efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f8de 	bl	8002f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d122      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d11b      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0208 	mvn.w	r2, #8
 8002d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2204      	movs	r2, #4
 8002d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f8b1 	bl	8002f12 <HAL_TIM_IC_CaptureCallback>
 8002db0:	e005      	b.n	8002dbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f8a3 	bl	8002efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f8b4 	bl	8002f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	2b10      	cmp	r3, #16
 8002dd0:	d122      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	2b10      	cmp	r3, #16
 8002dde:	d11b      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f06f 0210 	mvn.w	r2, #16
 8002de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2208      	movs	r2, #8
 8002dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f887 	bl	8002f12 <HAL_TIM_IC_CaptureCallback>
 8002e04:	e005      	b.n	8002e12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f879 	bl	8002efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f88a 	bl	8002f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d107      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0201 	mvn.w	r2, #1
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fe f80a 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	2b80      	cmp	r3, #128	; 0x80
 8002e50:	d10e      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5c:	2b80      	cmp	r3, #128	; 0x80
 8002e5e:	d107      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f91a 	bl	80030a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e7e:	d10e      	bne.n	8002e9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b80      	cmp	r3, #128	; 0x80
 8002e8c:	d107      	bne.n	8002e9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f90d 	bl	80030b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea8:	2b40      	cmp	r3, #64	; 0x40
 8002eaa:	d10e      	bne.n	8002eca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b40      	cmp	r3, #64	; 0x40
 8002eb8:	d107      	bne.n	8002eca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f838 	bl	8002f3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d10e      	bne.n	8002ef6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d107      	bne.n	8002ef6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f06f 0220 	mvn.w	r2, #32
 8002eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f8cd 	bl	8003090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a40      	ldr	r2, [pc, #256]	; (8003064 <TIM_Base_SetConfig+0x114>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d013      	beq.n	8002f90 <TIM_Base_SetConfig+0x40>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6e:	d00f      	beq.n	8002f90 <TIM_Base_SetConfig+0x40>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a3d      	ldr	r2, [pc, #244]	; (8003068 <TIM_Base_SetConfig+0x118>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00b      	beq.n	8002f90 <TIM_Base_SetConfig+0x40>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a3c      	ldr	r2, [pc, #240]	; (800306c <TIM_Base_SetConfig+0x11c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d007      	beq.n	8002f90 <TIM_Base_SetConfig+0x40>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a3b      	ldr	r2, [pc, #236]	; (8003070 <TIM_Base_SetConfig+0x120>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d003      	beq.n	8002f90 <TIM_Base_SetConfig+0x40>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a3a      	ldr	r2, [pc, #232]	; (8003074 <TIM_Base_SetConfig+0x124>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d108      	bne.n	8002fa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a2f      	ldr	r2, [pc, #188]	; (8003064 <TIM_Base_SetConfig+0x114>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d02b      	beq.n	8003002 <TIM_Base_SetConfig+0xb2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb0:	d027      	beq.n	8003002 <TIM_Base_SetConfig+0xb2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a2c      	ldr	r2, [pc, #176]	; (8003068 <TIM_Base_SetConfig+0x118>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d023      	beq.n	8003002 <TIM_Base_SetConfig+0xb2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a2b      	ldr	r2, [pc, #172]	; (800306c <TIM_Base_SetConfig+0x11c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d01f      	beq.n	8003002 <TIM_Base_SetConfig+0xb2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a2a      	ldr	r2, [pc, #168]	; (8003070 <TIM_Base_SetConfig+0x120>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d01b      	beq.n	8003002 <TIM_Base_SetConfig+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a29      	ldr	r2, [pc, #164]	; (8003074 <TIM_Base_SetConfig+0x124>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d017      	beq.n	8003002 <TIM_Base_SetConfig+0xb2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a28      	ldr	r2, [pc, #160]	; (8003078 <TIM_Base_SetConfig+0x128>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <TIM_Base_SetConfig+0xb2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a27      	ldr	r2, [pc, #156]	; (800307c <TIM_Base_SetConfig+0x12c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00f      	beq.n	8003002 <TIM_Base_SetConfig+0xb2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a26      	ldr	r2, [pc, #152]	; (8003080 <TIM_Base_SetConfig+0x130>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00b      	beq.n	8003002 <TIM_Base_SetConfig+0xb2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a25      	ldr	r2, [pc, #148]	; (8003084 <TIM_Base_SetConfig+0x134>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d007      	beq.n	8003002 <TIM_Base_SetConfig+0xb2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a24      	ldr	r2, [pc, #144]	; (8003088 <TIM_Base_SetConfig+0x138>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d003      	beq.n	8003002 <TIM_Base_SetConfig+0xb2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a23      	ldr	r2, [pc, #140]	; (800308c <TIM_Base_SetConfig+0x13c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d108      	bne.n	8003014 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4313      	orrs	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <TIM_Base_SetConfig+0x114>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d003      	beq.n	8003048 <TIM_Base_SetConfig+0xf8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a0c      	ldr	r2, [pc, #48]	; (8003074 <TIM_Base_SetConfig+0x124>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d103      	bne.n	8003050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	615a      	str	r2, [r3, #20]
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40010000 	.word	0x40010000
 8003068:	40000400 	.word	0x40000400
 800306c:	40000800 	.word	0x40000800
 8003070:	40000c00 	.word	0x40000c00
 8003074:	40010400 	.word	0x40010400
 8003078:	40014000 	.word	0x40014000
 800307c:	40014400 	.word	0x40014400
 8003080:	40014800 	.word	0x40014800
 8003084:	40001800 	.word	0x40001800
 8003088:	40001c00 	.word	0x40001c00
 800308c:	40002000 	.word	0x40002000

08003090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e040      	b.n	8003160 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd fef0 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2224      	movs	r2, #36	; 0x24
 80030f8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f98a 	bl	8003424 <UART_SetConfig>
 8003110:	4603      	mov	r3, r0
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e022      	b.n	8003160 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fc28 	bl	8003978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fcaf 	bl	8003abc <UART_CheckIdleState>
 800315e:	4603      	mov	r3, r0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	; 0x28
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317c:	2b20      	cmp	r3, #32
 800317e:	d17f      	bne.n	8003280 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <HAL_UART_Transmit+0x24>
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e078      	b.n	8003282 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_UART_Transmit+0x36>
 800319a:	2302      	movs	r3, #2
 800319c:	e071      	b.n	8003282 <HAL_UART_Transmit+0x11a>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2221      	movs	r2, #33	; 0x21
 80031b0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80031b2:	f7fe f83d 	bl	8001230 <HAL_GetTick>
 80031b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	88fa      	ldrh	r2, [r7, #6]
 80031c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d0:	d108      	bne.n	80031e4 <HAL_UART_Transmit+0x7c>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d104      	bne.n	80031e4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	e003      	b.n	80031ec <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80031f4:	e02c      	b.n	8003250 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	2180      	movs	r1, #128	; 0x80
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 fc8a 	bl	8003b1a <UART_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e038      	b.n	8003282 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10b      	bne.n	800322e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003224:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	3302      	adds	r3, #2
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	e007      	b.n	800323e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	781a      	ldrb	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	3301      	adds	r3, #1
 800323c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1cc      	bne.n	80031f6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2200      	movs	r2, #0
 8003264:	2140      	movs	r1, #64	; 0x40
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fc57 	bl	8003b1a <UART_WaitOnFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e005      	b.n	8003282 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b08a      	sub	sp, #40	; 0x28
 800328e:	af02      	add	r7, sp, #8
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	4613      	mov	r3, r2
 8003298:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800329e:	2b20      	cmp	r3, #32
 80032a0:	f040 80ba 	bne.w	8003418 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_UART_Receive+0x26>
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0b2      	b.n	800341a <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_UART_Receive+0x38>
 80032be:	2302      	movs	r3, #2
 80032c0:	e0ab      	b.n	800341a <HAL_UART_Receive+0x190>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2222      	movs	r2, #34	; 0x22
 80032d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80032d6:	f7fd ffab 	bl	8001230 <HAL_GetTick>
 80032da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	88fa      	ldrh	r2, [r7, #6]
 80032e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	88fa      	ldrh	r2, [r7, #6]
 80032e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f4:	d10e      	bne.n	8003314 <HAL_UART_Receive+0x8a>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <HAL_UART_Receive+0x80>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003304:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003308:	e02d      	b.n	8003366 <HAL_UART_Receive+0xdc>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	22ff      	movs	r2, #255	; 0xff
 800330e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003312:	e028      	b.n	8003366 <HAL_UART_Receive+0xdc>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10d      	bne.n	8003338 <HAL_UART_Receive+0xae>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d104      	bne.n	800332e <HAL_UART_Receive+0xa4>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	22ff      	movs	r2, #255	; 0xff
 8003328:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800332c:	e01b      	b.n	8003366 <HAL_UART_Receive+0xdc>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	227f      	movs	r2, #127	; 0x7f
 8003332:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003336:	e016      	b.n	8003366 <HAL_UART_Receive+0xdc>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003340:	d10d      	bne.n	800335e <HAL_UART_Receive+0xd4>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <HAL_UART_Receive+0xca>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	227f      	movs	r2, #127	; 0x7f
 800334e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003352:	e008      	b.n	8003366 <HAL_UART_Receive+0xdc>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	223f      	movs	r2, #63	; 0x3f
 8003358:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800335c:	e003      	b.n	8003366 <HAL_UART_Receive+0xdc>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800336c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003376:	d108      	bne.n	800338a <HAL_UART_Receive+0x100>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d104      	bne.n	800338a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8003380:	2300      	movs	r3, #0
 8003382:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	61bb      	str	r3, [r7, #24]
 8003388:	e003      	b.n	8003392 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800339a:	e032      	b.n	8003402 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2200      	movs	r2, #0
 80033a4:	2120      	movs	r1, #32
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fbb7 	bl	8003b1a <UART_WaitOnFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e031      	b.n	800341a <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10c      	bne.n	80033d6 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	8a7b      	ldrh	r3, [r7, #18]
 80033c6:	4013      	ands	r3, r2
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	3302      	adds	r3, #2
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	e00c      	b.n	80033f0 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	8a7b      	ldrh	r3, [r7, #18]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	4013      	ands	r3, r2
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3301      	adds	r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1c6      	bne.n	800339c <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8003418:	2302      	movs	r3, #2
  }
}
 800341a:	4618      	mov	r0, r3
 800341c:	3720      	adds	r7, #32
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4bb1      	ldr	r3, [pc, #708]	; (8003718 <UART_SetConfig+0x2f4>)
 8003454:	4013      	ands	r3, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	6939      	ldr	r1, [r7, #16]
 800345c:	430b      	orrs	r3, r1
 800345e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	430a      	orrs	r2, r1
 8003498:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a9f      	ldr	r2, [pc, #636]	; (800371c <UART_SetConfig+0x2f8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d121      	bne.n	80034e8 <UART_SetConfig+0xc4>
 80034a4:	4b9e      	ldr	r3, [pc, #632]	; (8003720 <UART_SetConfig+0x2fc>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d816      	bhi.n	80034e0 <UART_SetConfig+0xbc>
 80034b2:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <UART_SetConfig+0x94>)
 80034b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b8:	080034c9 	.word	0x080034c9
 80034bc:	080034d5 	.word	0x080034d5
 80034c0:	080034cf 	.word	0x080034cf
 80034c4:	080034db 	.word	0x080034db
 80034c8:	2301      	movs	r3, #1
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	e151      	b.n	8003772 <UART_SetConfig+0x34e>
 80034ce:	2302      	movs	r3, #2
 80034d0:	77fb      	strb	r3, [r7, #31]
 80034d2:	e14e      	b.n	8003772 <UART_SetConfig+0x34e>
 80034d4:	2304      	movs	r3, #4
 80034d6:	77fb      	strb	r3, [r7, #31]
 80034d8:	e14b      	b.n	8003772 <UART_SetConfig+0x34e>
 80034da:	2308      	movs	r3, #8
 80034dc:	77fb      	strb	r3, [r7, #31]
 80034de:	e148      	b.n	8003772 <UART_SetConfig+0x34e>
 80034e0:	2310      	movs	r3, #16
 80034e2:	77fb      	strb	r3, [r7, #31]
 80034e4:	bf00      	nop
 80034e6:	e144      	b.n	8003772 <UART_SetConfig+0x34e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a8d      	ldr	r2, [pc, #564]	; (8003724 <UART_SetConfig+0x300>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d134      	bne.n	800355c <UART_SetConfig+0x138>
 80034f2:	4b8b      	ldr	r3, [pc, #556]	; (8003720 <UART_SetConfig+0x2fc>)
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b0c      	cmp	r3, #12
 80034fe:	d829      	bhi.n	8003554 <UART_SetConfig+0x130>
 8003500:	a201      	add	r2, pc, #4	; (adr r2, 8003508 <UART_SetConfig+0xe4>)
 8003502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003506:	bf00      	nop
 8003508:	0800353d 	.word	0x0800353d
 800350c:	08003555 	.word	0x08003555
 8003510:	08003555 	.word	0x08003555
 8003514:	08003555 	.word	0x08003555
 8003518:	08003549 	.word	0x08003549
 800351c:	08003555 	.word	0x08003555
 8003520:	08003555 	.word	0x08003555
 8003524:	08003555 	.word	0x08003555
 8003528:	08003543 	.word	0x08003543
 800352c:	08003555 	.word	0x08003555
 8003530:	08003555 	.word	0x08003555
 8003534:	08003555 	.word	0x08003555
 8003538:	0800354f 	.word	0x0800354f
 800353c:	2300      	movs	r3, #0
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e117      	b.n	8003772 <UART_SetConfig+0x34e>
 8003542:	2302      	movs	r3, #2
 8003544:	77fb      	strb	r3, [r7, #31]
 8003546:	e114      	b.n	8003772 <UART_SetConfig+0x34e>
 8003548:	2304      	movs	r3, #4
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e111      	b.n	8003772 <UART_SetConfig+0x34e>
 800354e:	2308      	movs	r3, #8
 8003550:	77fb      	strb	r3, [r7, #31]
 8003552:	e10e      	b.n	8003772 <UART_SetConfig+0x34e>
 8003554:	2310      	movs	r3, #16
 8003556:	77fb      	strb	r3, [r7, #31]
 8003558:	bf00      	nop
 800355a:	e10a      	b.n	8003772 <UART_SetConfig+0x34e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a71      	ldr	r2, [pc, #452]	; (8003728 <UART_SetConfig+0x304>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d120      	bne.n	80035a8 <UART_SetConfig+0x184>
 8003566:	4b6e      	ldr	r3, [pc, #440]	; (8003720 <UART_SetConfig+0x2fc>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003570:	2b10      	cmp	r3, #16
 8003572:	d00f      	beq.n	8003594 <UART_SetConfig+0x170>
 8003574:	2b10      	cmp	r3, #16
 8003576:	d802      	bhi.n	800357e <UART_SetConfig+0x15a>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <UART_SetConfig+0x164>
 800357c:	e010      	b.n	80035a0 <UART_SetConfig+0x17c>
 800357e:	2b20      	cmp	r3, #32
 8003580:	d005      	beq.n	800358e <UART_SetConfig+0x16a>
 8003582:	2b30      	cmp	r3, #48	; 0x30
 8003584:	d009      	beq.n	800359a <UART_SetConfig+0x176>
 8003586:	e00b      	b.n	80035a0 <UART_SetConfig+0x17c>
 8003588:	2300      	movs	r3, #0
 800358a:	77fb      	strb	r3, [r7, #31]
 800358c:	e0f1      	b.n	8003772 <UART_SetConfig+0x34e>
 800358e:	2302      	movs	r3, #2
 8003590:	77fb      	strb	r3, [r7, #31]
 8003592:	e0ee      	b.n	8003772 <UART_SetConfig+0x34e>
 8003594:	2304      	movs	r3, #4
 8003596:	77fb      	strb	r3, [r7, #31]
 8003598:	e0eb      	b.n	8003772 <UART_SetConfig+0x34e>
 800359a:	2308      	movs	r3, #8
 800359c:	77fb      	strb	r3, [r7, #31]
 800359e:	e0e8      	b.n	8003772 <UART_SetConfig+0x34e>
 80035a0:	2310      	movs	r3, #16
 80035a2:	77fb      	strb	r3, [r7, #31]
 80035a4:	bf00      	nop
 80035a6:	e0e4      	b.n	8003772 <UART_SetConfig+0x34e>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a5f      	ldr	r2, [pc, #380]	; (800372c <UART_SetConfig+0x308>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d120      	bne.n	80035f4 <UART_SetConfig+0x1d0>
 80035b2:	4b5b      	ldr	r3, [pc, #364]	; (8003720 <UART_SetConfig+0x2fc>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035bc:	2b40      	cmp	r3, #64	; 0x40
 80035be:	d00f      	beq.n	80035e0 <UART_SetConfig+0x1bc>
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	d802      	bhi.n	80035ca <UART_SetConfig+0x1a6>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <UART_SetConfig+0x1b0>
 80035c8:	e010      	b.n	80035ec <UART_SetConfig+0x1c8>
 80035ca:	2b80      	cmp	r3, #128	; 0x80
 80035cc:	d005      	beq.n	80035da <UART_SetConfig+0x1b6>
 80035ce:	2bc0      	cmp	r3, #192	; 0xc0
 80035d0:	d009      	beq.n	80035e6 <UART_SetConfig+0x1c2>
 80035d2:	e00b      	b.n	80035ec <UART_SetConfig+0x1c8>
 80035d4:	2300      	movs	r3, #0
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	e0cb      	b.n	8003772 <UART_SetConfig+0x34e>
 80035da:	2302      	movs	r3, #2
 80035dc:	77fb      	strb	r3, [r7, #31]
 80035de:	e0c8      	b.n	8003772 <UART_SetConfig+0x34e>
 80035e0:	2304      	movs	r3, #4
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	e0c5      	b.n	8003772 <UART_SetConfig+0x34e>
 80035e6:	2308      	movs	r3, #8
 80035e8:	77fb      	strb	r3, [r7, #31]
 80035ea:	e0c2      	b.n	8003772 <UART_SetConfig+0x34e>
 80035ec:	2310      	movs	r3, #16
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	bf00      	nop
 80035f2:	e0be      	b.n	8003772 <UART_SetConfig+0x34e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a4d      	ldr	r2, [pc, #308]	; (8003730 <UART_SetConfig+0x30c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d124      	bne.n	8003648 <UART_SetConfig+0x224>
 80035fe:	4b48      	ldr	r3, [pc, #288]	; (8003720 <UART_SetConfig+0x2fc>)
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360c:	d012      	beq.n	8003634 <UART_SetConfig+0x210>
 800360e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003612:	d802      	bhi.n	800361a <UART_SetConfig+0x1f6>
 8003614:	2b00      	cmp	r3, #0
 8003616:	d007      	beq.n	8003628 <UART_SetConfig+0x204>
 8003618:	e012      	b.n	8003640 <UART_SetConfig+0x21c>
 800361a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800361e:	d006      	beq.n	800362e <UART_SetConfig+0x20a>
 8003620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003624:	d009      	beq.n	800363a <UART_SetConfig+0x216>
 8003626:	e00b      	b.n	8003640 <UART_SetConfig+0x21c>
 8003628:	2300      	movs	r3, #0
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e0a1      	b.n	8003772 <UART_SetConfig+0x34e>
 800362e:	2302      	movs	r3, #2
 8003630:	77fb      	strb	r3, [r7, #31]
 8003632:	e09e      	b.n	8003772 <UART_SetConfig+0x34e>
 8003634:	2304      	movs	r3, #4
 8003636:	77fb      	strb	r3, [r7, #31]
 8003638:	e09b      	b.n	8003772 <UART_SetConfig+0x34e>
 800363a:	2308      	movs	r3, #8
 800363c:	77fb      	strb	r3, [r7, #31]
 800363e:	e098      	b.n	8003772 <UART_SetConfig+0x34e>
 8003640:	2310      	movs	r3, #16
 8003642:	77fb      	strb	r3, [r7, #31]
 8003644:	bf00      	nop
 8003646:	e094      	b.n	8003772 <UART_SetConfig+0x34e>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a39      	ldr	r2, [pc, #228]	; (8003734 <UART_SetConfig+0x310>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d124      	bne.n	800369c <UART_SetConfig+0x278>
 8003652:	4b33      	ldr	r3, [pc, #204]	; (8003720 <UART_SetConfig+0x2fc>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003658:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800365c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003660:	d012      	beq.n	8003688 <UART_SetConfig+0x264>
 8003662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003666:	d802      	bhi.n	800366e <UART_SetConfig+0x24a>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <UART_SetConfig+0x258>
 800366c:	e012      	b.n	8003694 <UART_SetConfig+0x270>
 800366e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003672:	d006      	beq.n	8003682 <UART_SetConfig+0x25e>
 8003674:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003678:	d009      	beq.n	800368e <UART_SetConfig+0x26a>
 800367a:	e00b      	b.n	8003694 <UART_SetConfig+0x270>
 800367c:	2301      	movs	r3, #1
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e077      	b.n	8003772 <UART_SetConfig+0x34e>
 8003682:	2302      	movs	r3, #2
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	e074      	b.n	8003772 <UART_SetConfig+0x34e>
 8003688:	2304      	movs	r3, #4
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e071      	b.n	8003772 <UART_SetConfig+0x34e>
 800368e:	2308      	movs	r3, #8
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	e06e      	b.n	8003772 <UART_SetConfig+0x34e>
 8003694:	2310      	movs	r3, #16
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	bf00      	nop
 800369a:	e06a      	b.n	8003772 <UART_SetConfig+0x34e>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a25      	ldr	r2, [pc, #148]	; (8003738 <UART_SetConfig+0x314>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d124      	bne.n	80036f0 <UART_SetConfig+0x2cc>
 80036a6:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <UART_SetConfig+0x2fc>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ac:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80036b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b4:	d012      	beq.n	80036dc <UART_SetConfig+0x2b8>
 80036b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ba:	d802      	bhi.n	80036c2 <UART_SetConfig+0x29e>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <UART_SetConfig+0x2ac>
 80036c0:	e012      	b.n	80036e8 <UART_SetConfig+0x2c4>
 80036c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c6:	d006      	beq.n	80036d6 <UART_SetConfig+0x2b2>
 80036c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036cc:	d009      	beq.n	80036e2 <UART_SetConfig+0x2be>
 80036ce:	e00b      	b.n	80036e8 <UART_SetConfig+0x2c4>
 80036d0:	2300      	movs	r3, #0
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e04d      	b.n	8003772 <UART_SetConfig+0x34e>
 80036d6:	2302      	movs	r3, #2
 80036d8:	77fb      	strb	r3, [r7, #31]
 80036da:	e04a      	b.n	8003772 <UART_SetConfig+0x34e>
 80036dc:	2304      	movs	r3, #4
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e047      	b.n	8003772 <UART_SetConfig+0x34e>
 80036e2:	2308      	movs	r3, #8
 80036e4:	77fb      	strb	r3, [r7, #31]
 80036e6:	e044      	b.n	8003772 <UART_SetConfig+0x34e>
 80036e8:	2310      	movs	r3, #16
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	bf00      	nop
 80036ee:	e040      	b.n	8003772 <UART_SetConfig+0x34e>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a11      	ldr	r2, [pc, #68]	; (800373c <UART_SetConfig+0x318>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d139      	bne.n	800376e <UART_SetConfig+0x34a>
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <UART_SetConfig+0x2fc>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003708:	d027      	beq.n	800375a <UART_SetConfig+0x336>
 800370a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800370e:	d817      	bhi.n	8003740 <UART_SetConfig+0x31c>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01c      	beq.n	800374e <UART_SetConfig+0x32a>
 8003714:	e027      	b.n	8003766 <UART_SetConfig+0x342>
 8003716:	bf00      	nop
 8003718:	efff69f3 	.word	0xefff69f3
 800371c:	40011000 	.word	0x40011000
 8003720:	40023800 	.word	0x40023800
 8003724:	40004400 	.word	0x40004400
 8003728:	40004800 	.word	0x40004800
 800372c:	40004c00 	.word	0x40004c00
 8003730:	40005000 	.word	0x40005000
 8003734:	40011400 	.word	0x40011400
 8003738:	40007800 	.word	0x40007800
 800373c:	40007c00 	.word	0x40007c00
 8003740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003744:	d006      	beq.n	8003754 <UART_SetConfig+0x330>
 8003746:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800374a:	d009      	beq.n	8003760 <UART_SetConfig+0x33c>
 800374c:	e00b      	b.n	8003766 <UART_SetConfig+0x342>
 800374e:	2300      	movs	r3, #0
 8003750:	77fb      	strb	r3, [r7, #31]
 8003752:	e00e      	b.n	8003772 <UART_SetConfig+0x34e>
 8003754:	2302      	movs	r3, #2
 8003756:	77fb      	strb	r3, [r7, #31]
 8003758:	e00b      	b.n	8003772 <UART_SetConfig+0x34e>
 800375a:	2304      	movs	r3, #4
 800375c:	77fb      	strb	r3, [r7, #31]
 800375e:	e008      	b.n	8003772 <UART_SetConfig+0x34e>
 8003760:	2308      	movs	r3, #8
 8003762:	77fb      	strb	r3, [r7, #31]
 8003764:	e005      	b.n	8003772 <UART_SetConfig+0x34e>
 8003766:	2310      	movs	r3, #16
 8003768:	77fb      	strb	r3, [r7, #31]
 800376a:	bf00      	nop
 800376c:	e001      	b.n	8003772 <UART_SetConfig+0x34e>
 800376e:	2310      	movs	r3, #16
 8003770:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800377a:	d17f      	bne.n	800387c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800377c:	7ffb      	ldrb	r3, [r7, #31]
 800377e:	2b08      	cmp	r3, #8
 8003780:	d85c      	bhi.n	800383c <UART_SetConfig+0x418>
 8003782:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <UART_SetConfig+0x364>)
 8003784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003788:	080037ad 	.word	0x080037ad
 800378c:	080037cd 	.word	0x080037cd
 8003790:	080037ed 	.word	0x080037ed
 8003794:	0800383d 	.word	0x0800383d
 8003798:	08003805 	.word	0x08003805
 800379c:	0800383d 	.word	0x0800383d
 80037a0:	0800383d 	.word	0x0800383d
 80037a4:	0800383d 	.word	0x0800383d
 80037a8:	08003825 	.word	0x08003825
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ac:	f7fe fde0 	bl	8002370 <HAL_RCC_GetPCLK1Freq>
 80037b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	005a      	lsls	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	441a      	add	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	61bb      	str	r3, [r7, #24]
        break;
 80037ca:	e03a      	b.n	8003842 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037cc:	f7fe fde4 	bl	8002398 <HAL_RCC_GetPCLK2Freq>
 80037d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	005a      	lsls	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	441a      	add	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	61bb      	str	r3, [r7, #24]
        break;
 80037ea:	e02a      	b.n	8003842 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	085a      	lsrs	r2, r3, #1
 80037f2:	4b5f      	ldr	r3, [pc, #380]	; (8003970 <UART_SetConfig+0x54c>)
 80037f4:	4413      	add	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6852      	ldr	r2, [r2, #4]
 80037fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80037fe:	b29b      	uxth	r3, r3
 8003800:	61bb      	str	r3, [r7, #24]
        break;
 8003802:	e01e      	b.n	8003842 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003804:	f7fe fcd0 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8003808:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	005a      	lsls	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	441a      	add	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	b29b      	uxth	r3, r3
 8003820:	61bb      	str	r3, [r7, #24]
        break;
 8003822:	e00e      	b.n	8003842 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	fbb2 f3f3 	udiv	r3, r2, r3
 8003836:	b29b      	uxth	r3, r3
 8003838:	61bb      	str	r3, [r7, #24]
        break;
 800383a:	e002      	b.n	8003842 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	75fb      	strb	r3, [r7, #23]
        break;
 8003840:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b0f      	cmp	r3, #15
 8003846:	d916      	bls.n	8003876 <UART_SetConfig+0x452>
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384e:	d212      	bcs.n	8003876 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	b29b      	uxth	r3, r3
 8003854:	f023 030f 	bic.w	r3, r3, #15
 8003858:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	b29b      	uxth	r3, r3
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	b29a      	uxth	r2, r3
 8003866:	897b      	ldrh	r3, [r7, #10]
 8003868:	4313      	orrs	r3, r2
 800386a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	897a      	ldrh	r2, [r7, #10]
 8003872:	60da      	str	r2, [r3, #12]
 8003874:	e070      	b.n	8003958 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	75fb      	strb	r3, [r7, #23]
 800387a:	e06d      	b.n	8003958 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800387c:	7ffb      	ldrb	r3, [r7, #31]
 800387e:	2b08      	cmp	r3, #8
 8003880:	d859      	bhi.n	8003936 <UART_SetConfig+0x512>
 8003882:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <UART_SetConfig+0x464>)
 8003884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003888:	080038ad 	.word	0x080038ad
 800388c:	080038cb 	.word	0x080038cb
 8003890:	080038e9 	.word	0x080038e9
 8003894:	08003937 	.word	0x08003937
 8003898:	08003901 	.word	0x08003901
 800389c:	08003937 	.word	0x08003937
 80038a0:	08003937 	.word	0x08003937
 80038a4:	08003937 	.word	0x08003937
 80038a8:	0800391f 	.word	0x0800391f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ac:	f7fe fd60 	bl	8002370 <HAL_RCC_GetPCLK1Freq>
 80038b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	085a      	lsrs	r2, r3, #1
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	441a      	add	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	61bb      	str	r3, [r7, #24]
        break;
 80038c8:	e038      	b.n	800393c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038ca:	f7fe fd65 	bl	8002398 <HAL_RCC_GetPCLK2Freq>
 80038ce:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	085a      	lsrs	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	441a      	add	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	61bb      	str	r3, [r7, #24]
        break;
 80038e6:	e029      	b.n	800393c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	085a      	lsrs	r2, r3, #1
 80038ee:	4b21      	ldr	r3, [pc, #132]	; (8003974 <UART_SetConfig+0x550>)
 80038f0:	4413      	add	r3, r2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6852      	ldr	r2, [r2, #4]
 80038f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	61bb      	str	r3, [r7, #24]
        break;
 80038fe:	e01d      	b.n	800393c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003900:	f7fe fc52 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8003904:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	085a      	lsrs	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	441a      	add	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	fbb2 f3f3 	udiv	r3, r2, r3
 8003918:	b29b      	uxth	r3, r3
 800391a:	61bb      	str	r3, [r7, #24]
        break;
 800391c:	e00e      	b.n	800393c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	b29b      	uxth	r3, r3
 8003932:	61bb      	str	r3, [r7, #24]
        break;
 8003934:	e002      	b.n	800393c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	75fb      	strb	r3, [r7, #23]
        break;
 800393a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b0f      	cmp	r3, #15
 8003940:	d908      	bls.n	8003954 <UART_SetConfig+0x530>
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003948:	d204      	bcs.n	8003954 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	e001      	b.n	8003958 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003964:	7dfb      	ldrb	r3, [r7, #23]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	01e84800 	.word	0x01e84800
 8003974:	00f42400 	.word	0x00f42400

08003978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01a      	beq.n	8003a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a76:	d10a      	bne.n	8003a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	605a      	str	r2, [r3, #4]
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003aca:	f7fd fbb1 	bl	8001230 <HAL_GetTick>
 8003ace:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d10e      	bne.n	8003afc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ade:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f814 	bl	8003b1a <UART_WaitOnFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e00a      	b.n	8003b12 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	603b      	str	r3, [r7, #0]
 8003b26:	4613      	mov	r3, r2
 8003b28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2a:	e05d      	b.n	8003be8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d059      	beq.n	8003be8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b34:	f7fd fb7c 	bl	8001230 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d302      	bcc.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d11b      	bne.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0201 	bic.w	r2, r2, #1
 8003b68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e042      	b.n	8003c08 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d02b      	beq.n	8003be8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b9e:	d123      	bne.n	8003be8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ba8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bb8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e00f      	b.n	8003c08 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69da      	ldr	r2, [r3, #28]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d092      	beq.n	8003b2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c10:	b084      	sub	sp, #16
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	f107 001c 	add.w	r0, r7, #28
 8003c1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d120      	bne.n	8003c6a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <USB_CoreInit+0xac>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d105      	bne.n	8003c5e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fa52 	bl	8004108 <USB_CoreReset>
 8003c64:	4603      	mov	r3, r0
 8003c66:	73fb      	strb	r3, [r7, #15]
 8003c68:	e010      	b.n	8003c8c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fa46 	bl	8004108 <USB_CoreReset>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d10b      	bne.n	8003caa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f043 0206 	orr.w	r2, r3, #6
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f043 0220 	orr.w	r2, r3, #32
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cb6:	b004      	add	sp, #16
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	ffbdffbf 	.word	0xffbdffbf

08003cc0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f023 0201 	bic.w	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d106      	bne.n	8003d0e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	60da      	str	r2, [r3, #12]
 8003d0c:	e00b      	b.n	8003d26 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	60da      	str	r2, [r3, #12]
 8003d20:	e001      	b.n	8003d26 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e003      	b.n	8003d2e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003d26:	2032      	movs	r0, #50	; 0x32
 8003d28:	f7fd fa8e 	bl	8001248 <HAL_Delay>

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d38:	b084      	sub	sp, #16
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b086      	sub	sp, #24
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d52:	2300      	movs	r3, #0
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	e009      	b.n	8003d6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	3340      	adds	r3, #64	; 0x40
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	2200      	movs	r2, #0
 8003d64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b0e      	cmp	r3, #14
 8003d70:	d9f2      	bls.n	8003d58 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d11c      	bne.n	8003db2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d86:	f043 0302 	orr.w	r3, r3, #2
 8003d8a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	e005      	b.n	8003dbe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd8:	461a      	mov	r2, r3
 8003dda:	680b      	ldr	r3, [r1, #0]
 8003ddc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d10c      	bne.n	8003dfe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d104      	bne.n	8003df4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003dea:	2100      	movs	r1, #0
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f959 	bl	80040a4 <USB_SetDevSpeed>
 8003df2:	e018      	b.n	8003e26 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003df4:	2101      	movs	r1, #1
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f954 	bl	80040a4 <USB_SetDevSpeed>
 8003dfc:	e013      	b.n	8003e26 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d10c      	bne.n	8003e1e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f949 	bl	80040a4 <USB_SetDevSpeed>
 8003e12:	e008      	b.n	8003e26 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e14:	2101      	movs	r1, #1
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f944 	bl	80040a4 <USB_SetDevSpeed>
 8003e1c:	e003      	b.n	8003e26 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e1e:	2103      	movs	r1, #3
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f93f 	bl	80040a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e26:	2110      	movs	r1, #16
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f8f3 	bl	8004014 <USB_FlushTxFifo>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f911 	bl	8004060 <USB_FlushRxFifo>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4e:	461a      	mov	r2, r3
 8003e50:	2300      	movs	r3, #0
 8003e52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e66:	461a      	mov	r2, r3
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	e043      	b.n	8003efa <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e88:	d118      	bne.n	8003ebc <USB_DevInit+0x184>
    {
      if (i == 0U)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10a      	bne.n	8003ea6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	e013      	b.n	8003ece <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	e008      	b.n	8003ece <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2300      	movs	r3, #0
 8003ecc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eda:	461a      	mov	r2, r3
 8003edc:	2300      	movs	r3, #0
 8003ede:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eec:	461a      	mov	r2, r3
 8003eee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ef2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d3b7      	bcc.n	8003e72 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	e043      	b.n	8003f90 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f1e:	d118      	bne.n	8003f52 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f32:	461a      	mov	r2, r3
 8003f34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e013      	b.n	8003f64 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	e008      	b.n	8003f64 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5e:	461a      	mov	r2, r3
 8003f60:	2300      	movs	r3, #0
 8003f62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f70:	461a      	mov	r2, r3
 8003f72:	2300      	movs	r3, #0
 8003f74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f82:	461a      	mov	r2, r3
 8003f84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d3b7      	bcc.n	8003f08 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003faa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003fb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d105      	bne.n	8003fcc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f043 0210 	orr.w	r2, r3, #16
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699a      	ldr	r2, [r3, #24]
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	; (800400c <USB_DevInit+0x2d4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f043 0208 	orr.w	r2, r3, #8
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d105      	bne.n	8003ffc <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	4b06      	ldr	r3, [pc, #24]	; (8004010 <USB_DevInit+0x2d8>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004008:	b004      	add	sp, #16
 800400a:	4770      	bx	lr
 800400c:	803c3800 	.word	0x803c3800
 8004010:	40000004 	.word	0x40000004

08004014 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	019b      	lsls	r3, r3, #6
 8004026:	f043 0220 	orr.w	r2, r3, #32
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3301      	adds	r3, #1
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4a09      	ldr	r2, [pc, #36]	; (800405c <USB_FlushTxFifo+0x48>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d901      	bls.n	8004040 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e006      	b.n	800404e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b20      	cmp	r3, #32
 800404a:	d0f0      	beq.n	800402e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	00030d40 	.word	0x00030d40

08004060 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2210      	movs	r2, #16
 8004070:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3301      	adds	r3, #1
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <USB_FlushRxFifo+0x40>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e006      	b.n	8004092 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	2b10      	cmp	r3, #16
 800408e:	d0f0      	beq.n	8004072 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	00030d40 	.word	0x00030d40

080040a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	68f9      	ldr	r1, [r7, #12]
 80040c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040c4:	4313      	orrs	r3, r2
 80040c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040f0:	f043 0302 	orr.w	r3, r3, #2
 80040f4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80040f6:	2003      	movs	r0, #3
 80040f8:	f7fd f8a6 	bl	8001248 <HAL_Delay>

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3301      	adds	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4a13      	ldr	r2, [pc, #76]	; (800416c <USB_CoreReset+0x64>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e01b      	b.n	800415e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	daf2      	bge.n	8004114 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f043 0201 	orr.w	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3301      	adds	r3, #1
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4a09      	ldr	r2, [pc, #36]	; (800416c <USB_CoreReset+0x64>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e006      	b.n	800415e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b01      	cmp	r3, #1
 800415a:	d0f0      	beq.n	800413e <USB_CoreReset+0x36>

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	00030d40 	.word	0x00030d40

08004170 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004186:	f3ef 8305 	mrs	r3, IPSR
 800418a:	60bb      	str	r3, [r7, #8]
  return(result);
 800418c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10f      	bne.n	80041b2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004192:	f3ef 8310 	mrs	r3, PRIMASK
 8004196:	607b      	str	r3, [r7, #4]
  return(result);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d105      	bne.n	80041aa <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800419e:	f3ef 8311 	mrs	r3, BASEPRI
 80041a2:	603b      	str	r3, [r7, #0]
  return(result);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <osKernelInitialize+0x3a>
 80041aa:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <osKernelInitialize+0x64>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d103      	bne.n	80041ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80041b2:	f06f 0305 	mvn.w	r3, #5
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	e00c      	b.n	80041d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80041ba:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <osKernelInitialize+0x64>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d105      	bne.n	80041ce <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80041c2:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <osKernelInitialize+0x64>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e002      	b.n	80041d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80041d4:	68fb      	ldr	r3, [r7, #12]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	2000009c 	.word	0x2000009c

080041e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041ee:	f3ef 8305 	mrs	r3, IPSR
 80041f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80041f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10f      	bne.n	800421a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041fa:	f3ef 8310 	mrs	r3, PRIMASK
 80041fe:	607b      	str	r3, [r7, #4]
  return(result);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d105      	bne.n	8004212 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004206:	f3ef 8311 	mrs	r3, BASEPRI
 800420a:	603b      	str	r3, [r7, #0]
  return(result);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d007      	beq.n	8004222 <osKernelStart+0x3a>
 8004212:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <osKernelStart+0x68>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d103      	bne.n	8004222 <osKernelStart+0x3a>
    stat = osErrorISR;
 800421a:	f06f 0305 	mvn.w	r3, #5
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e010      	b.n	8004244 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004222:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <osKernelStart+0x68>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d109      	bne.n	800423e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800422a:	f7ff ffa1 	bl	8004170 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800422e:	4b08      	ldr	r3, [pc, #32]	; (8004250 <osKernelStart+0x68>)
 8004230:	2202      	movs	r2, #2
 8004232:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004234:	f001 fb68 	bl	8005908 <vTaskStartScheduler>
      stat = osOK;
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	e002      	b.n	8004244 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800423e:	f04f 33ff 	mov.w	r3, #4294967295
 8004242:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004244:	68fb      	ldr	r3, [r7, #12]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	2000009c 	.word	0x2000009c

08004254 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004254:	b580      	push	{r7, lr}
 8004256:	b090      	sub	sp, #64	; 0x40
 8004258:	af04      	add	r7, sp, #16
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004260:	2300      	movs	r3, #0
 8004262:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004264:	f3ef 8305 	mrs	r3, IPSR
 8004268:	61fb      	str	r3, [r7, #28]
  return(result);
 800426a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800426c:	2b00      	cmp	r3, #0
 800426e:	f040 808f 	bne.w	8004390 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004272:	f3ef 8310 	mrs	r3, PRIMASK
 8004276:	61bb      	str	r3, [r7, #24]
  return(result);
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d105      	bne.n	800428a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800427e:	f3ef 8311 	mrs	r3, BASEPRI
 8004282:	617b      	str	r3, [r7, #20]
  return(result);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <osThreadNew+0x3e>
 800428a:	4b44      	ldr	r3, [pc, #272]	; (800439c <osThreadNew+0x148>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d07e      	beq.n	8004390 <osThreadNew+0x13c>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d07b      	beq.n	8004390 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004298:	2380      	movs	r3, #128	; 0x80
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800429c:	2318      	movs	r3, #24
 800429e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80042a4:	f04f 33ff 	mov.w	r3, #4294967295
 80042a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d045      	beq.n	800433c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <osThreadNew+0x6a>
        name = attr->name;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d008      	beq.n	80042e4 <osThreadNew+0x90>
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	2b38      	cmp	r3, #56	; 0x38
 80042d6:	d805      	bhi.n	80042e4 <osThreadNew+0x90>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <osThreadNew+0x94>
        return (NULL);
 80042e4:	2300      	movs	r3, #0
 80042e6:	e054      	b.n	8004392 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	089b      	lsrs	r3, r3, #2
 80042f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00e      	beq.n	800431e <osThreadNew+0xca>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	2b5b      	cmp	r3, #91	; 0x5b
 8004306:	d90a      	bls.n	800431e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800430c:	2b00      	cmp	r3, #0
 800430e:	d006      	beq.n	800431e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <osThreadNew+0xca>
        mem = 1;
 8004318:	2301      	movs	r3, #1
 800431a:	623b      	str	r3, [r7, #32]
 800431c:	e010      	b.n	8004340 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10c      	bne.n	8004340 <osThreadNew+0xec>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d108      	bne.n	8004340 <osThreadNew+0xec>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d104      	bne.n	8004340 <osThreadNew+0xec>
          mem = 0;
 8004336:	2300      	movs	r3, #0
 8004338:	623b      	str	r3, [r7, #32]
 800433a:	e001      	b.n	8004340 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d110      	bne.n	8004368 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800434e:	9202      	str	r2, [sp, #8]
 8004350:	9301      	str	r3, [sp, #4]
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800435a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f001 f907 	bl	8005570 <xTaskCreateStatic>
 8004362:	4603      	mov	r3, r0
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	e013      	b.n	8004390 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d110      	bne.n	8004390 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	b29a      	uxth	r2, r3
 8004372:	f107 0310 	add.w	r3, r7, #16
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f001 f955 	bl	8005630 <xTaskCreate>
 8004386:	4603      	mov	r3, r0
 8004388:	2b01      	cmp	r3, #1
 800438a:	d001      	beq.n	8004390 <osThreadNew+0x13c>
          hTask = NULL;
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004390:	693b      	ldr	r3, [r7, #16]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3730      	adds	r7, #48	; 0x30
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	2000009c 	.word	0x2000009c

080043a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043a8:	f3ef 8305 	mrs	r3, IPSR
 80043ac:	613b      	str	r3, [r7, #16]
  return(result);
 80043ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10f      	bne.n	80043d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043b4:	f3ef 8310 	mrs	r3, PRIMASK
 80043b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d105      	bne.n	80043cc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043c0:	f3ef 8311 	mrs	r3, BASEPRI
 80043c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d007      	beq.n	80043dc <osDelay+0x3c>
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <osDelay+0x58>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d103      	bne.n	80043dc <osDelay+0x3c>
    stat = osErrorISR;
 80043d4:	f06f 0305 	mvn.w	r3, #5
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	e007      	b.n	80043ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <osDelay+0x4c>
      vTaskDelay(ticks);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f001 fa58 	bl	800589c <vTaskDelay>
    }
  }

  return (stat);
 80043ec:	697b      	ldr	r3, [r7, #20]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2000009c 	.word	0x2000009c

080043fc <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f002 fb69 	bl	8006adc <pvTimerGetTimerID>
 800440a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <TimerCallback+0x22>
    callb->func (callb->arg);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	6852      	ldr	r2, [r2, #4]
 800441a:	4610      	mov	r0, r2
 800441c:	4798      	blx	r3
  }
}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b08e      	sub	sp, #56	; 0x38
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	607a      	str	r2, [r7, #4]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	460b      	mov	r3, r1
 8004436:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004438:	2300      	movs	r3, #0
 800443a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800443c:	f3ef 8305 	mrs	r3, IPSR
 8004440:	61bb      	str	r3, [r7, #24]
  return(result);
 8004442:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8004444:	2b00      	cmp	r3, #0
 8004446:	d16a      	bne.n	800451e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004448:	f3ef 8310 	mrs	r3, PRIMASK
 800444c:	617b      	str	r3, [r7, #20]
  return(result);
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d105      	bne.n	8004460 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004454:	f3ef 8311 	mrs	r3, BASEPRI
 8004458:	613b      	str	r3, [r7, #16]
  return(result);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <osTimerNew+0x40>
 8004460:	4b31      	ldr	r3, [pc, #196]	; (8004528 <osTimerNew+0x100>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d05a      	beq.n	800451e <osTimerNew+0xf6>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d057      	beq.n	800451e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800446e:	2008      	movs	r0, #8
 8004470:	f002 fd84 	bl	8006f7c <pvPortMalloc>
 8004474:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d050      	beq.n	800451e <osTimerNew+0xf6>
      callb->func = func;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004488:	7afb      	ldrb	r3, [r7, #11]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d102      	bne.n	8004494 <osTimerNew+0x6c>
        reload = pdFALSE;
 800448e:	2300      	movs	r3, #0
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
 8004492:	e001      	b.n	8004498 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8004494:	2301      	movs	r3, #1
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8004498:	f04f 33ff 	mov.w	r3, #4294967295
 800449c:	623b      	str	r3, [r7, #32]
      name = NULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01c      	beq.n	80044e2 <osTimerNew+0xba>
        if (attr->name != NULL) {
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <osTimerNew+0x8e>
          name = attr->name;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d006      	beq.n	80044cc <osTimerNew+0xa4>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	2b2b      	cmp	r3, #43	; 0x2b
 80044c4:	d902      	bls.n	80044cc <osTimerNew+0xa4>
          mem = 1;
 80044c6:	2301      	movs	r3, #1
 80044c8:	623b      	str	r3, [r7, #32]
 80044ca:	e00c      	b.n	80044e6 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d108      	bne.n	80044e6 <osTimerNew+0xbe>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d104      	bne.n	80044e6 <osTimerNew+0xbe>
            mem = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	623b      	str	r3, [r7, #32]
 80044e0:	e001      	b.n	80044e6 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 80044e2:	2300      	movs	r3, #0
 80044e4:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d10c      	bne.n	8004506 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	4b0e      	ldr	r3, [pc, #56]	; (800452c <osTimerNew+0x104>)
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fa:	2101      	movs	r1, #1
 80044fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044fe:	f001 ff66 	bl	80063ce <xTimerCreateStatic>
 8004502:	62b8      	str	r0, [r7, #40]	; 0x28
 8004504:	e00b      	b.n	800451e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d108      	bne.n	800451e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800450c:	4b07      	ldr	r3, [pc, #28]	; (800452c <osTimerNew+0x104>)
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004514:	2101      	movs	r1, #1
 8004516:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004518:	f001 ff38 	bl	800638c <xTimerCreate>
 800451c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004520:	4618      	mov	r0, r3
 8004522:	3730      	adds	r7, #48	; 0x30
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	2000009c 	.word	0x2000009c
 800452c:	080043fd 	.word	0x080043fd

08004530 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	; 0x28
 8004534:	af02      	add	r7, sp, #8
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800453e:	f3ef 8305 	mrs	r3, IPSR
 8004542:	617b      	str	r3, [r7, #20]
  return(result);
 8004544:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10f      	bne.n	800456a <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800454a:	f3ef 8310 	mrs	r3, PRIMASK
 800454e:	613b      	str	r3, [r7, #16]
  return(result);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d105      	bne.n	8004562 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004556:	f3ef 8311 	mrs	r3, BASEPRI
 800455a:	60fb      	str	r3, [r7, #12]
  return(result);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <osTimerStart+0x42>
 8004562:	4b12      	ldr	r3, [pc, #72]	; (80045ac <osTimerStart+0x7c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d103      	bne.n	8004572 <osTimerStart+0x42>
    stat = osErrorISR;
 800456a:	f06f 0305 	mvn.w	r3, #5
 800456e:	61fb      	str	r3, [r7, #28]
 8004570:	e017      	b.n	80045a2 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d103      	bne.n	8004580 <osTimerStart+0x50>
    stat = osErrorParameter;
 8004578:	f06f 0303 	mvn.w	r3, #3
 800457c:	61fb      	str	r3, [r7, #28]
 800457e:	e010      	b.n	80045a2 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8004580:	2300      	movs	r3, #0
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	2300      	movs	r3, #0
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	2104      	movs	r1, #4
 800458a:	69b8      	ldr	r0, [r7, #24]
 800458c:	f001 ff9c 	bl	80064c8 <xTimerGenericCommand>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d102      	bne.n	800459c <osTimerStart+0x6c>
      stat = osOK;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
 800459a:	e002      	b.n	80045a2 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800459c:	f06f 0302 	mvn.w	r3, #2
 80045a0:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80045a2:	69fb      	ldr	r3, [r7, #28]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	2000009c 	.word	0x2000009c

080045b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08c      	sub	sp, #48	; 0x30
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045c0:	f3ef 8305 	mrs	r3, IPSR
 80045c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80045c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d170      	bne.n	80046ae <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045cc:	f3ef 8310 	mrs	r3, PRIMASK
 80045d0:	617b      	str	r3, [r7, #20]
  return(result);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d105      	bne.n	80045e4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045d8:	f3ef 8311 	mrs	r3, BASEPRI
 80045dc:	613b      	str	r3, [r7, #16]
  return(result);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <osMessageQueueNew+0x3c>
 80045e4:	4b34      	ldr	r3, [pc, #208]	; (80046b8 <osMessageQueueNew+0x108>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d060      	beq.n	80046ae <osMessageQueueNew+0xfe>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d05d      	beq.n	80046ae <osMessageQueueNew+0xfe>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d05a      	beq.n	80046ae <osMessageQueueNew+0xfe>
    mem = -1;
 80045f8:	f04f 33ff 	mov.w	r3, #4294967295
 80045fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d029      	beq.n	8004658 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d012      	beq.n	8004632 <osMessageQueueNew+0x82>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b4f      	cmp	r3, #79	; 0x4f
 8004612:	d90e      	bls.n	8004632 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	429a      	cmp	r2, r3
 800462a:	d302      	bcc.n	8004632 <osMessageQueueNew+0x82>
        mem = 1;
 800462c:	2301      	movs	r3, #1
 800462e:	623b      	str	r3, [r7, #32]
 8004630:	e014      	b.n	800465c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d110      	bne.n	800465c <osMessageQueueNew+0xac>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10c      	bne.n	800465c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004646:	2b00      	cmp	r3, #0
 8004648:	d108      	bne.n	800465c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <osMessageQueueNew+0xac>
          mem = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	623b      	str	r3, [r7, #32]
 8004656:	e001      	b.n	800465c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d10c      	bne.n	800467c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6899      	ldr	r1, [r3, #8]
 800466a:	2300      	movs	r3, #0
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	460b      	mov	r3, r1
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fa4c 	bl	8004b10 <xQueueGenericCreateStatic>
 8004678:	6278      	str	r0, [r7, #36]	; 0x24
 800467a:	e008      	b.n	800468e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d105      	bne.n	800468e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004682:	2200      	movs	r2, #0
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fabf 	bl	8004c0a <xQueueGenericCreate>
 800468c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00c      	beq.n	80046ae <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <osMessageQueueNew+0xf2>
        name = attr->name;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	e001      	b.n	80046a6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80046a6:	69f9      	ldr	r1, [r7, #28]
 80046a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046aa:	f000 ff05 	bl	80054b8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3728      	adds	r7, #40	; 0x28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	2000009c 	.word	0x2000009c

080046bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08a      	sub	sp, #40	; 0x28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	4613      	mov	r3, r2
 80046ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046d4:	f3ef 8305 	mrs	r3, IPSR
 80046d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80046da:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10f      	bne.n	8004700 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e0:	f3ef 8310 	mrs	r3, PRIMASK
 80046e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d105      	bne.n	80046f8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046ec:	f3ef 8311 	mrs	r3, BASEPRI
 80046f0:	617b      	str	r3, [r7, #20]
  return(result);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d02c      	beq.n	8004752 <osMessageQueuePut+0x96>
 80046f8:	4b28      	ldr	r3, [pc, #160]	; (800479c <osMessageQueuePut+0xe0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d128      	bne.n	8004752 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <osMessageQueuePut+0x56>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <osMessageQueuePut+0x56>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004712:	f06f 0303 	mvn.w	r3, #3
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004718:	e039      	b.n	800478e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800471a:	2300      	movs	r3, #0
 800471c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800471e:	f107 0210 	add.w	r2, r7, #16
 8004722:	2300      	movs	r3, #0
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	6a38      	ldr	r0, [r7, #32]
 8004728:	f000 fbbe 	bl	8004ea8 <xQueueGenericSendFromISR>
 800472c:	4603      	mov	r3, r0
 800472e:	2b01      	cmp	r3, #1
 8004730:	d003      	beq.n	800473a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004732:	f06f 0302 	mvn.w	r3, #2
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004738:	e029      	b.n	800478e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d026      	beq.n	800478e <osMessageQueuePut+0xd2>
 8004740:	4b17      	ldr	r3, [pc, #92]	; (80047a0 <osMessageQueuePut+0xe4>)
 8004742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004750:	e01d      	b.n	800478e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <osMessageQueuePut+0xa2>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d103      	bne.n	8004766 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800475e:	f06f 0303 	mvn.w	r3, #3
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
 8004764:	e014      	b.n	8004790 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004766:	2300      	movs	r3, #0
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	6a38      	ldr	r0, [r7, #32]
 800476e:	f000 fab1 	bl	8004cd4 <xQueueGenericSend>
 8004772:	4603      	mov	r3, r0
 8004774:	2b01      	cmp	r3, #1
 8004776:	d00b      	beq.n	8004790 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800477e:	f06f 0301 	mvn.w	r3, #1
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
 8004784:	e004      	b.n	8004790 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004786:	f06f 0302 	mvn.w	r3, #2
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
 800478c:	e000      	b.n	8004790 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800478e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004792:	4618      	mov	r0, r3
 8004794:	3728      	adds	r7, #40	; 0x28
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	2000009c 	.word	0x2000009c
 80047a0:	e000ed04 	.word	0xe000ed04

080047a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08a      	sub	sp, #40	; 0x28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ba:	f3ef 8305 	mrs	r3, IPSR
 80047be:	61fb      	str	r3, [r7, #28]
  return(result);
 80047c0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10f      	bne.n	80047e6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c6:	f3ef 8310 	mrs	r3, PRIMASK
 80047ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d105      	bne.n	80047de <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047d2:	f3ef 8311 	mrs	r3, BASEPRI
 80047d6:	617b      	str	r3, [r7, #20]
  return(result);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d02c      	beq.n	8004838 <osMessageQueueGet+0x94>
 80047de:	4b28      	ldr	r3, [pc, #160]	; (8004880 <osMessageQueueGet+0xdc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d128      	bne.n	8004838 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <osMessageQueueGet+0x54>
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <osMessageQueueGet+0x54>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80047f8:	f06f 0303 	mvn.w	r3, #3
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80047fe:	e038      	b.n	8004872 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004800:	2300      	movs	r3, #0
 8004802:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004804:	f107 0310 	add.w	r3, r7, #16
 8004808:	461a      	mov	r2, r3
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	6a38      	ldr	r0, [r7, #32]
 800480e:	f000 fcbf 	bl	8005190 <xQueueReceiveFromISR>
 8004812:	4603      	mov	r3, r0
 8004814:	2b01      	cmp	r3, #1
 8004816:	d003      	beq.n	8004820 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004818:	f06f 0302 	mvn.w	r3, #2
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800481e:	e028      	b.n	8004872 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d025      	beq.n	8004872 <osMessageQueueGet+0xce>
 8004826:	4b17      	ldr	r3, [pc, #92]	; (8004884 <osMessageQueueGet+0xe0>)
 8004828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004836:	e01c      	b.n	8004872 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <osMessageQueueGet+0xa0>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d103      	bne.n	800484c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004844:	f06f 0303 	mvn.w	r3, #3
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
 800484a:	e013      	b.n	8004874 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	68b9      	ldr	r1, [r7, #8]
 8004850:	6a38      	ldr	r0, [r7, #32]
 8004852:	f000 fbc5 	bl	8004fe0 <xQueueReceive>
 8004856:	4603      	mov	r3, r0
 8004858:	2b01      	cmp	r3, #1
 800485a:	d00b      	beq.n	8004874 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004862:	f06f 0301 	mvn.w	r3, #1
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
 8004868:	e004      	b.n	8004874 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800486a:	f06f 0302 	mvn.w	r3, #2
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
 8004870:	e000      	b.n	8004874 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004872:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004876:	4618      	mov	r0, r3
 8004878:	3728      	adds	r7, #40	; 0x28
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	2000009c 	.word	0x2000009c
 8004884:	e000ed04 	.word	0xe000ed04

08004888 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4a07      	ldr	r2, [pc, #28]	; (80048b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004898:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4a06      	ldr	r2, [pc, #24]	; (80048b8 <vApplicationGetIdleTaskMemory+0x30>)
 800489e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2280      	movs	r2, #128	; 0x80
 80048a4:	601a      	str	r2, [r3, #0]
}
 80048a6:	bf00      	nop
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	200000a0 	.word	0x200000a0
 80048b8:	200000fc 	.word	0x200000fc

080048bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a07      	ldr	r2, [pc, #28]	; (80048e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80048cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	4a06      	ldr	r2, [pc, #24]	; (80048ec <vApplicationGetTimerTaskMemory+0x30>)
 80048d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048da:	601a      	str	r2, [r3, #0]
}
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	200002fc 	.word	0x200002fc
 80048ec:	20000358 	.word	0x20000358

080048f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f103 0208 	add.w	r2, r3, #8
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f04f 32ff 	mov.w	r2, #4294967295
 8004908:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f103 0208 	add.w	r2, r3, #8
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f103 0208 	add.w	r2, r3, #8
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800494a:	b480      	push	{r7}
 800494c:	b085      	sub	sp, #20
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	601a      	str	r2, [r3, #0]
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004992:	b480      	push	{r7}
 8004994:	b085      	sub	sp, #20
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a8:	d103      	bne.n	80049b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e00c      	b.n	80049cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3308      	adds	r3, #8
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	e002      	b.n	80049c0 <vListInsert+0x2e>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d2f6      	bcs.n	80049ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	601a      	str	r2, [r3, #0]
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6892      	ldr	r2, [r2, #8]
 8004a1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6852      	ldr	r2, [r2, #4]
 8004a24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d103      	bne.n	8004a38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	1e5a      	subs	r2, r3, #1
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10b      	bne.n	8004a84 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	b672      	cpsid	i
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	b662      	cpsie	i
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	e7fe      	b.n	8004a82 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8004a84:	f002 f958 	bl	8006d38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a90:	68f9      	ldr	r1, [r7, #12]
 8004a92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a94:	fb01 f303 	mul.w	r3, r1, r3
 8004a98:	441a      	add	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	68f9      	ldr	r1, [r7, #12]
 8004ab8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004aba:	fb01 f303 	mul.w	r3, r1, r3
 8004abe:	441a      	add	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	22ff      	movs	r2, #255	; 0xff
 8004ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	22ff      	movs	r2, #255	; 0xff
 8004ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d109      	bne.n	8004aee <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00f      	beq.n	8004b02 <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3310      	adds	r3, #16
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 f96c 	bl	8005dc4 <xTaskRemoveFromEventList>
 8004aec:	e009      	b.n	8004b02 <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	3310      	adds	r3, #16
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fefc 	bl	80048f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3324      	adds	r3, #36	; 0x24
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fef7 	bl	80048f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b02:	f002 f94b 	bl	8006d9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b06:	2301      	movs	r3, #1
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08e      	sub	sp, #56	; 0x38
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10b      	bne.n	8004b3c <xQueueGenericCreateStatic+0x2c>
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	b672      	cpsid	i
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	b662      	cpsie	i
 8004b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b3a:	e7fe      	b.n	8004b3a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10b      	bne.n	8004b5a <xQueueGenericCreateStatic+0x4a>
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	b672      	cpsid	i
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	b662      	cpsie	i
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
 8004b58:	e7fe      	b.n	8004b58 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <xQueueGenericCreateStatic+0x56>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <xQueueGenericCreateStatic+0x5a>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <xQueueGenericCreateStatic+0x5c>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10b      	bne.n	8004b88 <xQueueGenericCreateStatic+0x78>
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	b672      	cpsid	i
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	b662      	cpsie	i
 8004b84:	623b      	str	r3, [r7, #32]
 8004b86:	e7fe      	b.n	8004b86 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d102      	bne.n	8004b94 <xQueueGenericCreateStatic+0x84>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <xQueueGenericCreateStatic+0x88>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <xQueueGenericCreateStatic+0x8a>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10b      	bne.n	8004bb6 <xQueueGenericCreateStatic+0xa6>
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	b672      	cpsid	i
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	b662      	cpsie	i
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	e7fe      	b.n	8004bb4 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bb6:	2350      	movs	r3, #80	; 0x50
 8004bb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b50      	cmp	r3, #80	; 0x50
 8004bbe:	d00b      	beq.n	8004bd8 <xQueueGenericCreateStatic+0xc8>
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	b672      	cpsid	i
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	b662      	cpsie	i
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	e7fe      	b.n	8004bd6 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004bd8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00d      	beq.n	8004c00 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	68b9      	ldr	r1, [r7, #8]
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f846 	bl	8004c8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3730      	adds	r7, #48	; 0x30
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b08a      	sub	sp, #40	; 0x28
 8004c0e:	af02      	add	r7, sp, #8
 8004c10:	60f8      	str	r0, [r7, #12]
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	4613      	mov	r3, r2
 8004c16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10b      	bne.n	8004c36 <xQueueGenericCreate+0x2c>
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	b672      	cpsid	i
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	b662      	cpsie	i
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	e7fe      	b.n	8004c34 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d102      	bne.n	8004c42 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e004      	b.n	8004c4c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	fb02 f303 	mul.w	r3, r2, r3
 8004c4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	3350      	adds	r3, #80	; 0x50
 8004c50:	4618      	mov	r0, r3
 8004c52:	f002 f993 	bl	8006f7c <pvPortMalloc>
 8004c56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d011      	beq.n	8004c82 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	3350      	adds	r3, #80	; 0x50
 8004c66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c70:	79fa      	ldrb	r2, [r7, #7]
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	4613      	mov	r3, r2
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f805 	bl	8004c8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c82:	69bb      	ldr	r3, [r7, #24]
	}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3720      	adds	r7, #32
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d103      	bne.n	8004ca8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e002      	b.n	8004cae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cba:	2101      	movs	r1, #1
 8004cbc:	69b8      	ldr	r0, [r7, #24]
 8004cbe:	f7ff fecb 	bl	8004a58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	78fa      	ldrb	r2, [r7, #3]
 8004cc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08e      	sub	sp, #56	; 0x38
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10b      	bne.n	8004d08 <xQueueGenericSend+0x34>
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	b672      	cpsid	i
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	b662      	cpsie	i
 8004d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d06:	e7fe      	b.n	8004d06 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d103      	bne.n	8004d16 <xQueueGenericSend+0x42>
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <xQueueGenericSend+0x46>
 8004d16:	2301      	movs	r3, #1
 8004d18:	e000      	b.n	8004d1c <xQueueGenericSend+0x48>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10b      	bne.n	8004d38 <xQueueGenericSend+0x64>
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	b672      	cpsid	i
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	b662      	cpsie	i
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
 8004d36:	e7fe      	b.n	8004d36 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d103      	bne.n	8004d46 <xQueueGenericSend+0x72>
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <xQueueGenericSend+0x76>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <xQueueGenericSend+0x78>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10b      	bne.n	8004d68 <xQueueGenericSend+0x94>
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	b672      	cpsid	i
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	b662      	cpsie	i
 8004d64:	623b      	str	r3, [r7, #32]
 8004d66:	e7fe      	b.n	8004d66 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d68:	f001 f9e4 	bl	8006134 <xTaskGetSchedulerState>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d102      	bne.n	8004d78 <xQueueGenericSend+0xa4>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <xQueueGenericSend+0xa8>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <xQueueGenericSend+0xaa>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10b      	bne.n	8004d9a <xQueueGenericSend+0xc6>
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	b672      	cpsid	i
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	b662      	cpsie	i
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	e7fe      	b.n	8004d98 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d9a:	f001 ffcd 	bl	8006d38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d302      	bcc.n	8004db0 <xQueueGenericSend+0xdc>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d112      	bne.n	8004dd6 <xQueueGenericSend+0x102>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004db6:	f000 fa6e 	bl	8005296 <prvCopyDataToQueue>
 8004dba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d004      	beq.n	8004dce <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc6:	3324      	adds	r3, #36	; 0x24
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fffb 	bl	8005dc4 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004dce:	f001 ffe5 	bl	8006d9c <vPortExitCritical>
				return pdPASS;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e062      	b.n	8004e9c <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d103      	bne.n	8004de4 <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ddc:	f001 ffde 	bl	8006d9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	e05b      	b.n	8004e9c <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dea:	f107 0314 	add.w	r3, r7, #20
 8004dee:	4618      	mov	r0, r3
 8004df0:	f001 f84c 	bl	8005e8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004df4:	2301      	movs	r3, #1
 8004df6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004df8:	f001 ffd0 	bl	8006d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dfc:	f000 fdec 	bl	80059d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e00:	f001 ff9a 	bl	8006d38 <vPortEnterCritical>
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e0a:	b25b      	sxtb	r3, r3
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e10:	d103      	bne.n	8004e1a <xQueueGenericSend+0x146>
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e20:	b25b      	sxtb	r3, r3
 8004e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e26:	d103      	bne.n	8004e30 <xQueueGenericSend+0x15c>
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e30:	f001 ffb4 	bl	8006d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e34:	1d3a      	adds	r2, r7, #4
 8004e36:	f107 0314 	add.w	r3, r7, #20
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f001 f83b 	bl	8005eb8 <xTaskCheckForTimeOut>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d123      	bne.n	8004e90 <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e4a:	f000 fb1c 	bl	8005486 <prvIsQueueFull>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d017      	beq.n	8004e84 <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	3310      	adds	r3, #16
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 ff5f 	bl	8005d20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e64:	f000 faa7 	bl	80053b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e68:	f000 fdc4 	bl	80059f4 <xTaskResumeAll>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d193      	bne.n	8004d9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004e72:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <xQueueGenericSend+0x1d0>)
 8004e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	e78a      	b.n	8004d9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e86:	f000 fa96 	bl	80053b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e8a:	f000 fdb3 	bl	80059f4 <xTaskResumeAll>
 8004e8e:	e784      	b.n	8004d9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e92:	f000 fa90 	bl	80053b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e96:	f000 fdad 	bl	80059f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3738      	adds	r7, #56	; 0x38
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	e000ed04 	.word	0xe000ed04

08004ea8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08e      	sub	sp, #56	; 0x38
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10b      	bne.n	8004ed8 <xQueueGenericSendFromISR+0x30>
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	b672      	cpsid	i
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	b662      	cpsie	i
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed6:	e7fe      	b.n	8004ed6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <xQueueGenericSendFromISR+0x3e>
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <xQueueGenericSendFromISR+0x42>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <xQueueGenericSendFromISR+0x44>
 8004eea:	2300      	movs	r3, #0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10b      	bne.n	8004f08 <xQueueGenericSendFromISR+0x60>
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	b672      	cpsid	i
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	b662      	cpsie	i
 8004f04:	623b      	str	r3, [r7, #32]
 8004f06:	e7fe      	b.n	8004f06 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d103      	bne.n	8004f16 <xQueueGenericSendFromISR+0x6e>
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <xQueueGenericSendFromISR+0x72>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <xQueueGenericSendFromISR+0x74>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10b      	bne.n	8004f38 <xQueueGenericSendFromISR+0x90>
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	b672      	cpsid	i
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	b662      	cpsie	i
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	e7fe      	b.n	8004f36 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f38:	f001 ffde 	bl	8006ef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f3c:	f3ef 8211 	mrs	r2, BASEPRI
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	b672      	cpsid	i
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	b662      	cpsie	i
 8004f54:	61ba      	str	r2, [r7, #24]
 8004f56:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f58:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d302      	bcc.n	8004f6e <xQueueGenericSendFromISR+0xc6>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d12c      	bne.n	8004fc8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f7e:	f000 f98a 	bl	8005296 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f82:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8a:	d112      	bne.n	8004fb2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d016      	beq.n	8004fc2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	3324      	adds	r3, #36	; 0x24
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 ff13 	bl	8005dc4 <xTaskRemoveFromEventList>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00e      	beq.n	8004fc2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	e007      	b.n	8004fc2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	b25a      	sxtb	r2, r3
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004fc6:	e001      	b.n	8004fcc <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	637b      	str	r3, [r7, #52]	; 0x34
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3738      	adds	r7, #56	; 0x38
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08c      	sub	sp, #48	; 0x30
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fec:	2300      	movs	r3, #0
 8004fee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10b      	bne.n	8005012 <xQueueReceive+0x32>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	b672      	cpsid	i
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	b662      	cpsie	i
 800500e:	623b      	str	r3, [r7, #32]
 8005010:	e7fe      	b.n	8005010 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d103      	bne.n	8005020 <xQueueReceive+0x40>
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <xQueueReceive+0x44>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <xQueueReceive+0x46>
 8005024:	2300      	movs	r3, #0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10b      	bne.n	8005042 <xQueueReceive+0x62>
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	b672      	cpsid	i
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	b662      	cpsie	i
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	e7fe      	b.n	8005040 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005042:	f001 f877 	bl	8006134 <xTaskGetSchedulerState>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d102      	bne.n	8005052 <xQueueReceive+0x72>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <xQueueReceive+0x76>
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <xQueueReceive+0x78>
 8005056:	2300      	movs	r3, #0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10b      	bne.n	8005074 <xQueueReceive+0x94>
 800505c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005060:	b672      	cpsid	i
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	b662      	cpsie	i
 8005070:	61bb      	str	r3, [r7, #24]
 8005072:	e7fe      	b.n	8005072 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005074:	f001 fe60 	bl	8006d38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	2b00      	cmp	r3, #0
 8005082:	d014      	beq.n	80050ae <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005088:	f000 f96f 	bl	800536a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	1e5a      	subs	r2, r3, #1
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d004      	beq.n	80050a6 <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	3310      	adds	r3, #16
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fe8f 	bl	8005dc4 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050a6:	f001 fe79 	bl	8006d9c <vPortExitCritical>
				return pdPASS;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e069      	b.n	8005182 <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d103      	bne.n	80050bc <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050b4:	f001 fe72 	bl	8006d9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e062      	b.n	8005182 <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050c2:	f107 0310 	add.w	r3, r7, #16
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fee0 	bl	8005e8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050cc:	2301      	movs	r3, #1
 80050ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050d0:	f001 fe64 	bl	8006d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050d4:	f000 fc80 	bl	80059d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050d8:	f001 fe2e 	bl	8006d38 <vPortEnterCritical>
 80050dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050e2:	b25b      	sxtb	r3, r3
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d103      	bne.n	80050f2 <xQueueReceive+0x112>
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050f8:	b25b      	sxtb	r3, r3
 80050fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fe:	d103      	bne.n	8005108 <xQueueReceive+0x128>
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005108:	f001 fe48 	bl	8006d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800510c:	1d3a      	adds	r2, r7, #4
 800510e:	f107 0310 	add.w	r3, r7, #16
 8005112:	4611      	mov	r1, r2
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fecf 	bl	8005eb8 <xTaskCheckForTimeOut>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d123      	bne.n	8005168 <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005122:	f000 f99a 	bl	800545a <prvIsQueueEmpty>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d017      	beq.n	800515c <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	3324      	adds	r3, #36	; 0x24
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	4611      	mov	r1, r2
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fdf3 	bl	8005d20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800513a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800513c:	f000 f93b 	bl	80053b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005140:	f000 fc58 	bl	80059f4 <xTaskResumeAll>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d194      	bne.n	8005074 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800514a:	4b10      	ldr	r3, [pc, #64]	; (800518c <xQueueReceive+0x1ac>)
 800514c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	e78b      	b.n	8005074 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800515c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800515e:	f000 f92a 	bl	80053b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005162:	f000 fc47 	bl	80059f4 <xTaskResumeAll>
 8005166:	e785      	b.n	8005074 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800516a:	f000 f924 	bl	80053b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800516e:	f000 fc41 	bl	80059f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005174:	f000 f971 	bl	800545a <prvIsQueueEmpty>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	f43f af7a 	beq.w	8005074 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005180:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005182:	4618      	mov	r0, r3
 8005184:	3730      	adds	r7, #48	; 0x30
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	e000ed04 	.word	0xe000ed04

08005190 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08e      	sub	sp, #56	; 0x38
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10b      	bne.n	80051be <xQueueReceiveFromISR+0x2e>
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	b672      	cpsid	i
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	b662      	cpsie	i
 80051ba:	623b      	str	r3, [r7, #32]
 80051bc:	e7fe      	b.n	80051bc <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d103      	bne.n	80051cc <xQueueReceiveFromISR+0x3c>
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <xQueueReceiveFromISR+0x40>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e000      	b.n	80051d2 <xQueueReceiveFromISR+0x42>
 80051d0:	2300      	movs	r3, #0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10b      	bne.n	80051ee <xQueueReceiveFromISR+0x5e>
 80051d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051da:	b672      	cpsid	i
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	b662      	cpsie	i
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	e7fe      	b.n	80051ec <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051ee:	f001 fe83 	bl	8006ef8 <vPortValidateInterruptPriority>
	__asm volatile
 80051f2:	f3ef 8211 	mrs	r2, BASEPRI
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	b672      	cpsid	i
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	b662      	cpsie	i
 800520a:	61ba      	str	r2, [r7, #24]
 800520c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800520e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005210:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005216:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	2b00      	cmp	r3, #0
 800521c:	d02f      	beq.n	800527e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800522c:	f000 f89d 	bl	800536a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	1e5a      	subs	r2, r3, #1
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005238:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d112      	bne.n	8005268 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d016      	beq.n	8005278 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	3310      	adds	r3, #16
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fdb8 	bl	8005dc4 <xTaskRemoveFromEventList>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00e      	beq.n	8005278 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00b      	beq.n	8005278 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	e007      	b.n	8005278 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800526c:	3301      	adds	r3, #1
 800526e:	b2db      	uxtb	r3, r3
 8005270:	b25a      	sxtb	r2, r3
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005278:	2301      	movs	r3, #1
 800527a:	637b      	str	r3, [r7, #52]	; 0x34
 800527c:	e001      	b.n	8005282 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800527e:	2300      	movs	r3, #0
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
 8005282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005284:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800528c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800528e:	4618      	mov	r0, r3
 8005290:	3738      	adds	r7, #56	; 0x38
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b086      	sub	sp, #24
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10d      	bne.n	80052d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d14d      	bne.n	8005358 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 ff55 	bl	8006170 <xTaskPriorityDisinherit>
 80052c6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	609a      	str	r2, [r3, #8]
 80052ce:	e043      	b.n	8005358 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d119      	bne.n	800530a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6858      	ldr	r0, [r3, #4]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	461a      	mov	r2, r3
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	f002 f855 	bl	8007390 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	441a      	add	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d32b      	bcc.n	8005358 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	605a      	str	r2, [r3, #4]
 8005308:	e026      	b.n	8005358 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	68d8      	ldr	r0, [r3, #12]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	461a      	mov	r2, r3
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	f002 f83b 	bl	8007390 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	425b      	negs	r3, r3
 8005324:	441a      	add	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d207      	bcs.n	8005346 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	425b      	negs	r3, r3
 8005340:	441a      	add	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d105      	bne.n	8005358 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	3b01      	subs	r3, #1
 8005356:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005360:	697b      	ldr	r3, [r7, #20]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b082      	sub	sp, #8
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	2b00      	cmp	r3, #0
 800537a:	d018      	beq.n	80053ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005384:	441a      	add	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	429a      	cmp	r2, r3
 8005394:	d303      	bcc.n	800539e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68d9      	ldr	r1, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	461a      	mov	r2, r3
 80053a8:	6838      	ldr	r0, [r7, #0]
 80053aa:	f001 fff1 	bl	8007390 <memcpy>
	}
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80053be:	f001 fcbb 	bl	8006d38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053ca:	e011      	b.n	80053f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d012      	beq.n	80053fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3324      	adds	r3, #36	; 0x24
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fcf3 	bl	8005dc4 <xTaskRemoveFromEventList>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053e4:	f000 fdcc 	bl	8005f80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	dce9      	bgt.n	80053cc <prvUnlockQueue+0x16>
 80053f8:	e000      	b.n	80053fc <prvUnlockQueue+0x46>
					break;
 80053fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	22ff      	movs	r2, #255	; 0xff
 8005400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005404:	f001 fcca 	bl	8006d9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005408:	f001 fc96 	bl	8006d38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005412:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005414:	e011      	b.n	800543a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d012      	beq.n	8005444 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3310      	adds	r3, #16
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fcce 	bl	8005dc4 <xTaskRemoveFromEventList>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800542e:	f000 fda7 	bl	8005f80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005432:	7bbb      	ldrb	r3, [r7, #14]
 8005434:	3b01      	subs	r3, #1
 8005436:	b2db      	uxtb	r3, r3
 8005438:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800543a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800543e:	2b00      	cmp	r3, #0
 8005440:	dce9      	bgt.n	8005416 <prvUnlockQueue+0x60>
 8005442:	e000      	b.n	8005446 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005444:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	22ff      	movs	r2, #255	; 0xff
 800544a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800544e:	f001 fca5 	bl	8006d9c <vPortExitCritical>
}
 8005452:	bf00      	nop
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005462:	f001 fc69 	bl	8006d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	2b00      	cmp	r3, #0
 800546c:	d102      	bne.n	8005474 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800546e:	2301      	movs	r3, #1
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	e001      	b.n	8005478 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005478:	f001 fc90 	bl	8006d9c <vPortExitCritical>

	return xReturn;
 800547c:	68fb      	ldr	r3, [r7, #12]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800548e:	f001 fc53 	bl	8006d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549a:	429a      	cmp	r2, r3
 800549c:	d102      	bne.n	80054a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800549e:	2301      	movs	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e001      	b.n	80054a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054a8:	f001 fc78 	bl	8006d9c <vPortExitCritical>

	return xReturn;
 80054ac:	68fb      	ldr	r3, [r7, #12]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	e014      	b.n	80054f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80054c8:	4a0e      	ldr	r2, [pc, #56]	; (8005504 <vQueueAddToRegistry+0x4c>)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10b      	bne.n	80054ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054d4:	490b      	ldr	r1, [pc, #44]	; (8005504 <vQueueAddToRegistry+0x4c>)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80054de:	4a09      	ldr	r2, [pc, #36]	; (8005504 <vQueueAddToRegistry+0x4c>)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4413      	add	r3, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80054ea:	e005      	b.n	80054f8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3301      	adds	r3, #1
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b07      	cmp	r3, #7
 80054f6:	d9e7      	bls.n	80054c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80054f8:	bf00      	nop
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	20004e9c 	.word	0x20004e9c

08005508 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005518:	f001 fc0e 	bl	8006d38 <vPortEnterCritical>
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005522:	b25b      	sxtb	r3, r3
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005528:	d103      	bne.n	8005532 <vQueueWaitForMessageRestricted+0x2a>
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005538:	b25b      	sxtb	r3, r3
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553e:	d103      	bne.n	8005548 <vQueueWaitForMessageRestricted+0x40>
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005548:	f001 fc28 	bl	8006d9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	2b00      	cmp	r3, #0
 8005552:	d106      	bne.n	8005562 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	3324      	adds	r3, #36	; 0x24
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	4618      	mov	r0, r3
 800555e:	f000 fc05 	bl	8005d6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005562:	6978      	ldr	r0, [r7, #20]
 8005564:	f7ff ff27 	bl	80053b6 <prvUnlockQueue>
	}
 8005568:	bf00      	nop
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08e      	sub	sp, #56	; 0x38
 8005574:	af04      	add	r7, sp, #16
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800557e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10b      	bne.n	800559c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	b672      	cpsid	i
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	b662      	cpsie	i
 8005598:	623b      	str	r3, [r7, #32]
 800559a:	e7fe      	b.n	800559a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10b      	bne.n	80055ba <xTaskCreateStatic+0x4a>
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	b672      	cpsid	i
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	b662      	cpsie	i
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	e7fe      	b.n	80055b8 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055ba:	235c      	movs	r3, #92	; 0x5c
 80055bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	2b5c      	cmp	r3, #92	; 0x5c
 80055c2:	d00b      	beq.n	80055dc <xTaskCreateStatic+0x6c>
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	b672      	cpsid	i
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	b662      	cpsie	i
 80055d8:	61bb      	str	r3, [r7, #24]
 80055da:	e7fe      	b.n	80055da <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80055dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01e      	beq.n	8005622 <xTaskCreateStatic+0xb2>
 80055e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01b      	beq.n	8005622 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80055fc:	2300      	movs	r3, #0
 80055fe:	9303      	str	r3, [sp, #12]
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	9302      	str	r3, [sp, #8]
 8005604:	f107 0314 	add.w	r3, r7, #20
 8005608:	9301      	str	r3, [sp, #4]
 800560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f850 	bl	80056ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800561a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800561c:	f000 f8de 	bl	80057dc <prvAddNewTaskToReadyList>
 8005620:	e001      	b.n	8005626 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005626:	697b      	ldr	r3, [r7, #20]
	}
 8005628:	4618      	mov	r0, r3
 800562a:	3728      	adds	r7, #40	; 0x28
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08c      	sub	sp, #48	; 0x30
 8005634:	af04      	add	r7, sp, #16
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4618      	mov	r0, r3
 8005646:	f001 fc99 	bl	8006f7c <pvPortMalloc>
 800564a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00e      	beq.n	8005670 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005652:	205c      	movs	r0, #92	; 0x5c
 8005654:	f001 fc92 	bl	8006f7c <pvPortMalloc>
 8005658:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
 8005666:	e005      	b.n	8005674 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005668:	6978      	ldr	r0, [r7, #20]
 800566a:	f001 fd4f 	bl	800710c <vPortFree>
 800566e:	e001      	b.n	8005674 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005670:	2300      	movs	r3, #0
 8005672:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d017      	beq.n	80056aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005682:	88fa      	ldrh	r2, [r7, #6]
 8005684:	2300      	movs	r3, #0
 8005686:	9303      	str	r3, [sp, #12]
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	9302      	str	r3, [sp, #8]
 800568c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568e:	9301      	str	r3, [sp, #4]
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f80e 	bl	80056ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800569e:	69f8      	ldr	r0, [r7, #28]
 80056a0:	f000 f89c 	bl	80057dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056a4:	2301      	movs	r3, #1
 80056a6:	61bb      	str	r3, [r7, #24]
 80056a8:	e002      	b.n	80056b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056aa:	f04f 33ff 	mov.w	r3, #4294967295
 80056ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056b0:	69bb      	ldr	r3, [r7, #24]
	}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3720      	adds	r7, #32
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b088      	sub	sp, #32
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
 80056c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	461a      	mov	r2, r3
 80056d2:	21a5      	movs	r1, #165	; 0xa5
 80056d4:	f001 fe67 	bl	80073a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80056e2:	440b      	add	r3, r1
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	f023 0307 	bic.w	r3, r3, #7
 80056f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <prvInitialiseNewTask+0x5a>
 80056fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005700:	b672      	cpsid	i
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	b662      	cpsie	i
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	e7fe      	b.n	8005712 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d01f      	beq.n	800575a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800571a:	2300      	movs	r3, #0
 800571c:	61fb      	str	r3, [r7, #28]
 800571e:	e012      	b.n	8005746 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	7819      	ldrb	r1, [r3, #0]
 8005728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	4413      	add	r3, r2
 800572e:	3334      	adds	r3, #52	; 0x34
 8005730:	460a      	mov	r2, r1
 8005732:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	4413      	add	r3, r2
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d006      	beq.n	800574e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	3301      	adds	r3, #1
 8005744:	61fb      	str	r3, [r7, #28]
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	2b0f      	cmp	r3, #15
 800574a:	d9e9      	bls.n	8005720 <prvInitialiseNewTask+0x66>
 800574c:	e000      	b.n	8005750 <prvInitialiseNewTask+0x96>
			{
				break;
 800574e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005758:	e003      	b.n	8005762 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	2b37      	cmp	r3, #55	; 0x37
 8005766:	d901      	bls.n	800576c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005768:	2337      	movs	r3, #55	; 0x37
 800576a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005770:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005776:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	2200      	movs	r2, #0
 800577c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	3304      	adds	r3, #4
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff f8d4 	bl	8004930 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	3318      	adds	r3, #24
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff f8cf 	bl	8004930 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005796:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	2200      	movs	r2, #0
 80057ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	68f9      	ldr	r1, [r7, #12]
 80057ba:	69b8      	ldr	r0, [r7, #24]
 80057bc:	f001 f9b0 	bl	8006b20 <pxPortInitialiseStack>
 80057c0:	4602      	mov	r2, r0
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80057c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057d2:	bf00      	nop
 80057d4:	3720      	adds	r7, #32
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057e4:	f001 faa8 	bl	8006d38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80057e8:	4b26      	ldr	r3, [pc, #152]	; (8005884 <prvAddNewTaskToReadyList+0xa8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3301      	adds	r3, #1
 80057ee:	4a25      	ldr	r2, [pc, #148]	; (8005884 <prvAddNewTaskToReadyList+0xa8>)
 80057f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80057f2:	4b25      	ldr	r3, [pc, #148]	; (8005888 <prvAddNewTaskToReadyList+0xac>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d109      	bne.n	800580e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057fa:	4a23      	ldr	r2, [pc, #140]	; (8005888 <prvAddNewTaskToReadyList+0xac>)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005800:	4b20      	ldr	r3, [pc, #128]	; (8005884 <prvAddNewTaskToReadyList+0xa8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d110      	bne.n	800582a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005808:	f000 fbd8 	bl	8005fbc <prvInitialiseTaskLists>
 800580c:	e00d      	b.n	800582a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800580e:	4b1f      	ldr	r3, [pc, #124]	; (800588c <prvAddNewTaskToReadyList+0xb0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005816:	4b1c      	ldr	r3, [pc, #112]	; (8005888 <prvAddNewTaskToReadyList+0xac>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	429a      	cmp	r2, r3
 8005822:	d802      	bhi.n	800582a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005824:	4a18      	ldr	r2, [pc, #96]	; (8005888 <prvAddNewTaskToReadyList+0xac>)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800582a:	4b19      	ldr	r3, [pc, #100]	; (8005890 <prvAddNewTaskToReadyList+0xb4>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3301      	adds	r3, #1
 8005830:	4a17      	ldr	r2, [pc, #92]	; (8005890 <prvAddNewTaskToReadyList+0xb4>)
 8005832:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005834:	4b16      	ldr	r3, [pc, #88]	; (8005890 <prvAddNewTaskToReadyList+0xb4>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005840:	4b14      	ldr	r3, [pc, #80]	; (8005894 <prvAddNewTaskToReadyList+0xb8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d903      	bls.n	8005850 <prvAddNewTaskToReadyList+0x74>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	4a11      	ldr	r2, [pc, #68]	; (8005894 <prvAddNewTaskToReadyList+0xb8>)
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4a0e      	ldr	r2, [pc, #56]	; (8005898 <prvAddNewTaskToReadyList+0xbc>)
 800585e:	441a      	add	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3304      	adds	r3, #4
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f7ff f86f 	bl	800494a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800586c:	f001 fa96 	bl	8006d9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005870:	4b06      	ldr	r3, [pc, #24]	; (800588c <prvAddNewTaskToReadyList+0xb0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005878:	4b03      	ldr	r3, [pc, #12]	; (8005888 <prvAddNewTaskToReadyList+0xac>)
 800587a:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800587c:	bf00      	nop
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	20000c2c 	.word	0x20000c2c
 8005888:	20000758 	.word	0x20000758
 800588c:	20000c38 	.word	0x20000c38
 8005890:	20000c48 	.word	0x20000c48
 8005894:	20000c34 	.word	0x20000c34
 8005898:	2000075c 	.word	0x2000075c

0800589c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d018      	beq.n	80058e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80058ae:	4b14      	ldr	r3, [pc, #80]	; (8005900 <vTaskDelay+0x64>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00b      	beq.n	80058ce <vTaskDelay+0x32>
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	b672      	cpsid	i
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	b662      	cpsie	i
 80058ca:	60bb      	str	r3, [r7, #8]
 80058cc:	e7fe      	b.n	80058cc <vTaskDelay+0x30>
			vTaskSuspendAll();
 80058ce:	f000 f883 	bl	80059d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80058d2:	2100      	movs	r1, #0
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fcbb 	bl	8006250 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80058da:	f000 f88b 	bl	80059f4 <xTaskResumeAll>
 80058de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d107      	bne.n	80058f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80058e6:	4b07      	ldr	r3, [pc, #28]	; (8005904 <vTaskDelay+0x68>)
 80058e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058f6:	bf00      	nop
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000c54 	.word	0x20000c54
 8005904:	e000ed04 	.word	0xe000ed04

08005908 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	; 0x28
 800590c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800590e:	2300      	movs	r3, #0
 8005910:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005912:	2300      	movs	r3, #0
 8005914:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005916:	463a      	mov	r2, r7
 8005918:	1d39      	adds	r1, r7, #4
 800591a:	f107 0308 	add.w	r3, r7, #8
 800591e:	4618      	mov	r0, r3
 8005920:	f7fe ffb2 	bl	8004888 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005924:	6839      	ldr	r1, [r7, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	9202      	str	r2, [sp, #8]
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	2300      	movs	r3, #0
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	2300      	movs	r3, #0
 8005934:	460a      	mov	r2, r1
 8005936:	4922      	ldr	r1, [pc, #136]	; (80059c0 <vTaskStartScheduler+0xb8>)
 8005938:	4822      	ldr	r0, [pc, #136]	; (80059c4 <vTaskStartScheduler+0xbc>)
 800593a:	f7ff fe19 	bl	8005570 <xTaskCreateStatic>
 800593e:	4602      	mov	r2, r0
 8005940:	4b21      	ldr	r3, [pc, #132]	; (80059c8 <vTaskStartScheduler+0xc0>)
 8005942:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005944:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <vTaskStartScheduler+0xc0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800594c:	2301      	movs	r3, #1
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	e001      	b.n	8005956 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d102      	bne.n	8005962 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800595c:	f000 fccc 	bl	80062f8 <xTimerCreateTimerTask>
 8005960:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d117      	bne.n	8005998 <vTaskStartScheduler+0x90>
 8005968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596c:	b672      	cpsid	i
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	b662      	cpsie	i
 800597c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <vTaskStartScheduler+0xc4>)
 8005980:	f04f 32ff 	mov.w	r2, #4294967295
 8005984:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005986:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <vTaskStartScheduler+0xc8>)
 8005988:	2201      	movs	r2, #1
 800598a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800598c:	4b11      	ldr	r3, [pc, #68]	; (80059d4 <vTaskStartScheduler+0xcc>)
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005992:	f001 f955 	bl	8006c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005996:	e00f      	b.n	80059b8 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599e:	d10b      	bne.n	80059b8 <vTaskStartScheduler+0xb0>
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	b672      	cpsid	i
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	b662      	cpsie	i
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	e7fe      	b.n	80059b6 <vTaskStartScheduler+0xae>
}
 80059b8:	bf00      	nop
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	08007d0c 	.word	0x08007d0c
 80059c4:	08005f99 	.word	0x08005f99
 80059c8:	20000c50 	.word	0x20000c50
 80059cc:	20000c4c 	.word	0x20000c4c
 80059d0:	20000c38 	.word	0x20000c38
 80059d4:	20000c30 	.word	0x20000c30

080059d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80059dc:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <vTaskSuspendAll+0x18>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3301      	adds	r3, #1
 80059e2:	4a03      	ldr	r2, [pc, #12]	; (80059f0 <vTaskSuspendAll+0x18>)
 80059e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80059e6:	bf00      	nop
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	20000c54 	.word	0x20000c54

080059f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059fe:	2300      	movs	r3, #0
 8005a00:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a02:	4b3c      	ldr	r3, [pc, #240]	; (8005af4 <xTaskResumeAll+0x100>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10b      	bne.n	8005a22 <xTaskResumeAll+0x2e>
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	b672      	cpsid	i
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	b662      	cpsie	i
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	e7fe      	b.n	8005a20 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a22:	f001 f989 	bl	8006d38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a26:	4b33      	ldr	r3, [pc, #204]	; (8005af4 <xTaskResumeAll+0x100>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	4a31      	ldr	r2, [pc, #196]	; (8005af4 <xTaskResumeAll+0x100>)
 8005a2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a30:	4b30      	ldr	r3, [pc, #192]	; (8005af4 <xTaskResumeAll+0x100>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d156      	bne.n	8005ae6 <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a38:	4b2f      	ldr	r3, [pc, #188]	; (8005af8 <xTaskResumeAll+0x104>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d052      	beq.n	8005ae6 <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a40:	e02f      	b.n	8005aa2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a42:	4b2e      	ldr	r3, [pc, #184]	; (8005afc <xTaskResumeAll+0x108>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3318      	adds	r3, #24
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fe ffd8 	bl	8004a04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fe ffd3 	bl	8004a04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a62:	4b27      	ldr	r3, [pc, #156]	; (8005b00 <xTaskResumeAll+0x10c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d903      	bls.n	8005a72 <xTaskResumeAll+0x7e>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	4a24      	ldr	r2, [pc, #144]	; (8005b00 <xTaskResumeAll+0x10c>)
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4a21      	ldr	r2, [pc, #132]	; (8005b04 <xTaskResumeAll+0x110>)
 8005a80:	441a      	add	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3304      	adds	r3, #4
 8005a86:	4619      	mov	r1, r3
 8005a88:	4610      	mov	r0, r2
 8005a8a:	f7fe ff5e 	bl	800494a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a92:	4b1d      	ldr	r3, [pc, #116]	; (8005b08 <xTaskResumeAll+0x114>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d302      	bcc.n	8005aa2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005a9c:	4b1b      	ldr	r3, [pc, #108]	; (8005b0c <xTaskResumeAll+0x118>)
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005aa2:	4b16      	ldr	r3, [pc, #88]	; (8005afc <xTaskResumeAll+0x108>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1cb      	bne.n	8005a42 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ab0:	f000 fb20 	bl	80060f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ab4:	4b16      	ldr	r3, [pc, #88]	; (8005b10 <xTaskResumeAll+0x11c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d010      	beq.n	8005ae2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ac0:	f000 f838 	bl	8005b34 <xTaskIncrementTick>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005aca:	4b10      	ldr	r3, [pc, #64]	; (8005b0c <xTaskResumeAll+0x118>)
 8005acc:	2201      	movs	r2, #1
 8005ace:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1f1      	bne.n	8005ac0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005adc:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <xTaskResumeAll+0x11c>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ae2:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <xTaskResumeAll+0x118>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ae6:	f001 f959 	bl	8006d9c <vPortExitCritical>

	return xAlreadyYielded;
 8005aea:	687b      	ldr	r3, [r7, #4]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20000c54 	.word	0x20000c54
 8005af8:	20000c2c 	.word	0x20000c2c
 8005afc:	20000bec 	.word	0x20000bec
 8005b00:	20000c34 	.word	0x20000c34
 8005b04:	2000075c 	.word	0x2000075c
 8005b08:	20000758 	.word	0x20000758
 8005b0c:	20000c40 	.word	0x20000c40
 8005b10:	20000c3c 	.word	0x20000c3c

08005b14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b1a:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <xTaskGetTickCount+0x1c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b20:	687b      	ldr	r3, [r7, #4]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	20000c30 	.word	0x20000c30

08005b34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b3e:	4b40      	ldr	r3, [pc, #256]	; (8005c40 <xTaskIncrementTick+0x10c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d171      	bne.n	8005c2a <xTaskIncrementTick+0xf6>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b46:	4b3f      	ldr	r3, [pc, #252]	; (8005c44 <xTaskIncrementTick+0x110>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b4e:	4a3d      	ldr	r2, [pc, #244]	; (8005c44 <xTaskIncrementTick+0x110>)
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d121      	bne.n	8005b9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b5a:	4b3b      	ldr	r3, [pc, #236]	; (8005c48 <xTaskIncrementTick+0x114>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00b      	beq.n	8005b7c <xTaskIncrementTick+0x48>
 8005b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b68:	b672      	cpsid	i
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	b662      	cpsie	i
 8005b78:	603b      	str	r3, [r7, #0]
 8005b7a:	e7fe      	b.n	8005b7a <xTaskIncrementTick+0x46>
 8005b7c:	4b32      	ldr	r3, [pc, #200]	; (8005c48 <xTaskIncrementTick+0x114>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	4b32      	ldr	r3, [pc, #200]	; (8005c4c <xTaskIncrementTick+0x118>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a30      	ldr	r2, [pc, #192]	; (8005c48 <xTaskIncrementTick+0x114>)
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	4a30      	ldr	r2, [pc, #192]	; (8005c4c <xTaskIncrementTick+0x118>)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	4b2f      	ldr	r3, [pc, #188]	; (8005c50 <xTaskIncrementTick+0x11c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3301      	adds	r3, #1
 8005b96:	4a2e      	ldr	r2, [pc, #184]	; (8005c50 <xTaskIncrementTick+0x11c>)
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	f000 faab 	bl	80060f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b9e:	4b2d      	ldr	r3, [pc, #180]	; (8005c54 <xTaskIncrementTick+0x120>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d345      	bcc.n	8005c34 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ba8:	4b27      	ldr	r3, [pc, #156]	; (8005c48 <xTaskIncrementTick+0x114>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d104      	bne.n	8005bbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bb2:	4b28      	ldr	r3, [pc, #160]	; (8005c54 <xTaskIncrementTick+0x120>)
 8005bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb8:	601a      	str	r2, [r3, #0]
					break;
 8005bba:	e03b      	b.n	8005c34 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bbc:	4b22      	ldr	r3, [pc, #136]	; (8005c48 <xTaskIncrementTick+0x114>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d203      	bcs.n	8005bdc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005bd4:	4a1f      	ldr	r2, [pc, #124]	; (8005c54 <xTaskIncrementTick+0x120>)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005bda:	e02b      	b.n	8005c34 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	3304      	adds	r3, #4
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fe ff0f 	bl	8004a04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d004      	beq.n	8005bf8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	3318      	adds	r3, #24
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe ff06 	bl	8004a04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfc:	4b16      	ldr	r3, [pc, #88]	; (8005c58 <xTaskIncrementTick+0x124>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d903      	bls.n	8005c0c <xTaskIncrementTick+0xd8>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	4a13      	ldr	r2, [pc, #76]	; (8005c58 <xTaskIncrementTick+0x124>)
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4a10      	ldr	r2, [pc, #64]	; (8005c5c <xTaskIncrementTick+0x128>)
 8005c1a:	441a      	add	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	4619      	mov	r1, r3
 8005c22:	4610      	mov	r0, r2
 8005c24:	f7fe fe91 	bl	800494a <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c28:	e7be      	b.n	8005ba8 <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <xTaskIncrementTick+0x12c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	4a0b      	ldr	r2, [pc, #44]	; (8005c60 <xTaskIncrementTick+0x12c>)
 8005c32:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005c34:	697b      	ldr	r3, [r7, #20]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000c54 	.word	0x20000c54
 8005c44:	20000c30 	.word	0x20000c30
 8005c48:	20000be4 	.word	0x20000be4
 8005c4c:	20000be8 	.word	0x20000be8
 8005c50:	20000c44 	.word	0x20000c44
 8005c54:	20000c4c 	.word	0x20000c4c
 8005c58:	20000c34 	.word	0x20000c34
 8005c5c:	2000075c 	.word	0x2000075c
 8005c60:	20000c3c 	.word	0x20000c3c

08005c64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c6a:	4b28      	ldr	r3, [pc, #160]	; (8005d0c <vTaskSwitchContext+0xa8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c72:	4b27      	ldr	r3, [pc, #156]	; (8005d10 <vTaskSwitchContext+0xac>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c78:	e042      	b.n	8005d00 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005c7a:	4b25      	ldr	r3, [pc, #148]	; (8005d10 <vTaskSwitchContext+0xac>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c80:	4b24      	ldr	r3, [pc, #144]	; (8005d14 <vTaskSwitchContext+0xb0>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	e011      	b.n	8005cac <vTaskSwitchContext+0x48>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10b      	bne.n	8005ca6 <vTaskSwitchContext+0x42>
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	b672      	cpsid	i
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	b662      	cpsie	i
 8005ca2:	607b      	str	r3, [r7, #4]
 8005ca4:	e7fe      	b.n	8005ca4 <vTaskSwitchContext+0x40>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	491a      	ldr	r1, [pc, #104]	; (8005d18 <vTaskSwitchContext+0xb4>)
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	440b      	add	r3, r1
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0e3      	beq.n	8005c88 <vTaskSwitchContext+0x24>
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4a13      	ldr	r2, [pc, #76]	; (8005d18 <vTaskSwitchContext+0xb4>)
 8005ccc:	4413      	add	r3, r2
 8005cce:	60bb      	str	r3, [r7, #8]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	605a      	str	r2, [r3, #4]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d104      	bne.n	8005cf0 <vTaskSwitchContext+0x8c>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	605a      	str	r2, [r3, #4]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <vTaskSwitchContext+0xb8>)
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	4a06      	ldr	r2, [pc, #24]	; (8005d14 <vTaskSwitchContext+0xb0>)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6013      	str	r3, [r2, #0]
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	20000c54 	.word	0x20000c54
 8005d10:	20000c40 	.word	0x20000c40
 8005d14:	20000c34 	.word	0x20000c34
 8005d18:	2000075c 	.word	0x2000075c
 8005d1c:	20000758 	.word	0x20000758

08005d20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10b      	bne.n	8005d48 <vTaskPlaceOnEventList+0x28>
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	b672      	cpsid	i
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	b662      	cpsie	i
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	e7fe      	b.n	8005d46 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d48:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <vTaskPlaceOnEventList+0x48>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3318      	adds	r3, #24
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7fe fe1e 	bl	8004992 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d56:	2101      	movs	r1, #1
 8005d58:	6838      	ldr	r0, [r7, #0]
 8005d5a:	f000 fa79 	bl	8006250 <prvAddCurrentTaskToDelayedList>
}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000758 	.word	0x20000758

08005d6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10b      	bne.n	8005d96 <vTaskPlaceOnEventListRestricted+0x2a>
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	b672      	cpsid	i
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	b662      	cpsie	i
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	e7fe      	b.n	8005d94 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d96:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3318      	adds	r3, #24
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f7fe fdd3 	bl	800494a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005daa:	f04f 33ff 	mov.w	r3, #4294967295
 8005dae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005db0:	6879      	ldr	r1, [r7, #4]
 8005db2:	68b8      	ldr	r0, [r7, #8]
 8005db4:	f000 fa4c 	bl	8006250 <prvAddCurrentTaskToDelayedList>
	}
 8005db8:	bf00      	nop
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	20000758 	.word	0x20000758

08005dc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10b      	bne.n	8005df2 <xTaskRemoveFromEventList+0x2e>
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	b672      	cpsid	i
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	b662      	cpsie	i
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	e7fe      	b.n	8005df0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	3318      	adds	r3, #24
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe fe04 	bl	8004a04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dfc:	4b1d      	ldr	r3, [pc, #116]	; (8005e74 <xTaskRemoveFromEventList+0xb0>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d11d      	bne.n	8005e40 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fe fdfb 	bl	8004a04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e12:	4b19      	ldr	r3, [pc, #100]	; (8005e78 <xTaskRemoveFromEventList+0xb4>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d903      	bls.n	8005e22 <xTaskRemoveFromEventList+0x5e>
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	4a16      	ldr	r2, [pc, #88]	; (8005e78 <xTaskRemoveFromEventList+0xb4>)
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4a13      	ldr	r2, [pc, #76]	; (8005e7c <xTaskRemoveFromEventList+0xb8>)
 8005e30:	441a      	add	r2, r3
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	3304      	adds	r3, #4
 8005e36:	4619      	mov	r1, r3
 8005e38:	4610      	mov	r0, r2
 8005e3a:	f7fe fd86 	bl	800494a <vListInsertEnd>
 8005e3e:	e005      	b.n	8005e4c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	3318      	adds	r3, #24
 8005e44:	4619      	mov	r1, r3
 8005e46:	480e      	ldr	r0, [pc, #56]	; (8005e80 <xTaskRemoveFromEventList+0xbc>)
 8005e48:	f7fe fd7f 	bl	800494a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e50:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <xTaskRemoveFromEventList+0xc0>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d905      	bls.n	8005e66 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e5e:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <xTaskRemoveFromEventList+0xc4>)
 8005e60:	2201      	movs	r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	e001      	b.n	8005e6a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e6a:	697b      	ldr	r3, [r7, #20]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	20000c54 	.word	0x20000c54
 8005e78:	20000c34 	.word	0x20000c34
 8005e7c:	2000075c 	.word	0x2000075c
 8005e80:	20000bec 	.word	0x20000bec
 8005e84:	20000758 	.word	0x20000758
 8005e88:	20000c40 	.word	0x20000c40

08005e8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e94:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <vTaskInternalSetTimeOutState+0x24>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e9c:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <vTaskInternalSetTimeOutState+0x28>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	605a      	str	r2, [r3, #4]
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	20000c44 	.word	0x20000c44
 8005eb4:	20000c30 	.word	0x20000c30

08005eb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10b      	bne.n	8005ee0 <xTaskCheckForTimeOut+0x28>
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	b672      	cpsid	i
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	b662      	cpsie	i
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	e7fe      	b.n	8005ede <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10b      	bne.n	8005efe <xTaskCheckForTimeOut+0x46>
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	b672      	cpsid	i
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	b662      	cpsie	i
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	e7fe      	b.n	8005efc <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8005efe:	f000 ff1b 	bl	8006d38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f02:	4b1d      	ldr	r3, [pc, #116]	; (8005f78 <xTaskCheckForTimeOut+0xc0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1a:	d102      	bne.n	8005f22 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	e023      	b.n	8005f6a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	4b15      	ldr	r3, [pc, #84]	; (8005f7c <xTaskCheckForTimeOut+0xc4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d007      	beq.n	8005f3e <xTaskCheckForTimeOut+0x86>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d302      	bcc.n	8005f3e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	61fb      	str	r3, [r7, #28]
 8005f3c:	e015      	b.n	8005f6a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d20b      	bcs.n	8005f60 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	1ad2      	subs	r2, r2, r3
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff ff99 	bl	8005e8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61fb      	str	r3, [r7, #28]
 8005f5e:	e004      	b.n	8005f6a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f66:	2301      	movs	r3, #1
 8005f68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f6a:	f000 ff17 	bl	8006d9c <vPortExitCritical>

	return xReturn;
 8005f6e:	69fb      	ldr	r3, [r7, #28]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3720      	adds	r7, #32
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	20000c30 	.word	0x20000c30
 8005f7c:	20000c44 	.word	0x20000c44

08005f80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f84:	4b03      	ldr	r3, [pc, #12]	; (8005f94 <vTaskMissedYield+0x14>)
 8005f86:	2201      	movs	r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
}
 8005f8a:	bf00      	nop
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	20000c40 	.word	0x20000c40

08005f98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005fa0:	f000 f84c 	bl	800603c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8005fa4:	4b04      	ldr	r3, [pc, #16]	; (8005fb8 <prvIdleTask+0x20>)
 8005fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005fb4:	e7f4      	b.n	8005fa0 <prvIdleTask+0x8>
 8005fb6:	bf00      	nop
 8005fb8:	e000ed04 	.word	0xe000ed04

08005fbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	e00c      	b.n	8005fe2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4a12      	ldr	r2, [pc, #72]	; (800601c <prvInitialiseTaskLists+0x60>)
 8005fd4:	4413      	add	r3, r2
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fe fc8a 	bl	80048f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	607b      	str	r3, [r7, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b37      	cmp	r3, #55	; 0x37
 8005fe6:	d9ef      	bls.n	8005fc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fe8:	480d      	ldr	r0, [pc, #52]	; (8006020 <prvInitialiseTaskLists+0x64>)
 8005fea:	f7fe fc81 	bl	80048f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fee:	480d      	ldr	r0, [pc, #52]	; (8006024 <prvInitialiseTaskLists+0x68>)
 8005ff0:	f7fe fc7e 	bl	80048f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ff4:	480c      	ldr	r0, [pc, #48]	; (8006028 <prvInitialiseTaskLists+0x6c>)
 8005ff6:	f7fe fc7b 	bl	80048f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ffa:	480c      	ldr	r0, [pc, #48]	; (800602c <prvInitialiseTaskLists+0x70>)
 8005ffc:	f7fe fc78 	bl	80048f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006000:	480b      	ldr	r0, [pc, #44]	; (8006030 <prvInitialiseTaskLists+0x74>)
 8006002:	f7fe fc75 	bl	80048f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006006:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <prvInitialiseTaskLists+0x78>)
 8006008:	4a05      	ldr	r2, [pc, #20]	; (8006020 <prvInitialiseTaskLists+0x64>)
 800600a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <prvInitialiseTaskLists+0x7c>)
 800600e:	4a05      	ldr	r2, [pc, #20]	; (8006024 <prvInitialiseTaskLists+0x68>)
 8006010:	601a      	str	r2, [r3, #0]
}
 8006012:	bf00      	nop
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	2000075c 	.word	0x2000075c
 8006020:	20000bbc 	.word	0x20000bbc
 8006024:	20000bd0 	.word	0x20000bd0
 8006028:	20000bec 	.word	0x20000bec
 800602c:	20000c00 	.word	0x20000c00
 8006030:	20000c18 	.word	0x20000c18
 8006034:	20000be4 	.word	0x20000be4
 8006038:	20000be8 	.word	0x20000be8

0800603c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006042:	e019      	b.n	8006078 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006044:	f000 fe78 	bl	8006d38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006048:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <prvCheckTasksWaitingTermination+0x4c>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3304      	adds	r3, #4
 8006054:	4618      	mov	r0, r3
 8006056:	f7fe fcd5 	bl	8004a04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800605a:	4b0c      	ldr	r3, [pc, #48]	; (800608c <prvCheckTasksWaitingTermination+0x50>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3b01      	subs	r3, #1
 8006060:	4a0a      	ldr	r2, [pc, #40]	; (800608c <prvCheckTasksWaitingTermination+0x50>)
 8006062:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006064:	4b0a      	ldr	r3, [pc, #40]	; (8006090 <prvCheckTasksWaitingTermination+0x54>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3b01      	subs	r3, #1
 800606a:	4a09      	ldr	r2, [pc, #36]	; (8006090 <prvCheckTasksWaitingTermination+0x54>)
 800606c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800606e:	f000 fe95 	bl	8006d9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f80e 	bl	8006094 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006078:	4b05      	ldr	r3, [pc, #20]	; (8006090 <prvCheckTasksWaitingTermination+0x54>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1e1      	bne.n	8006044 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	20000c00 	.word	0x20000c00
 800608c:	20000c2c 	.word	0x20000c2c
 8006090:	20000c14 	.word	0x20000c14

08006094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d108      	bne.n	80060b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 f82e 	bl	800710c <vPortFree>
				vPortFree( pxTCB );
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 f82b 	bl	800710c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060b6:	e019      	b.n	80060ec <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d103      	bne.n	80060ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 f822 	bl	800710c <vPortFree>
	}
 80060c8:	e010      	b.n	80060ec <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d00b      	beq.n	80060ec <prvDeleteTCB+0x58>
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	b672      	cpsid	i
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	b662      	cpsie	i
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	e7fe      	b.n	80060ea <prvDeleteTCB+0x56>
	}
 80060ec:	bf00      	nop
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060fa:	4b0c      	ldr	r3, [pc, #48]	; (800612c <prvResetNextTaskUnblockTime+0x38>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d104      	bne.n	800610e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006104:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <prvResetNextTaskUnblockTime+0x3c>)
 8006106:	f04f 32ff 	mov.w	r2, #4294967295
 800610a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800610c:	e008      	b.n	8006120 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800610e:	4b07      	ldr	r3, [pc, #28]	; (800612c <prvResetNextTaskUnblockTime+0x38>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	4a04      	ldr	r2, [pc, #16]	; (8006130 <prvResetNextTaskUnblockTime+0x3c>)
 800611e:	6013      	str	r3, [r2, #0]
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	20000be4 	.word	0x20000be4
 8006130:	20000c4c 	.word	0x20000c4c

08006134 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800613a:	4b0b      	ldr	r3, [pc, #44]	; (8006168 <xTaskGetSchedulerState+0x34>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d102      	bne.n	8006148 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006142:	2301      	movs	r3, #1
 8006144:	607b      	str	r3, [r7, #4]
 8006146:	e008      	b.n	800615a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006148:	4b08      	ldr	r3, [pc, #32]	; (800616c <xTaskGetSchedulerState+0x38>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d102      	bne.n	8006156 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006150:	2302      	movs	r3, #2
 8006152:	607b      	str	r3, [r7, #4]
 8006154:	e001      	b.n	800615a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006156:	2300      	movs	r3, #0
 8006158:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800615a:	687b      	ldr	r3, [r7, #4]
	}
 800615c:	4618      	mov	r0, r3
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	20000c38 	.word	0x20000c38
 800616c:	20000c54 	.word	0x20000c54

08006170 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d058      	beq.n	8006238 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006186:	4b2f      	ldr	r3, [pc, #188]	; (8006244 <xTaskPriorityDisinherit+0xd4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	429a      	cmp	r2, r3
 800618e:	d00b      	beq.n	80061a8 <xTaskPriorityDisinherit+0x38>
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	b672      	cpsid	i
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	b662      	cpsie	i
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	e7fe      	b.n	80061a6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10b      	bne.n	80061c8 <xTaskPriorityDisinherit+0x58>
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	b672      	cpsid	i
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	b662      	cpsie	i
 80061c4:	60bb      	str	r3, [r7, #8]
 80061c6:	e7fe      	b.n	80061c6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061cc:	1e5a      	subs	r2, r3, #1
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061da:	429a      	cmp	r2, r3
 80061dc:	d02c      	beq.n	8006238 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d128      	bne.n	8006238 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	3304      	adds	r3, #4
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe fc0a 	bl	8004a04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006208:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <xTaskPriorityDisinherit+0xd8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d903      	bls.n	8006218 <xTaskPriorityDisinherit+0xa8>
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006214:	4a0c      	ldr	r2, [pc, #48]	; (8006248 <xTaskPriorityDisinherit+0xd8>)
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4a09      	ldr	r2, [pc, #36]	; (800624c <xTaskPriorityDisinherit+0xdc>)
 8006226:	441a      	add	r2, r3
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	3304      	adds	r3, #4
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f7fe fb8b 	bl	800494a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006234:	2301      	movs	r3, #1
 8006236:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006238:	697b      	ldr	r3, [r7, #20]
	}
 800623a:	4618      	mov	r0, r3
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	20000758 	.word	0x20000758
 8006248:	20000c34 	.word	0x20000c34
 800624c:	2000075c 	.word	0x2000075c

08006250 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800625a:	4b21      	ldr	r3, [pc, #132]	; (80062e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006260:	4b20      	ldr	r3, [pc, #128]	; (80062e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3304      	adds	r3, #4
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe fbcc 	bl	8004a04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006272:	d10a      	bne.n	800628a <prvAddCurrentTaskToDelayedList+0x3a>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d007      	beq.n	800628a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800627a:	4b1a      	ldr	r3, [pc, #104]	; (80062e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	3304      	adds	r3, #4
 8006280:	4619      	mov	r1, r3
 8006282:	4819      	ldr	r0, [pc, #100]	; (80062e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006284:	f7fe fb61 	bl	800494a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006288:	e026      	b.n	80062d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4413      	add	r3, r2
 8006290:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006292:	4b14      	ldr	r3, [pc, #80]	; (80062e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d209      	bcs.n	80062b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062a2:	4b12      	ldr	r3, [pc, #72]	; (80062ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	4b0f      	ldr	r3, [pc, #60]	; (80062e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3304      	adds	r3, #4
 80062ac:	4619      	mov	r1, r3
 80062ae:	4610      	mov	r0, r2
 80062b0:	f7fe fb6f 	bl	8004992 <vListInsert>
}
 80062b4:	e010      	b.n	80062d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062b6:	4b0e      	ldr	r3, [pc, #56]	; (80062f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	4b0a      	ldr	r3, [pc, #40]	; (80062e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3304      	adds	r3, #4
 80062c0:	4619      	mov	r1, r3
 80062c2:	4610      	mov	r0, r2
 80062c4:	f7fe fb65 	bl	8004992 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062c8:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d202      	bcs.n	80062d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80062d2:	4a08      	ldr	r2, [pc, #32]	; (80062f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	6013      	str	r3, [r2, #0]
}
 80062d8:	bf00      	nop
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20000c30 	.word	0x20000c30
 80062e4:	20000758 	.word	0x20000758
 80062e8:	20000c18 	.word	0x20000c18
 80062ec:	20000be8 	.word	0x20000be8
 80062f0:	20000be4 	.word	0x20000be4
 80062f4:	20000c4c 	.word	0x20000c4c

080062f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08a      	sub	sp, #40	; 0x28
 80062fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80062fe:	2300      	movs	r3, #0
 8006300:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006302:	f000 fbab 	bl	8006a5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006306:	4b1d      	ldr	r3, [pc, #116]	; (800637c <xTimerCreateTimerTask+0x84>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d021      	beq.n	8006352 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006312:	2300      	movs	r3, #0
 8006314:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006316:	1d3a      	adds	r2, r7, #4
 8006318:	f107 0108 	add.w	r1, r7, #8
 800631c:	f107 030c 	add.w	r3, r7, #12
 8006320:	4618      	mov	r0, r3
 8006322:	f7fe facb 	bl	80048bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	9202      	str	r2, [sp, #8]
 800632e:	9301      	str	r3, [sp, #4]
 8006330:	2302      	movs	r3, #2
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	2300      	movs	r3, #0
 8006336:	460a      	mov	r2, r1
 8006338:	4911      	ldr	r1, [pc, #68]	; (8006380 <xTimerCreateTimerTask+0x88>)
 800633a:	4812      	ldr	r0, [pc, #72]	; (8006384 <xTimerCreateTimerTask+0x8c>)
 800633c:	f7ff f918 	bl	8005570 <xTaskCreateStatic>
 8006340:	4602      	mov	r2, r0
 8006342:	4b11      	ldr	r3, [pc, #68]	; (8006388 <xTimerCreateTimerTask+0x90>)
 8006344:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006346:	4b10      	ldr	r3, [pc, #64]	; (8006388 <xTimerCreateTimerTask+0x90>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800634e:	2301      	movs	r3, #1
 8006350:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10b      	bne.n	8006370 <xTimerCreateTimerTask+0x78>
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	b672      	cpsid	i
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	b662      	cpsie	i
 800636c:	613b      	str	r3, [r7, #16]
 800636e:	e7fe      	b.n	800636e <xTimerCreateTimerTask+0x76>
	return xReturn;
 8006370:	697b      	ldr	r3, [r7, #20]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000c88 	.word	0x20000c88
 8006380:	08007d14 	.word	0x08007d14
 8006384:	08006601 	.word	0x08006601
 8006388:	20000c8c 	.word	0x20000c8c

0800638c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af02      	add	r7, sp, #8
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800639a:	202c      	movs	r0, #44	; 0x2c
 800639c:	f000 fdee 	bl	8006f7c <pvPortMalloc>
 80063a0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00d      	beq.n	80063c4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	9301      	str	r3, [sp, #4]
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 f845 	bl	800644e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80063c4:	697b      	ldr	r3, [r7, #20]
	}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b08a      	sub	sp, #40	; 0x28
 80063d2:	af02      	add	r7, sp, #8
 80063d4:	60f8      	str	r0, [r7, #12]
 80063d6:	60b9      	str	r1, [r7, #8]
 80063d8:	607a      	str	r2, [r7, #4]
 80063da:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80063dc:	232c      	movs	r3, #44	; 0x2c
 80063de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	2b2c      	cmp	r3, #44	; 0x2c
 80063e4:	d00b      	beq.n	80063fe <xTimerCreateStatic+0x30>
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	b672      	cpsid	i
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	b662      	cpsie	i
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	e7fe      	b.n	80063fc <xTimerCreateStatic+0x2e>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80063fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10b      	bne.n	800641e <xTimerCreateStatic+0x50>
 8006406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640a:	b672      	cpsid	i
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	b662      	cpsie	i
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	e7fe      	b.n	800641c <xTimerCreateStatic+0x4e>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00d      	beq.n	8006444 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	9301      	str	r3, [sp, #4]
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	68b9      	ldr	r1, [r7, #8]
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 f805 	bl	800644e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006444:	69fb      	ldr	r3, [r7, #28]
	}
 8006446:	4618      	mov	r0, r3
 8006448:	3720      	adds	r7, #32
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b086      	sub	sp, #24
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	607a      	str	r2, [r7, #4]
 800645a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10b      	bne.n	800647a <prvInitialiseNewTimer+0x2c>
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	b672      	cpsid	i
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	b662      	cpsie	i
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e7fe      	b.n	8006478 <prvInitialiseNewTimer+0x2a>

	if( pxNewTimer != NULL )
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	2b00      	cmp	r3, #0
 800647e:	d01e      	beq.n	80064be <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006480:	f000 faec 	bl	8006a5c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	6a3a      	ldr	r2, [r7, #32]
 800649a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	3304      	adds	r3, #4
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fe fa45 	bl	8004930 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d008      	beq.n	80064be <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064b2:	f043 0304 	orr.w	r3, r3, #4
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80064be:	bf00      	nop
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	; 0x28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10b      	bne.n	80064f8 <xTimerGenericCommand+0x30>
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	b672      	cpsid	i
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	b662      	cpsie	i
 80064f4:	623b      	str	r3, [r7, #32]
 80064f6:	e7fe      	b.n	80064f6 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80064f8:	4b19      	ldr	r3, [pc, #100]	; (8006560 <xTimerGenericCommand+0x98>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d02a      	beq.n	8006556 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b05      	cmp	r3, #5
 8006510:	dc18      	bgt.n	8006544 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006512:	f7ff fe0f 	bl	8006134 <xTaskGetSchedulerState>
 8006516:	4603      	mov	r3, r0
 8006518:	2b02      	cmp	r3, #2
 800651a:	d109      	bne.n	8006530 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800651c:	4b10      	ldr	r3, [pc, #64]	; (8006560 <xTimerGenericCommand+0x98>)
 800651e:	6818      	ldr	r0, [r3, #0]
 8006520:	f107 0110 	add.w	r1, r7, #16
 8006524:	2300      	movs	r3, #0
 8006526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006528:	f7fe fbd4 	bl	8004cd4 <xQueueGenericSend>
 800652c:	6278      	str	r0, [r7, #36]	; 0x24
 800652e:	e012      	b.n	8006556 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006530:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <xTimerGenericCommand+0x98>)
 8006532:	6818      	ldr	r0, [r3, #0]
 8006534:	f107 0110 	add.w	r1, r7, #16
 8006538:	2300      	movs	r3, #0
 800653a:	2200      	movs	r2, #0
 800653c:	f7fe fbca 	bl	8004cd4 <xQueueGenericSend>
 8006540:	6278      	str	r0, [r7, #36]	; 0x24
 8006542:	e008      	b.n	8006556 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006544:	4b06      	ldr	r3, [pc, #24]	; (8006560 <xTimerGenericCommand+0x98>)
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	f107 0110 	add.w	r1, r7, #16
 800654c:	2300      	movs	r3, #0
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	f7fe fcaa 	bl	8004ea8 <xQueueGenericSendFromISR>
 8006554:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006558:	4618      	mov	r0, r3
 800655a:	3728      	adds	r7, #40	; 0x28
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	20000c88 	.word	0x20000c88

08006564 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af02      	add	r7, sp, #8
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800656e:	4b23      	ldr	r3, [pc, #140]	; (80065fc <prvProcessExpiredTimer+0x98>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	3304      	adds	r3, #4
 800657c:	4618      	mov	r0, r3
 800657e:	f7fe fa41 	bl	8004a04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d023      	beq.n	80065d8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	699a      	ldr	r2, [r3, #24]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	18d1      	adds	r1, r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	6978      	ldr	r0, [r7, #20]
 800659e:	f000 f8d3 	bl	8006748 <prvInsertTimerInActiveList>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d020      	beq.n	80065ea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065a8:	2300      	movs	r3, #0
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	2300      	movs	r3, #0
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	2100      	movs	r1, #0
 80065b2:	6978      	ldr	r0, [r7, #20]
 80065b4:	f7ff ff88 	bl	80064c8 <xTimerGenericCommand>
 80065b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d114      	bne.n	80065ea <prvProcessExpiredTimer+0x86>
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	b672      	cpsid	i
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	b662      	cpsie	i
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	e7fe      	b.n	80065d6 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065de:	f023 0301 	bic.w	r3, r3, #1
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	6978      	ldr	r0, [r7, #20]
 80065f0:	4798      	blx	r3
}
 80065f2:	bf00      	nop
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000c80 	.word	0x20000c80

08006600 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006608:	f107 0308 	add.w	r3, r7, #8
 800660c:	4618      	mov	r0, r3
 800660e:	f000 f857 	bl	80066c0 <prvGetNextExpireTime>
 8006612:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4619      	mov	r1, r3
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 f803 	bl	8006624 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800661e:	f000 f8d5 	bl	80067cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006622:	e7f1      	b.n	8006608 <prvTimerTask+0x8>

08006624 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800662e:	f7ff f9d3 	bl	80059d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006632:	f107 0308 	add.w	r3, r7, #8
 8006636:	4618      	mov	r0, r3
 8006638:	f000 f866 	bl	8006708 <prvSampleTimeNow>
 800663c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d130      	bne.n	80066a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10a      	bne.n	8006660 <prvProcessTimerOrBlockTask+0x3c>
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	429a      	cmp	r2, r3
 8006650:	d806      	bhi.n	8006660 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006652:	f7ff f9cf 	bl	80059f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006656:	68f9      	ldr	r1, [r7, #12]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff ff83 	bl	8006564 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800665e:	e024      	b.n	80066aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d008      	beq.n	8006678 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006666:	4b13      	ldr	r3, [pc, #76]	; (80066b4 <prvProcessTimerOrBlockTask+0x90>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <prvProcessTimerOrBlockTask+0x50>
 8006670:	2301      	movs	r3, #1
 8006672:	e000      	b.n	8006676 <prvProcessTimerOrBlockTask+0x52>
 8006674:	2300      	movs	r3, #0
 8006676:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006678:	4b0f      	ldr	r3, [pc, #60]	; (80066b8 <prvProcessTimerOrBlockTask+0x94>)
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	4619      	mov	r1, r3
 8006686:	f7fe ff3f 	bl	8005508 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800668a:	f7ff f9b3 	bl	80059f4 <xTaskResumeAll>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10a      	bne.n	80066aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006694:	4b09      	ldr	r3, [pc, #36]	; (80066bc <prvProcessTimerOrBlockTask+0x98>)
 8006696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	f3bf 8f6f 	isb	sy
}
 80066a4:	e001      	b.n	80066aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066a6:	f7ff f9a5 	bl	80059f4 <xTaskResumeAll>
}
 80066aa:	bf00      	nop
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20000c84 	.word	0x20000c84
 80066b8:	20000c88 	.word	0x20000c88
 80066bc:	e000ed04 	.word	0xe000ed04

080066c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066c8:	4b0e      	ldr	r3, [pc, #56]	; (8006704 <prvGetNextExpireTime+0x44>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <prvGetNextExpireTime+0x16>
 80066d2:	2201      	movs	r2, #1
 80066d4:	e000      	b.n	80066d8 <prvGetNextExpireTime+0x18>
 80066d6:	2200      	movs	r2, #0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d105      	bne.n	80066f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066e4:	4b07      	ldr	r3, [pc, #28]	; (8006704 <prvGetNextExpireTime+0x44>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	e001      	b.n	80066f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80066f4:	68fb      	ldr	r3, [r7, #12]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	20000c80 	.word	0x20000c80

08006708 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006710:	f7ff fa00 	bl	8005b14 <xTaskGetTickCount>
 8006714:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006716:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <prvSampleTimeNow+0x3c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	429a      	cmp	r2, r3
 800671e:	d205      	bcs.n	800672c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006720:	f000 f936 	bl	8006990 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	e002      	b.n	8006732 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006732:	4a04      	ldr	r2, [pc, #16]	; (8006744 <prvSampleTimeNow+0x3c>)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006738:	68fb      	ldr	r3, [r7, #12]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20000c90 	.word	0x20000c90

08006748 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	429a      	cmp	r2, r3
 800676c:	d812      	bhi.n	8006794 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	1ad2      	subs	r2, r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	429a      	cmp	r2, r3
 800677a:	d302      	bcc.n	8006782 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800677c:	2301      	movs	r3, #1
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	e01b      	b.n	80067ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006782:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <prvInsertTimerInActiveList+0x7c>)
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3304      	adds	r3, #4
 800678a:	4619      	mov	r1, r3
 800678c:	4610      	mov	r0, r2
 800678e:	f7fe f900 	bl	8004992 <vListInsert>
 8006792:	e012      	b.n	80067ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d206      	bcs.n	80067aa <prvInsertTimerInActiveList+0x62>
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d302      	bcc.n	80067aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	e007      	b.n	80067ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067aa:	4b07      	ldr	r3, [pc, #28]	; (80067c8 <prvInsertTimerInActiveList+0x80>)
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3304      	adds	r3, #4
 80067b2:	4619      	mov	r1, r3
 80067b4:	4610      	mov	r0, r2
 80067b6:	f7fe f8ec 	bl	8004992 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067ba:	697b      	ldr	r3, [r7, #20]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20000c84 	.word	0x20000c84
 80067c8:	20000c80 	.word	0x20000c80

080067cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08e      	sub	sp, #56	; 0x38
 80067d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067d2:	e0cc      	b.n	800696e <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	da19      	bge.n	800680e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80067da:	1d3b      	adds	r3, r7, #4
 80067dc:	3304      	adds	r3, #4
 80067de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10b      	bne.n	80067fe <prvProcessReceivedCommands+0x32>
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	b672      	cpsid	i
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	b662      	cpsie	i
 80067fa:	61fb      	str	r3, [r7, #28]
 80067fc:	e7fe      	b.n	80067fc <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006804:	6850      	ldr	r0, [r2, #4]
 8006806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006808:	6892      	ldr	r2, [r2, #8]
 800680a:	4611      	mov	r1, r2
 800680c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	f2c0 80ab 	blt.w	800696c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d004      	beq.n	800682c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006824:	3304      	adds	r3, #4
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe f8ec 	bl	8004a04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800682c:	463b      	mov	r3, r7
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff ff6a 	bl	8006708 <prvSampleTimeNow>
 8006834:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b09      	cmp	r3, #9
 800683a:	f200 8098 	bhi.w	800696e <prvProcessReceivedCommands+0x1a2>
 800683e:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <prvProcessReceivedCommands+0x78>)
 8006840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006844:	0800686d 	.word	0x0800686d
 8006848:	0800686d 	.word	0x0800686d
 800684c:	0800686d 	.word	0x0800686d
 8006850:	080068e3 	.word	0x080068e3
 8006854:	080068f7 	.word	0x080068f7
 8006858:	08006943 	.word	0x08006943
 800685c:	0800686d 	.word	0x0800686d
 8006860:	0800686d 	.word	0x0800686d
 8006864:	080068e3 	.word	0x080068e3
 8006868:	080068f7 	.word	0x080068f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006872:	f043 0301 	orr.w	r3, r3, #1
 8006876:	b2da      	uxtb	r2, r3
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	18d1      	adds	r1, r2, r3
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800688c:	f7ff ff5c 	bl	8006748 <prvInsertTimerInActiveList>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d06b      	beq.n	800696e <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800689c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d060      	beq.n	800696e <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	441a      	add	r2, r3
 80068b4:	2300      	movs	r3, #0
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	2300      	movs	r3, #0
 80068ba:	2100      	movs	r1, #0
 80068bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068be:	f7ff fe03 	bl	80064c8 <xTimerGenericCommand>
 80068c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d151      	bne.n	800696e <prvProcessReceivedCommands+0x1a2>
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	b672      	cpsid	i
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	b662      	cpsie	i
 80068de:	61bb      	str	r3, [r7, #24]
 80068e0:	e7fe      	b.n	80068e0 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068e8:	f023 0301 	bic.w	r3, r3, #1
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80068f4:	e03b      	b.n	800696e <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068fc:	f043 0301 	orr.w	r3, r3, #1
 8006900:	b2da      	uxtb	r2, r3
 8006902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006904:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10b      	bne.n	800692e <prvProcessReceivedCommands+0x162>
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	b672      	cpsid	i
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	b662      	cpsie	i
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	e7fe      	b.n	800692c <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	18d1      	adds	r1, r2, r3
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800693c:	f7ff ff04 	bl	8006748 <prvInsertTimerInActiveList>
					break;
 8006940:	e015      	b.n	800696e <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d103      	bne.n	8006958 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006952:	f000 fbdb 	bl	800710c <vPortFree>
 8006956:	e00a      	b.n	800696e <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800695e:	f023 0301 	bic.w	r3, r3, #1
 8006962:	b2da      	uxtb	r2, r3
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800696a:	e000      	b.n	800696e <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800696c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800696e:	4b07      	ldr	r3, [pc, #28]	; (800698c <prvProcessReceivedCommands+0x1c0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	1d39      	adds	r1, r7, #4
 8006974:	2200      	movs	r2, #0
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe fb32 	bl	8004fe0 <xQueueReceive>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	f47f af28 	bne.w	80067d4 <prvProcessReceivedCommands+0x8>
	}
}
 8006984:	bf00      	nop
 8006986:	3730      	adds	r7, #48	; 0x30
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20000c88 	.word	0x20000c88

08006990 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006996:	e049      	b.n	8006a2c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006998:	4b2e      	ldr	r3, [pc, #184]	; (8006a54 <prvSwitchTimerLists+0xc4>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a2:	4b2c      	ldr	r3, [pc, #176]	; (8006a54 <prvSwitchTimerLists+0xc4>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3304      	adds	r3, #4
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fe f827 	bl	8004a04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d02f      	beq.n	8006a2c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	4413      	add	r3, r2
 80069d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d90e      	bls.n	80069fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069ea:	4b1a      	ldr	r3, [pc, #104]	; (8006a54 <prvSwitchTimerLists+0xc4>)
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4619      	mov	r1, r3
 80069f4:	4610      	mov	r0, r2
 80069f6:	f7fd ffcc 	bl	8004992 <vListInsert>
 80069fa:	e017      	b.n	8006a2c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069fc:	2300      	movs	r3, #0
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	2300      	movs	r3, #0
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	2100      	movs	r1, #0
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7ff fd5e 	bl	80064c8 <xTimerGenericCommand>
 8006a0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10b      	bne.n	8006a2c <prvSwitchTimerLists+0x9c>
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	b672      	cpsid	i
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	b662      	cpsie	i
 8006a28:	603b      	str	r3, [r7, #0]
 8006a2a:	e7fe      	b.n	8006a2a <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a2c:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <prvSwitchTimerLists+0xc4>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1b0      	bne.n	8006998 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a36:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <prvSwitchTimerLists+0xc4>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a3c:	4b06      	ldr	r3, [pc, #24]	; (8006a58 <prvSwitchTimerLists+0xc8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a04      	ldr	r2, [pc, #16]	; (8006a54 <prvSwitchTimerLists+0xc4>)
 8006a42:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a44:	4a04      	ldr	r2, [pc, #16]	; (8006a58 <prvSwitchTimerLists+0xc8>)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	6013      	str	r3, [r2, #0]
}
 8006a4a:	bf00      	nop
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	20000c80 	.word	0x20000c80
 8006a58:	20000c84 	.word	0x20000c84

08006a5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a62:	f000 f969 	bl	8006d38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a66:	4b15      	ldr	r3, [pc, #84]	; (8006abc <prvCheckForValidListAndQueue+0x60>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d120      	bne.n	8006ab0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a6e:	4814      	ldr	r0, [pc, #80]	; (8006ac0 <prvCheckForValidListAndQueue+0x64>)
 8006a70:	f7fd ff3e 	bl	80048f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a74:	4813      	ldr	r0, [pc, #76]	; (8006ac4 <prvCheckForValidListAndQueue+0x68>)
 8006a76:	f7fd ff3b 	bl	80048f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a7a:	4b13      	ldr	r3, [pc, #76]	; (8006ac8 <prvCheckForValidListAndQueue+0x6c>)
 8006a7c:	4a10      	ldr	r2, [pc, #64]	; (8006ac0 <prvCheckForValidListAndQueue+0x64>)
 8006a7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a80:	4b12      	ldr	r3, [pc, #72]	; (8006acc <prvCheckForValidListAndQueue+0x70>)
 8006a82:	4a10      	ldr	r2, [pc, #64]	; (8006ac4 <prvCheckForValidListAndQueue+0x68>)
 8006a84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a86:	2300      	movs	r3, #0
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	4b11      	ldr	r3, [pc, #68]	; (8006ad0 <prvCheckForValidListAndQueue+0x74>)
 8006a8c:	4a11      	ldr	r2, [pc, #68]	; (8006ad4 <prvCheckForValidListAndQueue+0x78>)
 8006a8e:	2110      	movs	r1, #16
 8006a90:	200a      	movs	r0, #10
 8006a92:	f7fe f83d 	bl	8004b10 <xQueueGenericCreateStatic>
 8006a96:	4602      	mov	r2, r0
 8006a98:	4b08      	ldr	r3, [pc, #32]	; (8006abc <prvCheckForValidListAndQueue+0x60>)
 8006a9a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a9c:	4b07      	ldr	r3, [pc, #28]	; (8006abc <prvCheckForValidListAndQueue+0x60>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006aa4:	4b05      	ldr	r3, [pc, #20]	; (8006abc <prvCheckForValidListAndQueue+0x60>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	490b      	ldr	r1, [pc, #44]	; (8006ad8 <prvCheckForValidListAndQueue+0x7c>)
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe fd04 	bl	80054b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ab0:	f000 f974 	bl	8006d9c <vPortExitCritical>
}
 8006ab4:	bf00      	nop
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000c88 	.word	0x20000c88
 8006ac0:	20000c58 	.word	0x20000c58
 8006ac4:	20000c6c 	.word	0x20000c6c
 8006ac8:	20000c80 	.word	0x20000c80
 8006acc:	20000c84 	.word	0x20000c84
 8006ad0:	20000d34 	.word	0x20000d34
 8006ad4:	20000c94 	.word	0x20000c94
 8006ad8:	08007d1c 	.word	0x08007d1c

08006adc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10b      	bne.n	8006b06 <pvTimerGetTimerID+0x2a>
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	b672      	cpsid	i
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	b662      	cpsie	i
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	e7fe      	b.n	8006b04 <pvTimerGetTimerID+0x28>

	taskENTER_CRITICAL();
 8006b06:	f000 f917 	bl	8006d38 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006b10:	f000 f944 	bl	8006d9c <vPortExitCritical>

	return pvReturn;
 8006b14:	693b      	ldr	r3, [r7, #16]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	3b04      	subs	r3, #4
 8006b30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3b04      	subs	r3, #4
 8006b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f023 0201 	bic.w	r2, r3, #1
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3b04      	subs	r3, #4
 8006b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b50:	4a0c      	ldr	r2, [pc, #48]	; (8006b84 <pxPortInitialiseStack+0x64>)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3b14      	subs	r3, #20
 8006b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3b04      	subs	r3, #4
 8006b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f06f 0202 	mvn.w	r2, #2
 8006b6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3b20      	subs	r3, #32
 8006b74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b76:	68fb      	ldr	r3, [r7, #12]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	08006b89 	.word	0x08006b89

08006b88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b92:	4b13      	ldr	r3, [pc, #76]	; (8006be0 <prvTaskExitError+0x58>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9a:	d00b      	beq.n	8006bb4 <prvTaskExitError+0x2c>
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	b672      	cpsid	i
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	b662      	cpsie	i
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	e7fe      	b.n	8006bb2 <prvTaskExitError+0x2a>
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	b672      	cpsid	i
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	b662      	cpsie	i
 8006bc8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bca:	bf00      	nop
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0fc      	beq.n	8006bcc <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006bd2:	bf00      	nop
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	20000014 	.word	0x20000014
	...

08006bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006bf0:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <pxCurrentTCBConst2>)
 8006bf2:	6819      	ldr	r1, [r3, #0]
 8006bf4:	6808      	ldr	r0, [r1, #0]
 8006bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfa:	f380 8809 	msr	PSP, r0
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f04f 0000 	mov.w	r0, #0
 8006c06:	f380 8811 	msr	BASEPRI, r0
 8006c0a:	4770      	bx	lr
 8006c0c:	f3af 8000 	nop.w

08006c10 <pxCurrentTCBConst2>:
 8006c10:	20000758 	.word	0x20000758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c14:	bf00      	nop
 8006c16:	bf00      	nop

08006c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c18:	4808      	ldr	r0, [pc, #32]	; (8006c3c <prvPortStartFirstTask+0x24>)
 8006c1a:	6800      	ldr	r0, [r0, #0]
 8006c1c:	6800      	ldr	r0, [r0, #0]
 8006c1e:	f380 8808 	msr	MSP, r0
 8006c22:	f04f 0000 	mov.w	r0, #0
 8006c26:	f380 8814 	msr	CONTROL, r0
 8006c2a:	b662      	cpsie	i
 8006c2c:	b661      	cpsie	f
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	df00      	svc	0
 8006c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c3a:	bf00      	nop
 8006c3c:	e000ed08 	.word	0xe000ed08

08006c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c46:	4b36      	ldr	r3, [pc, #216]	; (8006d20 <xPortStartScheduler+0xe0>)
 8006c48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	22ff      	movs	r2, #255	; 0xff
 8006c56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	4b2e      	ldr	r3, [pc, #184]	; (8006d24 <xPortStartScheduler+0xe4>)
 8006c6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c6e:	4b2e      	ldr	r3, [pc, #184]	; (8006d28 <xPortStartScheduler+0xe8>)
 8006c70:	2207      	movs	r2, #7
 8006c72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c74:	e009      	b.n	8006c8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006c76:	4b2c      	ldr	r3, [pc, #176]	; (8006d28 <xPortStartScheduler+0xe8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	4a2a      	ldr	r2, [pc, #168]	; (8006d28 <xPortStartScheduler+0xe8>)
 8006c7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c8a:	78fb      	ldrb	r3, [r7, #3]
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c92:	2b80      	cmp	r3, #128	; 0x80
 8006c94:	d0ef      	beq.n	8006c76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c96:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <xPortStartScheduler+0xe8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f1c3 0307 	rsb	r3, r3, #7
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d00b      	beq.n	8006cba <xPortStartScheduler+0x7a>
 8006ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca6:	b672      	cpsid	i
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	b662      	cpsie	i
 8006cb6:	60bb      	str	r3, [r7, #8]
 8006cb8:	e7fe      	b.n	8006cb8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cba:	4b1b      	ldr	r3, [pc, #108]	; (8006d28 <xPortStartScheduler+0xe8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	021b      	lsls	r3, r3, #8
 8006cc0:	4a19      	ldr	r2, [pc, #100]	; (8006d28 <xPortStartScheduler+0xe8>)
 8006cc2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cc4:	4b18      	ldr	r3, [pc, #96]	; (8006d28 <xPortStartScheduler+0xe8>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ccc:	4a16      	ldr	r2, [pc, #88]	; (8006d28 <xPortStartScheduler+0xe8>)
 8006cce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006cd8:	4b14      	ldr	r3, [pc, #80]	; (8006d2c <xPortStartScheduler+0xec>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a13      	ldr	r2, [pc, #76]	; (8006d2c <xPortStartScheduler+0xec>)
 8006cde:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ce2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ce4:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <xPortStartScheduler+0xec>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a10      	ldr	r2, [pc, #64]	; (8006d2c <xPortStartScheduler+0xec>)
 8006cea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006cee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006cf0:	f000 f8d4 	bl	8006e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006cf4:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <xPortStartScheduler+0xf0>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006cfa:	f000 f8f3 	bl	8006ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006cfe:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <xPortStartScheduler+0xf4>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a0c      	ldr	r2, [pc, #48]	; (8006d34 <xPortStartScheduler+0xf4>)
 8006d04:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d08:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d0a:	f7ff ff85 	bl	8006c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d0e:	f7fe ffa9 	bl	8005c64 <vTaskSwitchContext>
	prvTaskExitError();
 8006d12:	f7ff ff39 	bl	8006b88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	e000e400 	.word	0xe000e400
 8006d24:	20000d84 	.word	0x20000d84
 8006d28:	20000d88 	.word	0x20000d88
 8006d2c:	e000ed20 	.word	0xe000ed20
 8006d30:	20000014 	.word	0x20000014
 8006d34:	e000ef34 	.word	0xe000ef34

08006d38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	b672      	cpsid	i
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	b662      	cpsie	i
 8006d52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d54:	4b0f      	ldr	r3, [pc, #60]	; (8006d94 <vPortEnterCritical+0x5c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	4a0e      	ldr	r2, [pc, #56]	; (8006d94 <vPortEnterCritical+0x5c>)
 8006d5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d5e:	4b0d      	ldr	r3, [pc, #52]	; (8006d94 <vPortEnterCritical+0x5c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d110      	bne.n	8006d88 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d66:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <vPortEnterCritical+0x60>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <vPortEnterCritical+0x50>
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	b672      	cpsid	i
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	b662      	cpsie	i
 8006d84:	603b      	str	r3, [r7, #0]
 8006d86:	e7fe      	b.n	8006d86 <vPortEnterCritical+0x4e>
	}
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	20000014 	.word	0x20000014
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006da2:	4b12      	ldr	r3, [pc, #72]	; (8006dec <vPortExitCritical+0x50>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10b      	bne.n	8006dc2 <vPortExitCritical+0x26>
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	b672      	cpsid	i
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	b662      	cpsie	i
 8006dbe:	607b      	str	r3, [r7, #4]
 8006dc0:	e7fe      	b.n	8006dc0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8006dc2:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <vPortExitCritical+0x50>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	4a08      	ldr	r2, [pc, #32]	; (8006dec <vPortExitCritical+0x50>)
 8006dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006dcc:	4b07      	ldr	r3, [pc, #28]	; (8006dec <vPortExitCritical+0x50>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <vPortExitCritical+0x42>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006dde:	bf00      	nop
 8006de0:	370c      	adds	r7, #12
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	20000014 	.word	0x20000014

08006df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006df0:	f3ef 8009 	mrs	r0, PSP
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	4b15      	ldr	r3, [pc, #84]	; (8006e50 <pxCurrentTCBConst>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	f01e 0f10 	tst.w	lr, #16
 8006e00:	bf08      	it	eq
 8006e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0a:	6010      	str	r0, [r2, #0]
 8006e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e14:	b672      	cpsid	i
 8006e16:	f380 8811 	msr	BASEPRI, r0
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	b662      	cpsie	i
 8006e24:	f7fe ff1e 	bl	8005c64 <vTaskSwitchContext>
 8006e28:	f04f 0000 	mov.w	r0, #0
 8006e2c:	f380 8811 	msr	BASEPRI, r0
 8006e30:	bc09      	pop	{r0, r3}
 8006e32:	6819      	ldr	r1, [r3, #0]
 8006e34:	6808      	ldr	r0, [r1, #0]
 8006e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3a:	f01e 0f10 	tst.w	lr, #16
 8006e3e:	bf08      	it	eq
 8006e40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e44:	f380 8809 	msr	PSP, r0
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop

08006e50 <pxCurrentTCBConst>:
 8006e50:	20000758 	.word	0x20000758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop

08006e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	b672      	cpsid	i
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	b662      	cpsie	i
 8006e72:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e74:	f7fe fe5e 	bl	8005b34 <xTaskIncrementTick>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e7e:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <SysTick_Handler+0x40>)
 8006e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	2300      	movs	r3, #0
 8006e88:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e90:	bf00      	nop
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	e000ed04 	.word	0xe000ed04

08006e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <vPortSetupTimerInterrupt+0x34>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ea6:	4b0b      	ldr	r3, [pc, #44]	; (8006ed4 <vPortSetupTimerInterrupt+0x38>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eac:	4b0a      	ldr	r3, [pc, #40]	; (8006ed8 <vPortSetupTimerInterrupt+0x3c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a0a      	ldr	r2, [pc, #40]	; (8006edc <vPortSetupTimerInterrupt+0x40>)
 8006eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb6:	099b      	lsrs	r3, r3, #6
 8006eb8:	4a09      	ldr	r2, [pc, #36]	; (8006ee0 <vPortSetupTimerInterrupt+0x44>)
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ebe:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <vPortSetupTimerInterrupt+0x34>)
 8006ec0:	2207      	movs	r2, #7
 8006ec2:	601a      	str	r2, [r3, #0]
}
 8006ec4:	bf00      	nop
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	e000e010 	.word	0xe000e010
 8006ed4:	e000e018 	.word	0xe000e018
 8006ed8:	20000008 	.word	0x20000008
 8006edc:	10624dd3 	.word	0x10624dd3
 8006ee0:	e000e014 	.word	0xe000e014

08006ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ef4 <vPortEnableVFP+0x10>
 8006ee8:	6801      	ldr	r1, [r0, #0]
 8006eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006eee:	6001      	str	r1, [r0, #0]
 8006ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ef2:	bf00      	nop
 8006ef4:	e000ed88 	.word	0xe000ed88

08006ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006efe:	f3ef 8305 	mrs	r3, IPSR
 8006f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b0f      	cmp	r3, #15
 8006f08:	d915      	bls.n	8006f36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f0a:	4a18      	ldr	r2, [pc, #96]	; (8006f6c <vPortValidateInterruptPriority+0x74>)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f14:	4b16      	ldr	r3, [pc, #88]	; (8006f70 <vPortValidateInterruptPriority+0x78>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	7afa      	ldrb	r2, [r7, #11]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d20b      	bcs.n	8006f36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f22:	b672      	cpsid	i
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	b662      	cpsie	i
 8006f32:	607b      	str	r3, [r7, #4]
 8006f34:	e7fe      	b.n	8006f34 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f36:	4b0f      	ldr	r3, [pc, #60]	; (8006f74 <vPortValidateInterruptPriority+0x7c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f3e:	4b0e      	ldr	r3, [pc, #56]	; (8006f78 <vPortValidateInterruptPriority+0x80>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d90b      	bls.n	8006f5e <vPortValidateInterruptPriority+0x66>
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	b672      	cpsid	i
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	b662      	cpsie	i
 8006f5a:	603b      	str	r3, [r7, #0]
 8006f5c:	e7fe      	b.n	8006f5c <vPortValidateInterruptPriority+0x64>
	}
 8006f5e:	bf00      	nop
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	e000e3f0 	.word	0xe000e3f0
 8006f70:	20000d84 	.word	0x20000d84
 8006f74:	e000ed0c 	.word	0xe000ed0c
 8006f78:	20000d88 	.word	0x20000d88

08006f7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08a      	sub	sp, #40	; 0x28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f88:	f7fe fd26 	bl	80059d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f8c:	4b5a      	ldr	r3, [pc, #360]	; (80070f8 <pvPortMalloc+0x17c>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f94:	f000 f916 	bl	80071c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f98:	4b58      	ldr	r3, [pc, #352]	; (80070fc <pvPortMalloc+0x180>)
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f040 8090 	bne.w	80070c6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01e      	beq.n	8006fea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006fac:	2208      	movs	r2, #8
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d015      	beq.n	8006fea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f023 0307 	bic.w	r3, r3, #7
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00b      	beq.n	8006fea <pvPortMalloc+0x6e>
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	b672      	cpsid	i
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	b662      	cpsie	i
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	e7fe      	b.n	8006fe8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d06a      	beq.n	80070c6 <pvPortMalloc+0x14a>
 8006ff0:	4b43      	ldr	r3, [pc, #268]	; (8007100 <pvPortMalloc+0x184>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d865      	bhi.n	80070c6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ffa:	4b42      	ldr	r3, [pc, #264]	; (8007104 <pvPortMalloc+0x188>)
 8006ffc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ffe:	4b41      	ldr	r3, [pc, #260]	; (8007104 <pvPortMalloc+0x188>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007004:	e004      	b.n	8007010 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	429a      	cmp	r2, r3
 8007018:	d903      	bls.n	8007022 <pvPortMalloc+0xa6>
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1f1      	bne.n	8007006 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007022:	4b35      	ldr	r3, [pc, #212]	; (80070f8 <pvPortMalloc+0x17c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007028:	429a      	cmp	r2, r3
 800702a:	d04c      	beq.n	80070c6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2208      	movs	r2, #8
 8007032:	4413      	add	r3, r2
 8007034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	1ad2      	subs	r2, r2, r3
 8007046:	2308      	movs	r3, #8
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	429a      	cmp	r2, r3
 800704c:	d920      	bls.n	8007090 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800704e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4413      	add	r3, r2
 8007054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <pvPortMalloc+0xfc>
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	b672      	cpsid	i
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	b662      	cpsie	i
 8007074:	613b      	str	r3, [r7, #16]
 8007076:	e7fe      	b.n	8007076 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	1ad2      	subs	r2, r2, r3
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800708a:	69b8      	ldr	r0, [r7, #24]
 800708c:	f000 f8fc 	bl	8007288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007090:	4b1b      	ldr	r3, [pc, #108]	; (8007100 <pvPortMalloc+0x184>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	4a19      	ldr	r2, [pc, #100]	; (8007100 <pvPortMalloc+0x184>)
 800709c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800709e:	4b18      	ldr	r3, [pc, #96]	; (8007100 <pvPortMalloc+0x184>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	4b19      	ldr	r3, [pc, #100]	; (8007108 <pvPortMalloc+0x18c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d203      	bcs.n	80070b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070aa:	4b15      	ldr	r3, [pc, #84]	; (8007100 <pvPortMalloc+0x184>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a16      	ldr	r2, [pc, #88]	; (8007108 <pvPortMalloc+0x18c>)
 80070b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	4b11      	ldr	r3, [pc, #68]	; (80070fc <pvPortMalloc+0x180>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	431a      	orrs	r2, r3
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070c6:	f7fe fc95 	bl	80059f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	f003 0307 	and.w	r3, r3, #7
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <pvPortMalloc+0x170>
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	b672      	cpsid	i
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	b662      	cpsie	i
 80070e8:	60fb      	str	r3, [r7, #12]
 80070ea:	e7fe      	b.n	80070ea <pvPortMalloc+0x16e>
	return pvReturn;
 80070ec:	69fb      	ldr	r3, [r7, #28]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3728      	adds	r7, #40	; 0x28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20004994 	.word	0x20004994
 80070fc:	200049a0 	.word	0x200049a0
 8007100:	20004998 	.word	0x20004998
 8007104:	2000498c 	.word	0x2000498c
 8007108:	2000499c 	.word	0x2000499c

0800710c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d04a      	beq.n	80071b4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800711e:	2308      	movs	r3, #8
 8007120:	425b      	negs	r3, r3
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	4413      	add	r3, r2
 8007126:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	4b22      	ldr	r3, [pc, #136]	; (80071bc <vPortFree+0xb0>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4013      	ands	r3, r2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10b      	bne.n	8007152 <vPortFree+0x46>
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	b672      	cpsid	i
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	b662      	cpsie	i
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	e7fe      	b.n	8007150 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00b      	beq.n	8007172 <vPortFree+0x66>
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	b672      	cpsid	i
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	b662      	cpsie	i
 800716e:	60bb      	str	r3, [r7, #8]
 8007170:	e7fe      	b.n	8007170 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	4b11      	ldr	r3, [pc, #68]	; (80071bc <vPortFree+0xb0>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4013      	ands	r3, r2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d019      	beq.n	80071b4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d115      	bne.n	80071b4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <vPortFree+0xb0>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	43db      	mvns	r3, r3
 8007192:	401a      	ands	r2, r3
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007198:	f7fe fc1e 	bl	80059d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <vPortFree+0xb4>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4413      	add	r3, r2
 80071a6:	4a06      	ldr	r2, [pc, #24]	; (80071c0 <vPortFree+0xb4>)
 80071a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071aa:	6938      	ldr	r0, [r7, #16]
 80071ac:	f000 f86c 	bl	8007288 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071b0:	f7fe fc20 	bl	80059f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071b4:	bf00      	nop
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	200049a0 	.word	0x200049a0
 80071c0:	20004998 	.word	0x20004998

080071c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80071ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071d0:	4b27      	ldr	r3, [pc, #156]	; (8007270 <prvHeapInit+0xac>)
 80071d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f003 0307 	and.w	r3, r3, #7
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00c      	beq.n	80071f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3307      	adds	r3, #7
 80071e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0307 	bic.w	r3, r3, #7
 80071ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	4a1f      	ldr	r2, [pc, #124]	; (8007270 <prvHeapInit+0xac>)
 80071f4:	4413      	add	r3, r2
 80071f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071fc:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <prvHeapInit+0xb0>)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007202:	4b1c      	ldr	r3, [pc, #112]	; (8007274 <prvHeapInit+0xb0>)
 8007204:	2200      	movs	r2, #0
 8007206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	4413      	add	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007210:	2208      	movs	r2, #8
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	1a9b      	subs	r3, r3, r2
 8007216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 0307 	bic.w	r3, r3, #7
 800721e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4a15      	ldr	r2, [pc, #84]	; (8007278 <prvHeapInit+0xb4>)
 8007224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007226:	4b14      	ldr	r3, [pc, #80]	; (8007278 <prvHeapInit+0xb4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2200      	movs	r2, #0
 800722c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800722e:	4b12      	ldr	r3, [pc, #72]	; (8007278 <prvHeapInit+0xb4>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007244:	4b0c      	ldr	r3, [pc, #48]	; (8007278 <prvHeapInit+0xb4>)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	4a0a      	ldr	r2, [pc, #40]	; (800727c <prvHeapInit+0xb8>)
 8007252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	4a09      	ldr	r2, [pc, #36]	; (8007280 <prvHeapInit+0xbc>)
 800725a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800725c:	4b09      	ldr	r3, [pc, #36]	; (8007284 <prvHeapInit+0xc0>)
 800725e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007262:	601a      	str	r2, [r3, #0]
}
 8007264:	bf00      	nop
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	20000d8c 	.word	0x20000d8c
 8007274:	2000498c 	.word	0x2000498c
 8007278:	20004994 	.word	0x20004994
 800727c:	2000499c 	.word	0x2000499c
 8007280:	20004998 	.word	0x20004998
 8007284:	200049a0 	.word	0x200049a0

08007288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007290:	4b28      	ldr	r3, [pc, #160]	; (8007334 <prvInsertBlockIntoFreeList+0xac>)
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	e002      	b.n	800729c <prvInsertBlockIntoFreeList+0x14>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d8f7      	bhi.n	8007296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	4413      	add	r3, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d108      	bne.n	80072ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	441a      	add	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	441a      	add	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d118      	bne.n	8007310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	4b15      	ldr	r3, [pc, #84]	; (8007338 <prvInsertBlockIntoFreeList+0xb0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d00d      	beq.n	8007306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	441a      	add	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	e008      	b.n	8007318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007306:	4b0c      	ldr	r3, [pc, #48]	; (8007338 <prvInsertBlockIntoFreeList+0xb0>)
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	e003      	b.n	8007318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	429a      	cmp	r2, r3
 800731e:	d002      	beq.n	8007326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007326:	bf00      	nop
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	2000498c 	.word	0x2000498c
 8007338:	20004994 	.word	0x20004994

0800733c <__errno>:
 800733c:	4b01      	ldr	r3, [pc, #4]	; (8007344 <__errno+0x8>)
 800733e:	6818      	ldr	r0, [r3, #0]
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	20000018 	.word	0x20000018

08007348 <__libc_init_array>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	4e0d      	ldr	r6, [pc, #52]	; (8007380 <__libc_init_array+0x38>)
 800734c:	4c0d      	ldr	r4, [pc, #52]	; (8007384 <__libc_init_array+0x3c>)
 800734e:	1ba4      	subs	r4, r4, r6
 8007350:	10a4      	asrs	r4, r4, #2
 8007352:	2500      	movs	r5, #0
 8007354:	42a5      	cmp	r5, r4
 8007356:	d109      	bne.n	800736c <__libc_init_array+0x24>
 8007358:	4e0b      	ldr	r6, [pc, #44]	; (8007388 <__libc_init_array+0x40>)
 800735a:	4c0c      	ldr	r4, [pc, #48]	; (800738c <__libc_init_array+0x44>)
 800735c:	f000 fc28 	bl	8007bb0 <_init>
 8007360:	1ba4      	subs	r4, r4, r6
 8007362:	10a4      	asrs	r4, r4, #2
 8007364:	2500      	movs	r5, #0
 8007366:	42a5      	cmp	r5, r4
 8007368:	d105      	bne.n	8007376 <__libc_init_array+0x2e>
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007370:	4798      	blx	r3
 8007372:	3501      	adds	r5, #1
 8007374:	e7ee      	b.n	8007354 <__libc_init_array+0xc>
 8007376:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800737a:	4798      	blx	r3
 800737c:	3501      	adds	r5, #1
 800737e:	e7f2      	b.n	8007366 <__libc_init_array+0x1e>
 8007380:	08007e4c 	.word	0x08007e4c
 8007384:	08007e4c 	.word	0x08007e4c
 8007388:	08007e4c 	.word	0x08007e4c
 800738c:	08007e50 	.word	0x08007e50

08007390 <memcpy>:
 8007390:	b510      	push	{r4, lr}
 8007392:	1e43      	subs	r3, r0, #1
 8007394:	440a      	add	r2, r1
 8007396:	4291      	cmp	r1, r2
 8007398:	d100      	bne.n	800739c <memcpy+0xc>
 800739a:	bd10      	pop	{r4, pc}
 800739c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073a4:	e7f7      	b.n	8007396 <memcpy+0x6>

080073a6 <memset>:
 80073a6:	4402      	add	r2, r0
 80073a8:	4603      	mov	r3, r0
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d100      	bne.n	80073b0 <memset+0xa>
 80073ae:	4770      	bx	lr
 80073b0:	f803 1b01 	strb.w	r1, [r3], #1
 80073b4:	e7f9      	b.n	80073aa <memset+0x4>
	...

080073b8 <siprintf>:
 80073b8:	b40e      	push	{r1, r2, r3}
 80073ba:	b500      	push	{lr}
 80073bc:	b09c      	sub	sp, #112	; 0x70
 80073be:	ab1d      	add	r3, sp, #116	; 0x74
 80073c0:	9002      	str	r0, [sp, #8]
 80073c2:	9006      	str	r0, [sp, #24]
 80073c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073c8:	4809      	ldr	r0, [pc, #36]	; (80073f0 <siprintf+0x38>)
 80073ca:	9107      	str	r1, [sp, #28]
 80073cc:	9104      	str	r1, [sp, #16]
 80073ce:	4909      	ldr	r1, [pc, #36]	; (80073f4 <siprintf+0x3c>)
 80073d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d4:	9105      	str	r1, [sp, #20]
 80073d6:	6800      	ldr	r0, [r0, #0]
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	a902      	add	r1, sp, #8
 80073dc:	f000 f866 	bl	80074ac <_svfiprintf_r>
 80073e0:	9b02      	ldr	r3, [sp, #8]
 80073e2:	2200      	movs	r2, #0
 80073e4:	701a      	strb	r2, [r3, #0]
 80073e6:	b01c      	add	sp, #112	; 0x70
 80073e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073ec:	b003      	add	sp, #12
 80073ee:	4770      	bx	lr
 80073f0:	20000018 	.word	0x20000018
 80073f4:	ffff0208 	.word	0xffff0208

080073f8 <__ssputs_r>:
 80073f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	688e      	ldr	r6, [r1, #8]
 80073fe:	429e      	cmp	r6, r3
 8007400:	4682      	mov	sl, r0
 8007402:	460c      	mov	r4, r1
 8007404:	4690      	mov	r8, r2
 8007406:	4699      	mov	r9, r3
 8007408:	d837      	bhi.n	800747a <__ssputs_r+0x82>
 800740a:	898a      	ldrh	r2, [r1, #12]
 800740c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007410:	d031      	beq.n	8007476 <__ssputs_r+0x7e>
 8007412:	6825      	ldr	r5, [r4, #0]
 8007414:	6909      	ldr	r1, [r1, #16]
 8007416:	1a6f      	subs	r7, r5, r1
 8007418:	6965      	ldr	r5, [r4, #20]
 800741a:	2302      	movs	r3, #2
 800741c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007420:	fb95 f5f3 	sdiv	r5, r5, r3
 8007424:	f109 0301 	add.w	r3, r9, #1
 8007428:	443b      	add	r3, r7
 800742a:	429d      	cmp	r5, r3
 800742c:	bf38      	it	cc
 800742e:	461d      	movcc	r5, r3
 8007430:	0553      	lsls	r3, r2, #21
 8007432:	d530      	bpl.n	8007496 <__ssputs_r+0x9e>
 8007434:	4629      	mov	r1, r5
 8007436:	f000 fb21 	bl	8007a7c <_malloc_r>
 800743a:	4606      	mov	r6, r0
 800743c:	b950      	cbnz	r0, 8007454 <__ssputs_r+0x5c>
 800743e:	230c      	movs	r3, #12
 8007440:	f8ca 3000 	str.w	r3, [sl]
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800744a:	81a3      	strh	r3, [r4, #12]
 800744c:	f04f 30ff 	mov.w	r0, #4294967295
 8007450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007454:	463a      	mov	r2, r7
 8007456:	6921      	ldr	r1, [r4, #16]
 8007458:	f7ff ff9a 	bl	8007390 <memcpy>
 800745c:	89a3      	ldrh	r3, [r4, #12]
 800745e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007466:	81a3      	strh	r3, [r4, #12]
 8007468:	6126      	str	r6, [r4, #16]
 800746a:	6165      	str	r5, [r4, #20]
 800746c:	443e      	add	r6, r7
 800746e:	1bed      	subs	r5, r5, r7
 8007470:	6026      	str	r6, [r4, #0]
 8007472:	60a5      	str	r5, [r4, #8]
 8007474:	464e      	mov	r6, r9
 8007476:	454e      	cmp	r6, r9
 8007478:	d900      	bls.n	800747c <__ssputs_r+0x84>
 800747a:	464e      	mov	r6, r9
 800747c:	4632      	mov	r2, r6
 800747e:	4641      	mov	r1, r8
 8007480:	6820      	ldr	r0, [r4, #0]
 8007482:	f000 fa93 	bl	80079ac <memmove>
 8007486:	68a3      	ldr	r3, [r4, #8]
 8007488:	1b9b      	subs	r3, r3, r6
 800748a:	60a3      	str	r3, [r4, #8]
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	441e      	add	r6, r3
 8007490:	6026      	str	r6, [r4, #0]
 8007492:	2000      	movs	r0, #0
 8007494:	e7dc      	b.n	8007450 <__ssputs_r+0x58>
 8007496:	462a      	mov	r2, r5
 8007498:	f000 fb4a 	bl	8007b30 <_realloc_r>
 800749c:	4606      	mov	r6, r0
 800749e:	2800      	cmp	r0, #0
 80074a0:	d1e2      	bne.n	8007468 <__ssputs_r+0x70>
 80074a2:	6921      	ldr	r1, [r4, #16]
 80074a4:	4650      	mov	r0, sl
 80074a6:	f000 fa9b 	bl	80079e0 <_free_r>
 80074aa:	e7c8      	b.n	800743e <__ssputs_r+0x46>

080074ac <_svfiprintf_r>:
 80074ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	461d      	mov	r5, r3
 80074b2:	898b      	ldrh	r3, [r1, #12]
 80074b4:	061f      	lsls	r7, r3, #24
 80074b6:	b09d      	sub	sp, #116	; 0x74
 80074b8:	4680      	mov	r8, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	4616      	mov	r6, r2
 80074be:	d50f      	bpl.n	80074e0 <_svfiprintf_r+0x34>
 80074c0:	690b      	ldr	r3, [r1, #16]
 80074c2:	b96b      	cbnz	r3, 80074e0 <_svfiprintf_r+0x34>
 80074c4:	2140      	movs	r1, #64	; 0x40
 80074c6:	f000 fad9 	bl	8007a7c <_malloc_r>
 80074ca:	6020      	str	r0, [r4, #0]
 80074cc:	6120      	str	r0, [r4, #16]
 80074ce:	b928      	cbnz	r0, 80074dc <_svfiprintf_r+0x30>
 80074d0:	230c      	movs	r3, #12
 80074d2:	f8c8 3000 	str.w	r3, [r8]
 80074d6:	f04f 30ff 	mov.w	r0, #4294967295
 80074da:	e0c8      	b.n	800766e <_svfiprintf_r+0x1c2>
 80074dc:	2340      	movs	r3, #64	; 0x40
 80074de:	6163      	str	r3, [r4, #20]
 80074e0:	2300      	movs	r3, #0
 80074e2:	9309      	str	r3, [sp, #36]	; 0x24
 80074e4:	2320      	movs	r3, #32
 80074e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074ea:	2330      	movs	r3, #48	; 0x30
 80074ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074f0:	9503      	str	r5, [sp, #12]
 80074f2:	f04f 0b01 	mov.w	fp, #1
 80074f6:	4637      	mov	r7, r6
 80074f8:	463d      	mov	r5, r7
 80074fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80074fe:	b10b      	cbz	r3, 8007504 <_svfiprintf_r+0x58>
 8007500:	2b25      	cmp	r3, #37	; 0x25
 8007502:	d13e      	bne.n	8007582 <_svfiprintf_r+0xd6>
 8007504:	ebb7 0a06 	subs.w	sl, r7, r6
 8007508:	d00b      	beq.n	8007522 <_svfiprintf_r+0x76>
 800750a:	4653      	mov	r3, sl
 800750c:	4632      	mov	r2, r6
 800750e:	4621      	mov	r1, r4
 8007510:	4640      	mov	r0, r8
 8007512:	f7ff ff71 	bl	80073f8 <__ssputs_r>
 8007516:	3001      	adds	r0, #1
 8007518:	f000 80a4 	beq.w	8007664 <_svfiprintf_r+0x1b8>
 800751c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800751e:	4453      	add	r3, sl
 8007520:	9309      	str	r3, [sp, #36]	; 0x24
 8007522:	783b      	ldrb	r3, [r7, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 809d 	beq.w	8007664 <_svfiprintf_r+0x1b8>
 800752a:	2300      	movs	r3, #0
 800752c:	f04f 32ff 	mov.w	r2, #4294967295
 8007530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007534:	9304      	str	r3, [sp, #16]
 8007536:	9307      	str	r3, [sp, #28]
 8007538:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800753c:	931a      	str	r3, [sp, #104]	; 0x68
 800753e:	462f      	mov	r7, r5
 8007540:	2205      	movs	r2, #5
 8007542:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007546:	4850      	ldr	r0, [pc, #320]	; (8007688 <_svfiprintf_r+0x1dc>)
 8007548:	f7f8 fe6a 	bl	8000220 <memchr>
 800754c:	9b04      	ldr	r3, [sp, #16]
 800754e:	b9d0      	cbnz	r0, 8007586 <_svfiprintf_r+0xda>
 8007550:	06d9      	lsls	r1, r3, #27
 8007552:	bf44      	itt	mi
 8007554:	2220      	movmi	r2, #32
 8007556:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800755a:	071a      	lsls	r2, r3, #28
 800755c:	bf44      	itt	mi
 800755e:	222b      	movmi	r2, #43	; 0x2b
 8007560:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007564:	782a      	ldrb	r2, [r5, #0]
 8007566:	2a2a      	cmp	r2, #42	; 0x2a
 8007568:	d015      	beq.n	8007596 <_svfiprintf_r+0xea>
 800756a:	9a07      	ldr	r2, [sp, #28]
 800756c:	462f      	mov	r7, r5
 800756e:	2000      	movs	r0, #0
 8007570:	250a      	movs	r5, #10
 8007572:	4639      	mov	r1, r7
 8007574:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007578:	3b30      	subs	r3, #48	; 0x30
 800757a:	2b09      	cmp	r3, #9
 800757c:	d94d      	bls.n	800761a <_svfiprintf_r+0x16e>
 800757e:	b1b8      	cbz	r0, 80075b0 <_svfiprintf_r+0x104>
 8007580:	e00f      	b.n	80075a2 <_svfiprintf_r+0xf6>
 8007582:	462f      	mov	r7, r5
 8007584:	e7b8      	b.n	80074f8 <_svfiprintf_r+0x4c>
 8007586:	4a40      	ldr	r2, [pc, #256]	; (8007688 <_svfiprintf_r+0x1dc>)
 8007588:	1a80      	subs	r0, r0, r2
 800758a:	fa0b f000 	lsl.w	r0, fp, r0
 800758e:	4318      	orrs	r0, r3
 8007590:	9004      	str	r0, [sp, #16]
 8007592:	463d      	mov	r5, r7
 8007594:	e7d3      	b.n	800753e <_svfiprintf_r+0x92>
 8007596:	9a03      	ldr	r2, [sp, #12]
 8007598:	1d11      	adds	r1, r2, #4
 800759a:	6812      	ldr	r2, [r2, #0]
 800759c:	9103      	str	r1, [sp, #12]
 800759e:	2a00      	cmp	r2, #0
 80075a0:	db01      	blt.n	80075a6 <_svfiprintf_r+0xfa>
 80075a2:	9207      	str	r2, [sp, #28]
 80075a4:	e004      	b.n	80075b0 <_svfiprintf_r+0x104>
 80075a6:	4252      	negs	r2, r2
 80075a8:	f043 0302 	orr.w	r3, r3, #2
 80075ac:	9207      	str	r2, [sp, #28]
 80075ae:	9304      	str	r3, [sp, #16]
 80075b0:	783b      	ldrb	r3, [r7, #0]
 80075b2:	2b2e      	cmp	r3, #46	; 0x2e
 80075b4:	d10c      	bne.n	80075d0 <_svfiprintf_r+0x124>
 80075b6:	787b      	ldrb	r3, [r7, #1]
 80075b8:	2b2a      	cmp	r3, #42	; 0x2a
 80075ba:	d133      	bne.n	8007624 <_svfiprintf_r+0x178>
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	1d1a      	adds	r2, r3, #4
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	9203      	str	r2, [sp, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	bfb8      	it	lt
 80075c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80075cc:	3702      	adds	r7, #2
 80075ce:	9305      	str	r3, [sp, #20]
 80075d0:	4d2e      	ldr	r5, [pc, #184]	; (800768c <_svfiprintf_r+0x1e0>)
 80075d2:	7839      	ldrb	r1, [r7, #0]
 80075d4:	2203      	movs	r2, #3
 80075d6:	4628      	mov	r0, r5
 80075d8:	f7f8 fe22 	bl	8000220 <memchr>
 80075dc:	b138      	cbz	r0, 80075ee <_svfiprintf_r+0x142>
 80075de:	2340      	movs	r3, #64	; 0x40
 80075e0:	1b40      	subs	r0, r0, r5
 80075e2:	fa03 f000 	lsl.w	r0, r3, r0
 80075e6:	9b04      	ldr	r3, [sp, #16]
 80075e8:	4303      	orrs	r3, r0
 80075ea:	3701      	adds	r7, #1
 80075ec:	9304      	str	r3, [sp, #16]
 80075ee:	7839      	ldrb	r1, [r7, #0]
 80075f0:	4827      	ldr	r0, [pc, #156]	; (8007690 <_svfiprintf_r+0x1e4>)
 80075f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075f6:	2206      	movs	r2, #6
 80075f8:	1c7e      	adds	r6, r7, #1
 80075fa:	f7f8 fe11 	bl	8000220 <memchr>
 80075fe:	2800      	cmp	r0, #0
 8007600:	d038      	beq.n	8007674 <_svfiprintf_r+0x1c8>
 8007602:	4b24      	ldr	r3, [pc, #144]	; (8007694 <_svfiprintf_r+0x1e8>)
 8007604:	bb13      	cbnz	r3, 800764c <_svfiprintf_r+0x1a0>
 8007606:	9b03      	ldr	r3, [sp, #12]
 8007608:	3307      	adds	r3, #7
 800760a:	f023 0307 	bic.w	r3, r3, #7
 800760e:	3308      	adds	r3, #8
 8007610:	9303      	str	r3, [sp, #12]
 8007612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007614:	444b      	add	r3, r9
 8007616:	9309      	str	r3, [sp, #36]	; 0x24
 8007618:	e76d      	b.n	80074f6 <_svfiprintf_r+0x4a>
 800761a:	fb05 3202 	mla	r2, r5, r2, r3
 800761e:	2001      	movs	r0, #1
 8007620:	460f      	mov	r7, r1
 8007622:	e7a6      	b.n	8007572 <_svfiprintf_r+0xc6>
 8007624:	2300      	movs	r3, #0
 8007626:	3701      	adds	r7, #1
 8007628:	9305      	str	r3, [sp, #20]
 800762a:	4619      	mov	r1, r3
 800762c:	250a      	movs	r5, #10
 800762e:	4638      	mov	r0, r7
 8007630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007634:	3a30      	subs	r2, #48	; 0x30
 8007636:	2a09      	cmp	r2, #9
 8007638:	d903      	bls.n	8007642 <_svfiprintf_r+0x196>
 800763a:	2b00      	cmp	r3, #0
 800763c:	d0c8      	beq.n	80075d0 <_svfiprintf_r+0x124>
 800763e:	9105      	str	r1, [sp, #20]
 8007640:	e7c6      	b.n	80075d0 <_svfiprintf_r+0x124>
 8007642:	fb05 2101 	mla	r1, r5, r1, r2
 8007646:	2301      	movs	r3, #1
 8007648:	4607      	mov	r7, r0
 800764a:	e7f0      	b.n	800762e <_svfiprintf_r+0x182>
 800764c:	ab03      	add	r3, sp, #12
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	4622      	mov	r2, r4
 8007652:	4b11      	ldr	r3, [pc, #68]	; (8007698 <_svfiprintf_r+0x1ec>)
 8007654:	a904      	add	r1, sp, #16
 8007656:	4640      	mov	r0, r8
 8007658:	f3af 8000 	nop.w
 800765c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007660:	4681      	mov	r9, r0
 8007662:	d1d6      	bne.n	8007612 <_svfiprintf_r+0x166>
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	065b      	lsls	r3, r3, #25
 8007668:	f53f af35 	bmi.w	80074d6 <_svfiprintf_r+0x2a>
 800766c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800766e:	b01d      	add	sp, #116	; 0x74
 8007670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007674:	ab03      	add	r3, sp, #12
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	4622      	mov	r2, r4
 800767a:	4b07      	ldr	r3, [pc, #28]	; (8007698 <_svfiprintf_r+0x1ec>)
 800767c:	a904      	add	r1, sp, #16
 800767e:	4640      	mov	r0, r8
 8007680:	f000 f882 	bl	8007788 <_printf_i>
 8007684:	e7ea      	b.n	800765c <_svfiprintf_r+0x1b0>
 8007686:	bf00      	nop
 8007688:	08007e10 	.word	0x08007e10
 800768c:	08007e16 	.word	0x08007e16
 8007690:	08007e1a 	.word	0x08007e1a
 8007694:	00000000 	.word	0x00000000
 8007698:	080073f9 	.word	0x080073f9

0800769c <_printf_common>:
 800769c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a0:	4691      	mov	r9, r2
 80076a2:	461f      	mov	r7, r3
 80076a4:	688a      	ldr	r2, [r1, #8]
 80076a6:	690b      	ldr	r3, [r1, #16]
 80076a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076ac:	4293      	cmp	r3, r2
 80076ae:	bfb8      	it	lt
 80076b0:	4613      	movlt	r3, r2
 80076b2:	f8c9 3000 	str.w	r3, [r9]
 80076b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076ba:	4606      	mov	r6, r0
 80076bc:	460c      	mov	r4, r1
 80076be:	b112      	cbz	r2, 80076c6 <_printf_common+0x2a>
 80076c0:	3301      	adds	r3, #1
 80076c2:	f8c9 3000 	str.w	r3, [r9]
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	0699      	lsls	r1, r3, #26
 80076ca:	bf42      	ittt	mi
 80076cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80076d0:	3302      	addmi	r3, #2
 80076d2:	f8c9 3000 	strmi.w	r3, [r9]
 80076d6:	6825      	ldr	r5, [r4, #0]
 80076d8:	f015 0506 	ands.w	r5, r5, #6
 80076dc:	d107      	bne.n	80076ee <_printf_common+0x52>
 80076de:	f104 0a19 	add.w	sl, r4, #25
 80076e2:	68e3      	ldr	r3, [r4, #12]
 80076e4:	f8d9 2000 	ldr.w	r2, [r9]
 80076e8:	1a9b      	subs	r3, r3, r2
 80076ea:	42ab      	cmp	r3, r5
 80076ec:	dc28      	bgt.n	8007740 <_printf_common+0xa4>
 80076ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80076f2:	6822      	ldr	r2, [r4, #0]
 80076f4:	3300      	adds	r3, #0
 80076f6:	bf18      	it	ne
 80076f8:	2301      	movne	r3, #1
 80076fa:	0692      	lsls	r2, r2, #26
 80076fc:	d42d      	bmi.n	800775a <_printf_common+0xbe>
 80076fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007702:	4639      	mov	r1, r7
 8007704:	4630      	mov	r0, r6
 8007706:	47c0      	blx	r8
 8007708:	3001      	adds	r0, #1
 800770a:	d020      	beq.n	800774e <_printf_common+0xb2>
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	68e5      	ldr	r5, [r4, #12]
 8007710:	f8d9 2000 	ldr.w	r2, [r9]
 8007714:	f003 0306 	and.w	r3, r3, #6
 8007718:	2b04      	cmp	r3, #4
 800771a:	bf08      	it	eq
 800771c:	1aad      	subeq	r5, r5, r2
 800771e:	68a3      	ldr	r3, [r4, #8]
 8007720:	6922      	ldr	r2, [r4, #16]
 8007722:	bf0c      	ite	eq
 8007724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007728:	2500      	movne	r5, #0
 800772a:	4293      	cmp	r3, r2
 800772c:	bfc4      	itt	gt
 800772e:	1a9b      	subgt	r3, r3, r2
 8007730:	18ed      	addgt	r5, r5, r3
 8007732:	f04f 0900 	mov.w	r9, #0
 8007736:	341a      	adds	r4, #26
 8007738:	454d      	cmp	r5, r9
 800773a:	d11a      	bne.n	8007772 <_printf_common+0xd6>
 800773c:	2000      	movs	r0, #0
 800773e:	e008      	b.n	8007752 <_printf_common+0xb6>
 8007740:	2301      	movs	r3, #1
 8007742:	4652      	mov	r2, sl
 8007744:	4639      	mov	r1, r7
 8007746:	4630      	mov	r0, r6
 8007748:	47c0      	blx	r8
 800774a:	3001      	adds	r0, #1
 800774c:	d103      	bne.n	8007756 <_printf_common+0xba>
 800774e:	f04f 30ff 	mov.w	r0, #4294967295
 8007752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007756:	3501      	adds	r5, #1
 8007758:	e7c3      	b.n	80076e2 <_printf_common+0x46>
 800775a:	18e1      	adds	r1, r4, r3
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	2030      	movs	r0, #48	; 0x30
 8007760:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007764:	4422      	add	r2, r4
 8007766:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800776a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800776e:	3302      	adds	r3, #2
 8007770:	e7c5      	b.n	80076fe <_printf_common+0x62>
 8007772:	2301      	movs	r3, #1
 8007774:	4622      	mov	r2, r4
 8007776:	4639      	mov	r1, r7
 8007778:	4630      	mov	r0, r6
 800777a:	47c0      	blx	r8
 800777c:	3001      	adds	r0, #1
 800777e:	d0e6      	beq.n	800774e <_printf_common+0xb2>
 8007780:	f109 0901 	add.w	r9, r9, #1
 8007784:	e7d8      	b.n	8007738 <_printf_common+0x9c>
	...

08007788 <_printf_i>:
 8007788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800778c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007790:	460c      	mov	r4, r1
 8007792:	7e09      	ldrb	r1, [r1, #24]
 8007794:	b085      	sub	sp, #20
 8007796:	296e      	cmp	r1, #110	; 0x6e
 8007798:	4617      	mov	r7, r2
 800779a:	4606      	mov	r6, r0
 800779c:	4698      	mov	r8, r3
 800779e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077a0:	f000 80b3 	beq.w	800790a <_printf_i+0x182>
 80077a4:	d822      	bhi.n	80077ec <_printf_i+0x64>
 80077a6:	2963      	cmp	r1, #99	; 0x63
 80077a8:	d036      	beq.n	8007818 <_printf_i+0x90>
 80077aa:	d80a      	bhi.n	80077c2 <_printf_i+0x3a>
 80077ac:	2900      	cmp	r1, #0
 80077ae:	f000 80b9 	beq.w	8007924 <_printf_i+0x19c>
 80077b2:	2958      	cmp	r1, #88	; 0x58
 80077b4:	f000 8083 	beq.w	80078be <_printf_i+0x136>
 80077b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80077c0:	e032      	b.n	8007828 <_printf_i+0xa0>
 80077c2:	2964      	cmp	r1, #100	; 0x64
 80077c4:	d001      	beq.n	80077ca <_printf_i+0x42>
 80077c6:	2969      	cmp	r1, #105	; 0x69
 80077c8:	d1f6      	bne.n	80077b8 <_printf_i+0x30>
 80077ca:	6820      	ldr	r0, [r4, #0]
 80077cc:	6813      	ldr	r3, [r2, #0]
 80077ce:	0605      	lsls	r5, r0, #24
 80077d0:	f103 0104 	add.w	r1, r3, #4
 80077d4:	d52a      	bpl.n	800782c <_printf_i+0xa4>
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6011      	str	r1, [r2, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	da03      	bge.n	80077e6 <_printf_i+0x5e>
 80077de:	222d      	movs	r2, #45	; 0x2d
 80077e0:	425b      	negs	r3, r3
 80077e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80077e6:	486f      	ldr	r0, [pc, #444]	; (80079a4 <_printf_i+0x21c>)
 80077e8:	220a      	movs	r2, #10
 80077ea:	e039      	b.n	8007860 <_printf_i+0xd8>
 80077ec:	2973      	cmp	r1, #115	; 0x73
 80077ee:	f000 809d 	beq.w	800792c <_printf_i+0x1a4>
 80077f2:	d808      	bhi.n	8007806 <_printf_i+0x7e>
 80077f4:	296f      	cmp	r1, #111	; 0x6f
 80077f6:	d020      	beq.n	800783a <_printf_i+0xb2>
 80077f8:	2970      	cmp	r1, #112	; 0x70
 80077fa:	d1dd      	bne.n	80077b8 <_printf_i+0x30>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	f043 0320 	orr.w	r3, r3, #32
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	e003      	b.n	800780e <_printf_i+0x86>
 8007806:	2975      	cmp	r1, #117	; 0x75
 8007808:	d017      	beq.n	800783a <_printf_i+0xb2>
 800780a:	2978      	cmp	r1, #120	; 0x78
 800780c:	d1d4      	bne.n	80077b8 <_printf_i+0x30>
 800780e:	2378      	movs	r3, #120	; 0x78
 8007810:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007814:	4864      	ldr	r0, [pc, #400]	; (80079a8 <_printf_i+0x220>)
 8007816:	e055      	b.n	80078c4 <_printf_i+0x13c>
 8007818:	6813      	ldr	r3, [r2, #0]
 800781a:	1d19      	adds	r1, r3, #4
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6011      	str	r1, [r2, #0]
 8007820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007828:	2301      	movs	r3, #1
 800782a:	e08c      	b.n	8007946 <_printf_i+0x1be>
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6011      	str	r1, [r2, #0]
 8007830:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007834:	bf18      	it	ne
 8007836:	b21b      	sxthne	r3, r3
 8007838:	e7cf      	b.n	80077da <_printf_i+0x52>
 800783a:	6813      	ldr	r3, [r2, #0]
 800783c:	6825      	ldr	r5, [r4, #0]
 800783e:	1d18      	adds	r0, r3, #4
 8007840:	6010      	str	r0, [r2, #0]
 8007842:	0628      	lsls	r0, r5, #24
 8007844:	d501      	bpl.n	800784a <_printf_i+0xc2>
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	e002      	b.n	8007850 <_printf_i+0xc8>
 800784a:	0668      	lsls	r0, r5, #25
 800784c:	d5fb      	bpl.n	8007846 <_printf_i+0xbe>
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	4854      	ldr	r0, [pc, #336]	; (80079a4 <_printf_i+0x21c>)
 8007852:	296f      	cmp	r1, #111	; 0x6f
 8007854:	bf14      	ite	ne
 8007856:	220a      	movne	r2, #10
 8007858:	2208      	moveq	r2, #8
 800785a:	2100      	movs	r1, #0
 800785c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007860:	6865      	ldr	r5, [r4, #4]
 8007862:	60a5      	str	r5, [r4, #8]
 8007864:	2d00      	cmp	r5, #0
 8007866:	f2c0 8095 	blt.w	8007994 <_printf_i+0x20c>
 800786a:	6821      	ldr	r1, [r4, #0]
 800786c:	f021 0104 	bic.w	r1, r1, #4
 8007870:	6021      	str	r1, [r4, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d13d      	bne.n	80078f2 <_printf_i+0x16a>
 8007876:	2d00      	cmp	r5, #0
 8007878:	f040 808e 	bne.w	8007998 <_printf_i+0x210>
 800787c:	4665      	mov	r5, ip
 800787e:	2a08      	cmp	r2, #8
 8007880:	d10b      	bne.n	800789a <_printf_i+0x112>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	07db      	lsls	r3, r3, #31
 8007886:	d508      	bpl.n	800789a <_printf_i+0x112>
 8007888:	6923      	ldr	r3, [r4, #16]
 800788a:	6862      	ldr	r2, [r4, #4]
 800788c:	429a      	cmp	r2, r3
 800788e:	bfde      	ittt	le
 8007890:	2330      	movle	r3, #48	; 0x30
 8007892:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007896:	f105 35ff 	addle.w	r5, r5, #4294967295
 800789a:	ebac 0305 	sub.w	r3, ip, r5
 800789e:	6123      	str	r3, [r4, #16]
 80078a0:	f8cd 8000 	str.w	r8, [sp]
 80078a4:	463b      	mov	r3, r7
 80078a6:	aa03      	add	r2, sp, #12
 80078a8:	4621      	mov	r1, r4
 80078aa:	4630      	mov	r0, r6
 80078ac:	f7ff fef6 	bl	800769c <_printf_common>
 80078b0:	3001      	adds	r0, #1
 80078b2:	d14d      	bne.n	8007950 <_printf_i+0x1c8>
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	b005      	add	sp, #20
 80078ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078be:	4839      	ldr	r0, [pc, #228]	; (80079a4 <_printf_i+0x21c>)
 80078c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80078c4:	6813      	ldr	r3, [r2, #0]
 80078c6:	6821      	ldr	r1, [r4, #0]
 80078c8:	1d1d      	adds	r5, r3, #4
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6015      	str	r5, [r2, #0]
 80078ce:	060a      	lsls	r2, r1, #24
 80078d0:	d50b      	bpl.n	80078ea <_printf_i+0x162>
 80078d2:	07ca      	lsls	r2, r1, #31
 80078d4:	bf44      	itt	mi
 80078d6:	f041 0120 	orrmi.w	r1, r1, #32
 80078da:	6021      	strmi	r1, [r4, #0]
 80078dc:	b91b      	cbnz	r3, 80078e6 <_printf_i+0x15e>
 80078de:	6822      	ldr	r2, [r4, #0]
 80078e0:	f022 0220 	bic.w	r2, r2, #32
 80078e4:	6022      	str	r2, [r4, #0]
 80078e6:	2210      	movs	r2, #16
 80078e8:	e7b7      	b.n	800785a <_printf_i+0xd2>
 80078ea:	064d      	lsls	r5, r1, #25
 80078ec:	bf48      	it	mi
 80078ee:	b29b      	uxthmi	r3, r3
 80078f0:	e7ef      	b.n	80078d2 <_printf_i+0x14a>
 80078f2:	4665      	mov	r5, ip
 80078f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80078f8:	fb02 3311 	mls	r3, r2, r1, r3
 80078fc:	5cc3      	ldrb	r3, [r0, r3]
 80078fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007902:	460b      	mov	r3, r1
 8007904:	2900      	cmp	r1, #0
 8007906:	d1f5      	bne.n	80078f4 <_printf_i+0x16c>
 8007908:	e7b9      	b.n	800787e <_printf_i+0xf6>
 800790a:	6813      	ldr	r3, [r2, #0]
 800790c:	6825      	ldr	r5, [r4, #0]
 800790e:	6961      	ldr	r1, [r4, #20]
 8007910:	1d18      	adds	r0, r3, #4
 8007912:	6010      	str	r0, [r2, #0]
 8007914:	0628      	lsls	r0, r5, #24
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	d501      	bpl.n	800791e <_printf_i+0x196>
 800791a:	6019      	str	r1, [r3, #0]
 800791c:	e002      	b.n	8007924 <_printf_i+0x19c>
 800791e:	066a      	lsls	r2, r5, #25
 8007920:	d5fb      	bpl.n	800791a <_printf_i+0x192>
 8007922:	8019      	strh	r1, [r3, #0]
 8007924:	2300      	movs	r3, #0
 8007926:	6123      	str	r3, [r4, #16]
 8007928:	4665      	mov	r5, ip
 800792a:	e7b9      	b.n	80078a0 <_printf_i+0x118>
 800792c:	6813      	ldr	r3, [r2, #0]
 800792e:	1d19      	adds	r1, r3, #4
 8007930:	6011      	str	r1, [r2, #0]
 8007932:	681d      	ldr	r5, [r3, #0]
 8007934:	6862      	ldr	r2, [r4, #4]
 8007936:	2100      	movs	r1, #0
 8007938:	4628      	mov	r0, r5
 800793a:	f7f8 fc71 	bl	8000220 <memchr>
 800793e:	b108      	cbz	r0, 8007944 <_printf_i+0x1bc>
 8007940:	1b40      	subs	r0, r0, r5
 8007942:	6060      	str	r0, [r4, #4]
 8007944:	6863      	ldr	r3, [r4, #4]
 8007946:	6123      	str	r3, [r4, #16]
 8007948:	2300      	movs	r3, #0
 800794a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800794e:	e7a7      	b.n	80078a0 <_printf_i+0x118>
 8007950:	6923      	ldr	r3, [r4, #16]
 8007952:	462a      	mov	r2, r5
 8007954:	4639      	mov	r1, r7
 8007956:	4630      	mov	r0, r6
 8007958:	47c0      	blx	r8
 800795a:	3001      	adds	r0, #1
 800795c:	d0aa      	beq.n	80078b4 <_printf_i+0x12c>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	079b      	lsls	r3, r3, #30
 8007962:	d413      	bmi.n	800798c <_printf_i+0x204>
 8007964:	68e0      	ldr	r0, [r4, #12]
 8007966:	9b03      	ldr	r3, [sp, #12]
 8007968:	4298      	cmp	r0, r3
 800796a:	bfb8      	it	lt
 800796c:	4618      	movlt	r0, r3
 800796e:	e7a3      	b.n	80078b8 <_printf_i+0x130>
 8007970:	2301      	movs	r3, #1
 8007972:	464a      	mov	r2, r9
 8007974:	4639      	mov	r1, r7
 8007976:	4630      	mov	r0, r6
 8007978:	47c0      	blx	r8
 800797a:	3001      	adds	r0, #1
 800797c:	d09a      	beq.n	80078b4 <_printf_i+0x12c>
 800797e:	3501      	adds	r5, #1
 8007980:	68e3      	ldr	r3, [r4, #12]
 8007982:	9a03      	ldr	r2, [sp, #12]
 8007984:	1a9b      	subs	r3, r3, r2
 8007986:	42ab      	cmp	r3, r5
 8007988:	dcf2      	bgt.n	8007970 <_printf_i+0x1e8>
 800798a:	e7eb      	b.n	8007964 <_printf_i+0x1dc>
 800798c:	2500      	movs	r5, #0
 800798e:	f104 0919 	add.w	r9, r4, #25
 8007992:	e7f5      	b.n	8007980 <_printf_i+0x1f8>
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1ac      	bne.n	80078f2 <_printf_i+0x16a>
 8007998:	7803      	ldrb	r3, [r0, #0]
 800799a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800799e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079a2:	e76c      	b.n	800787e <_printf_i+0xf6>
 80079a4:	08007e21 	.word	0x08007e21
 80079a8:	08007e32 	.word	0x08007e32

080079ac <memmove>:
 80079ac:	4288      	cmp	r0, r1
 80079ae:	b510      	push	{r4, lr}
 80079b0:	eb01 0302 	add.w	r3, r1, r2
 80079b4:	d807      	bhi.n	80079c6 <memmove+0x1a>
 80079b6:	1e42      	subs	r2, r0, #1
 80079b8:	4299      	cmp	r1, r3
 80079ba:	d00a      	beq.n	80079d2 <memmove+0x26>
 80079bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80079c4:	e7f8      	b.n	80079b8 <memmove+0xc>
 80079c6:	4283      	cmp	r3, r0
 80079c8:	d9f5      	bls.n	80079b6 <memmove+0xa>
 80079ca:	1881      	adds	r1, r0, r2
 80079cc:	1ad2      	subs	r2, r2, r3
 80079ce:	42d3      	cmn	r3, r2
 80079d0:	d100      	bne.n	80079d4 <memmove+0x28>
 80079d2:	bd10      	pop	{r4, pc}
 80079d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80079dc:	e7f7      	b.n	80079ce <memmove+0x22>
	...

080079e0 <_free_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4605      	mov	r5, r0
 80079e4:	2900      	cmp	r1, #0
 80079e6:	d045      	beq.n	8007a74 <_free_r+0x94>
 80079e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ec:	1f0c      	subs	r4, r1, #4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	bfb8      	it	lt
 80079f2:	18e4      	addlt	r4, r4, r3
 80079f4:	f000 f8d2 	bl	8007b9c <__malloc_lock>
 80079f8:	4a1f      	ldr	r2, [pc, #124]	; (8007a78 <_free_r+0x98>)
 80079fa:	6813      	ldr	r3, [r2, #0]
 80079fc:	4610      	mov	r0, r2
 80079fe:	b933      	cbnz	r3, 8007a0e <_free_r+0x2e>
 8007a00:	6063      	str	r3, [r4, #4]
 8007a02:	6014      	str	r4, [r2, #0]
 8007a04:	4628      	mov	r0, r5
 8007a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a0a:	f000 b8c8 	b.w	8007b9e <__malloc_unlock>
 8007a0e:	42a3      	cmp	r3, r4
 8007a10:	d90c      	bls.n	8007a2c <_free_r+0x4c>
 8007a12:	6821      	ldr	r1, [r4, #0]
 8007a14:	1862      	adds	r2, r4, r1
 8007a16:	4293      	cmp	r3, r2
 8007a18:	bf04      	itt	eq
 8007a1a:	681a      	ldreq	r2, [r3, #0]
 8007a1c:	685b      	ldreq	r3, [r3, #4]
 8007a1e:	6063      	str	r3, [r4, #4]
 8007a20:	bf04      	itt	eq
 8007a22:	1852      	addeq	r2, r2, r1
 8007a24:	6022      	streq	r2, [r4, #0]
 8007a26:	6004      	str	r4, [r0, #0]
 8007a28:	e7ec      	b.n	8007a04 <_free_r+0x24>
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	b10a      	cbz	r2, 8007a34 <_free_r+0x54>
 8007a30:	42a2      	cmp	r2, r4
 8007a32:	d9fa      	bls.n	8007a2a <_free_r+0x4a>
 8007a34:	6819      	ldr	r1, [r3, #0]
 8007a36:	1858      	adds	r0, r3, r1
 8007a38:	42a0      	cmp	r0, r4
 8007a3a:	d10b      	bne.n	8007a54 <_free_r+0x74>
 8007a3c:	6820      	ldr	r0, [r4, #0]
 8007a3e:	4401      	add	r1, r0
 8007a40:	1858      	adds	r0, r3, r1
 8007a42:	4282      	cmp	r2, r0
 8007a44:	6019      	str	r1, [r3, #0]
 8007a46:	d1dd      	bne.n	8007a04 <_free_r+0x24>
 8007a48:	6810      	ldr	r0, [r2, #0]
 8007a4a:	6852      	ldr	r2, [r2, #4]
 8007a4c:	605a      	str	r2, [r3, #4]
 8007a4e:	4401      	add	r1, r0
 8007a50:	6019      	str	r1, [r3, #0]
 8007a52:	e7d7      	b.n	8007a04 <_free_r+0x24>
 8007a54:	d902      	bls.n	8007a5c <_free_r+0x7c>
 8007a56:	230c      	movs	r3, #12
 8007a58:	602b      	str	r3, [r5, #0]
 8007a5a:	e7d3      	b.n	8007a04 <_free_r+0x24>
 8007a5c:	6820      	ldr	r0, [r4, #0]
 8007a5e:	1821      	adds	r1, r4, r0
 8007a60:	428a      	cmp	r2, r1
 8007a62:	bf04      	itt	eq
 8007a64:	6811      	ldreq	r1, [r2, #0]
 8007a66:	6852      	ldreq	r2, [r2, #4]
 8007a68:	6062      	str	r2, [r4, #4]
 8007a6a:	bf04      	itt	eq
 8007a6c:	1809      	addeq	r1, r1, r0
 8007a6e:	6021      	streq	r1, [r4, #0]
 8007a70:	605c      	str	r4, [r3, #4]
 8007a72:	e7c7      	b.n	8007a04 <_free_r+0x24>
 8007a74:	bd38      	pop	{r3, r4, r5, pc}
 8007a76:	bf00      	nop
 8007a78:	200049a4 	.word	0x200049a4

08007a7c <_malloc_r>:
 8007a7c:	b570      	push	{r4, r5, r6, lr}
 8007a7e:	1ccd      	adds	r5, r1, #3
 8007a80:	f025 0503 	bic.w	r5, r5, #3
 8007a84:	3508      	adds	r5, #8
 8007a86:	2d0c      	cmp	r5, #12
 8007a88:	bf38      	it	cc
 8007a8a:	250c      	movcc	r5, #12
 8007a8c:	2d00      	cmp	r5, #0
 8007a8e:	4606      	mov	r6, r0
 8007a90:	db01      	blt.n	8007a96 <_malloc_r+0x1a>
 8007a92:	42a9      	cmp	r1, r5
 8007a94:	d903      	bls.n	8007a9e <_malloc_r+0x22>
 8007a96:	230c      	movs	r3, #12
 8007a98:	6033      	str	r3, [r6, #0]
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	bd70      	pop	{r4, r5, r6, pc}
 8007a9e:	f000 f87d 	bl	8007b9c <__malloc_lock>
 8007aa2:	4a21      	ldr	r2, [pc, #132]	; (8007b28 <_malloc_r+0xac>)
 8007aa4:	6814      	ldr	r4, [r2, #0]
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	b991      	cbnz	r1, 8007ad0 <_malloc_r+0x54>
 8007aaa:	4c20      	ldr	r4, [pc, #128]	; (8007b2c <_malloc_r+0xb0>)
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	b91b      	cbnz	r3, 8007ab8 <_malloc_r+0x3c>
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	f000 f863 	bl	8007b7c <_sbrk_r>
 8007ab6:	6020      	str	r0, [r4, #0]
 8007ab8:	4629      	mov	r1, r5
 8007aba:	4630      	mov	r0, r6
 8007abc:	f000 f85e 	bl	8007b7c <_sbrk_r>
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	d124      	bne.n	8007b0e <_malloc_r+0x92>
 8007ac4:	230c      	movs	r3, #12
 8007ac6:	6033      	str	r3, [r6, #0]
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f000 f868 	bl	8007b9e <__malloc_unlock>
 8007ace:	e7e4      	b.n	8007a9a <_malloc_r+0x1e>
 8007ad0:	680b      	ldr	r3, [r1, #0]
 8007ad2:	1b5b      	subs	r3, r3, r5
 8007ad4:	d418      	bmi.n	8007b08 <_malloc_r+0x8c>
 8007ad6:	2b0b      	cmp	r3, #11
 8007ad8:	d90f      	bls.n	8007afa <_malloc_r+0x7e>
 8007ada:	600b      	str	r3, [r1, #0]
 8007adc:	50cd      	str	r5, [r1, r3]
 8007ade:	18cc      	adds	r4, r1, r3
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f000 f85c 	bl	8007b9e <__malloc_unlock>
 8007ae6:	f104 000b 	add.w	r0, r4, #11
 8007aea:	1d23      	adds	r3, r4, #4
 8007aec:	f020 0007 	bic.w	r0, r0, #7
 8007af0:	1ac3      	subs	r3, r0, r3
 8007af2:	d0d3      	beq.n	8007a9c <_malloc_r+0x20>
 8007af4:	425a      	negs	r2, r3
 8007af6:	50e2      	str	r2, [r4, r3]
 8007af8:	e7d0      	b.n	8007a9c <_malloc_r+0x20>
 8007afa:	428c      	cmp	r4, r1
 8007afc:	684b      	ldr	r3, [r1, #4]
 8007afe:	bf16      	itet	ne
 8007b00:	6063      	strne	r3, [r4, #4]
 8007b02:	6013      	streq	r3, [r2, #0]
 8007b04:	460c      	movne	r4, r1
 8007b06:	e7eb      	b.n	8007ae0 <_malloc_r+0x64>
 8007b08:	460c      	mov	r4, r1
 8007b0a:	6849      	ldr	r1, [r1, #4]
 8007b0c:	e7cc      	b.n	8007aa8 <_malloc_r+0x2c>
 8007b0e:	1cc4      	adds	r4, r0, #3
 8007b10:	f024 0403 	bic.w	r4, r4, #3
 8007b14:	42a0      	cmp	r0, r4
 8007b16:	d005      	beq.n	8007b24 <_malloc_r+0xa8>
 8007b18:	1a21      	subs	r1, r4, r0
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f000 f82e 	bl	8007b7c <_sbrk_r>
 8007b20:	3001      	adds	r0, #1
 8007b22:	d0cf      	beq.n	8007ac4 <_malloc_r+0x48>
 8007b24:	6025      	str	r5, [r4, #0]
 8007b26:	e7db      	b.n	8007ae0 <_malloc_r+0x64>
 8007b28:	200049a4 	.word	0x200049a4
 8007b2c:	200049a8 	.word	0x200049a8

08007b30 <_realloc_r>:
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	4607      	mov	r7, r0
 8007b34:	4614      	mov	r4, r2
 8007b36:	460e      	mov	r6, r1
 8007b38:	b921      	cbnz	r1, 8007b44 <_realloc_r+0x14>
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007b40:	f7ff bf9c 	b.w	8007a7c <_malloc_r>
 8007b44:	b922      	cbnz	r2, 8007b50 <_realloc_r+0x20>
 8007b46:	f7ff ff4b 	bl	80079e0 <_free_r>
 8007b4a:	4625      	mov	r5, r4
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b50:	f000 f826 	bl	8007ba0 <_malloc_usable_size_r>
 8007b54:	42a0      	cmp	r0, r4
 8007b56:	d20f      	bcs.n	8007b78 <_realloc_r+0x48>
 8007b58:	4621      	mov	r1, r4
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	f7ff ff8e 	bl	8007a7c <_malloc_r>
 8007b60:	4605      	mov	r5, r0
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d0f2      	beq.n	8007b4c <_realloc_r+0x1c>
 8007b66:	4631      	mov	r1, r6
 8007b68:	4622      	mov	r2, r4
 8007b6a:	f7ff fc11 	bl	8007390 <memcpy>
 8007b6e:	4631      	mov	r1, r6
 8007b70:	4638      	mov	r0, r7
 8007b72:	f7ff ff35 	bl	80079e0 <_free_r>
 8007b76:	e7e9      	b.n	8007b4c <_realloc_r+0x1c>
 8007b78:	4635      	mov	r5, r6
 8007b7a:	e7e7      	b.n	8007b4c <_realloc_r+0x1c>

08007b7c <_sbrk_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4c06      	ldr	r4, [pc, #24]	; (8007b98 <_sbrk_r+0x1c>)
 8007b80:	2300      	movs	r3, #0
 8007b82:	4605      	mov	r5, r0
 8007b84:	4608      	mov	r0, r1
 8007b86:	6023      	str	r3, [r4, #0]
 8007b88:	f7f9 fabc 	bl	8001104 <_sbrk>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	d102      	bne.n	8007b96 <_sbrk_r+0x1a>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	b103      	cbz	r3, 8007b96 <_sbrk_r+0x1a>
 8007b94:	602b      	str	r3, [r5, #0]
 8007b96:	bd38      	pop	{r3, r4, r5, pc}
 8007b98:	20004edc 	.word	0x20004edc

08007b9c <__malloc_lock>:
 8007b9c:	4770      	bx	lr

08007b9e <__malloc_unlock>:
 8007b9e:	4770      	bx	lr

08007ba0 <_malloc_usable_size_r>:
 8007ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ba4:	1f18      	subs	r0, r3, #4
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bfbc      	itt	lt
 8007baa:	580b      	ldrlt	r3, [r1, r0]
 8007bac:	18c0      	addlt	r0, r0, r3
 8007bae:	4770      	bx	lr

08007bb0 <_init>:
 8007bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb2:	bf00      	nop
 8007bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb6:	bc08      	pop	{r3}
 8007bb8:	469e      	mov	lr, r3
 8007bba:	4770      	bx	lr

08007bbc <_fini>:
 8007bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bbe:	bf00      	nop
 8007bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bc2:	bc08      	pop	{r3}
 8007bc4:	469e      	mov	lr, r3
 8007bc6:	4770      	bx	lr
