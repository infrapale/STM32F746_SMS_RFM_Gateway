
STM32F746_SMS_RFM_Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b28  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08007cf8  08007cf8  00017cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008024  08008024  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008024  08008024  00018024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800802c  0800802c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800802c  0800802c  0001802c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008030  08008030  00018030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005740  20000074  080080a8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200057b4  080080a8  000257b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020695  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e72  00000000  00000000  00040739  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001888  00000000  00000000  000445b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016b0  00000000  00000000  00045e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028bae  00000000  00000000  000474e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014cea  00000000  00000000  00070096  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fb3fd  00000000  00000000  00084d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018017d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069ac  00000000  00000000  001801f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ce0 	.word	0x08007ce0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007ce0 	.word	0x08007ce0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <ConsoleInitialize>:
	uint32_t rd_timeout;
} console;

const char newline_str[] =  "\r\n";

void ConsoleInitialize(UART_HandleTypeDef *uart_ptr){
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    console.p_uart     = uart_ptr;
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <ConsoleInitialize+0x28>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6013      	str	r3, [r2, #0]
	console.priority   = development;
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <ConsoleInitialize+0x28>)
 80005d0:	2232      	movs	r2, #50	; 0x32
 80005d2:	711a      	strb	r2, [r3, #4]
	console.rd_timeout = 5000;
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <ConsoleInitialize+0x28>)
 80005d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80005da:	609a      	str	r2, [r3, #8]
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	200049a4 	.word	0x200049a4

080005ec <ConsoleWr>:
void ConsoleSetPriority(enum console_priority c_p){
	console.priority = 	c_p;
}

void ConsoleWr(enum console_priority c_priority, char *txt, uint8_t newline){
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
	//if (c_priority >= console.priority){
	if CONSOLE_PRIORITY_IS_OK(c_priority){
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <ConsoleWr+0x4c>)
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	79fa      	ldrb	r2, [r7, #7]
 8000602:	429a      	cmp	r2, r3
 8000604:	d313      	bcc.n	800062e <ConsoleWr+0x42>
		HAL_UART_Transmit(console.p_uart, (uint8_t*)txt, strlen(txt),HAL_MAX_DELAY);
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <ConsoleWr+0x4c>)
 8000608:	681c      	ldr	r4, [r3, #0]
 800060a:	6838      	ldr	r0, [r7, #0]
 800060c:	f7ff fe00 	bl	8000210 <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	b29a      	uxth	r2, r3
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	6839      	ldr	r1, [r7, #0]
 800061a:	4620      	mov	r0, r4
 800061c:	f002 fd82 	bl	8003124 <HAL_UART_Transmit>
		if (newline) {
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d003      	beq.n	800062e <ConsoleWr+0x42>
			ConsoleNewline(c_priority);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f807 	bl	800063c <ConsoleNewline>
		}
	}
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bd90      	pop	{r4, r7, pc}
 8000636:	bf00      	nop
 8000638:	200049a4 	.word	0x200049a4

0800063c <ConsoleNewline>:
	if CONSOLE_PRIORITY_IS_OK(c_priority){
		HAL_UART_Transmit(console.p_uart, (char *) &c, 1,HAL_MAX_DELAY);
	}
}

void ConsoleNewline(enum console_priority c_priority){
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
	if (c_priority >= console.priority){
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <ConsoleNewline+0x2c>)
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	79fa      	ldrb	r2, [r7, #7]
 800064c:	429a      	cmp	r2, r3
 800064e:	d307      	bcc.n	8000660 <ConsoleNewline+0x24>
    	HAL_UART_Transmit(console.p_uart, (uint8_t*)newline_str, strlen( newline_str), HAL_MAX_DELAY);
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <ConsoleNewline+0x2c>)
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	2202      	movs	r2, #2
 800065a:	4904      	ldr	r1, [pc, #16]	; (800066c <ConsoleNewline+0x30>)
 800065c:	f002 fd62 	bl	8003124 <HAL_UART_Transmit>
	}
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200049a4 	.word	0x200049a4
 800066c:	08007e68 	.word	0x08007e68

08000670 <ConsoleWrDec>:

void ConsoleWrDec(enum console_priority c_priority, char *pre_txt, uint16_t value ,char *post_txt, uint8_t newline){
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b08b      	sub	sp, #44	; 0x2c
 8000674:	af00      	add	r7, sp, #0
 8000676:	60b9      	str	r1, [r7, #8]
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
 800067e:	4613      	mov	r3, r2
 8000680:	81bb      	strh	r3, [r7, #12]
	if CONSOLE_PRIORITY_IS_OK(c_priority){
 8000682:	4b21      	ldr	r3, [pc, #132]	; (8000708 <ConsoleWrDec+0x98>)
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	7bfa      	ldrb	r2, [r7, #15]
 8000688:	429a      	cmp	r2, r3
 800068a:	d338      	bcc.n	80006fe <ConsoleWrDec+0x8e>
		char value_str[VALUE_TEXT_LEN];
		sprintf(value_str,"%d", value);
 800068c:	89ba      	ldrh	r2, [r7, #12]
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	491e      	ldr	r1, [pc, #120]	; (800070c <ConsoleWrDec+0x9c>)
 8000694:	4618      	mov	r0, r3
 8000696:	f006 ff27 	bl	80074e8 <siprintf>
		HAL_UART_Transmit(console.p_uart, (uint8_t*)pre_txt, strlen(pre_txt),HAL_MAX_DELAY);
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <ConsoleWrDec+0x98>)
 800069c:	681c      	ldr	r4, [r3, #0]
 800069e:	68b8      	ldr	r0, [r7, #8]
 80006a0:	f7ff fdb6 	bl	8000210 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	68b9      	ldr	r1, [r7, #8]
 80006ae:	4620      	mov	r0, r4
 80006b0:	f002 fd38 	bl	8003124 <HAL_UART_Transmit>
		HAL_UART_Transmit(console.p_uart, (uint8_t*)value_str, strlen(value_str),HAL_MAX_DELAY);
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <ConsoleWrDec+0x98>)
 80006b6:	681c      	ldr	r4, [r3, #0]
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fda7 	bl	8000210 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	f107 0114 	add.w	r1, r7, #20
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	4620      	mov	r0, r4
 80006d0:	f002 fd28 	bl	8003124 <HAL_UART_Transmit>
		HAL_UART_Transmit(console.p_uart, (uint8_t*)post_txt, strlen(post_txt),HAL_MAX_DELAY);
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <ConsoleWrDec+0x98>)
 80006d6:	681c      	ldr	r4, [r3, #0]
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff fd99 	bl	8000210 <strlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	4620      	mov	r0, r4
 80006ea:	f002 fd1b 	bl	8003124 <HAL_UART_Transmit>
		if (newline) {
 80006ee:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d003      	beq.n	80006fe <ConsoleWrDec+0x8e>
			ConsoleNewline(c_priority);
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff9f 	bl	800063c <ConsoleNewline>
		}
	}
}
 80006fe:	bf00      	nop
 8000700:	372c      	adds	r7, #44	; 0x2c
 8000702:	46bd      	mov	sp, r7
 8000704:	bd90      	pop	{r4, r7, pc}
 8000706:	bf00      	nop
 8000708:	200049a4 	.word	0x200049a4
 800070c:	08007cf8 	.word	0x08007cf8

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000716:	f000 fd26 	bl	8001166 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071a:	f000 f8e7 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071e:	f000 f9d3 	bl	8000ac8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000722:	f000 f973 	bl	8000a0c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000726:	f000 f9a1 	bl	8000a6c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  msg_initialize();
 800072a:	f000 fb17 	bl	8000d5c <msg_initialize>
  uint8_t cbuf[32];
  //uint8_t *pdata = cbuf;
  //HAL_StatusTypeDef uart_status;


  ConsoleInitialize(&huart3);
 800072e:	4848      	ldr	r0, [pc, #288]	; (8000850 <main+0x140>)
 8000730:	f7ff ff46 	bl	80005c0 <ConsoleInitialize>

  ConsoleWr(development, "https://github.com/infrapale/STM32F746_SMS_RFM_Gateway", 1);
 8000734:	2201      	movs	r2, #1
 8000736:	4947      	ldr	r1, [pc, #284]	; (8000854 <main+0x144>)
 8000738:	2032      	movs	r0, #50	; 0x32
 800073a:	f7ff ff57 	bl	80005ec <ConsoleWr>
  ConsoleWrDec(development, "Elaman tarkoitus on ", 42 ,".", 1);
 800073e:	2301      	movs	r3, #1
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	4b45      	ldr	r3, [pc, #276]	; (8000858 <main+0x148>)
 8000744:	222a      	movs	r2, #42	; 0x2a
 8000746:	4945      	ldr	r1, [pc, #276]	; (800085c <main+0x14c>)
 8000748:	2032      	movs	r0, #50	; 0x32
 800074a:	f7ff ff91 	bl	8000670 <ConsoleWrDec>

  ConsoleWrDec(development, "Free messages= ", msg_free_rows(),".", 1);
 800074e:	f000 fb11 	bl	8000d74 <msg_free_rows>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	2301      	movs	r3, #1
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	4b3f      	ldr	r3, [pc, #252]	; (8000858 <main+0x148>)
 800075c:	4940      	ldr	r1, [pc, #256]	; (8000860 <main+0x150>)
 800075e:	2032      	movs	r0, #50	; 0x32
 8000760:	f7ff ff86 	bl	8000670 <ConsoleWrDec>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000764:	f003 fdb4 	bl	80042d0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of MsgHandlerSema */
  MsgHandlerSemaHandle = osSemaphoreNew(1, 1, &MsgHandlerSema_attributes);
 8000768:	4a3e      	ldr	r2, [pc, #248]	; (8000864 <main+0x154>)
 800076a:	2101      	movs	r1, #1
 800076c:	2001      	movs	r0, #1
 800076e:	f003 ffc7 	bl	8004700 <osSemaphoreNew>
 8000772:	4602      	mov	r2, r0
 8000774:	4b3c      	ldr	r3, [pc, #240]	; (8000868 <main+0x158>)
 8000776:	601a      	str	r2, [r3, #0]

  /* creation of SmsHandlerSema */
  SmsHandlerSemaHandle = osSemaphoreNew(1, 1, &SmsHandlerSema_attributes);
 8000778:	4a3c      	ldr	r2, [pc, #240]	; (800086c <main+0x15c>)
 800077a:	2101      	movs	r1, #1
 800077c:	2001      	movs	r0, #1
 800077e:	f003 ffbf 	bl	8004700 <osSemaphoreNew>
 8000782:	4602      	mov	r2, r0
 8000784:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <main+0x160>)
 8000786:	601a      	str	r2, [r3, #0]

  /* creation of RadioHandlerSema */
  RadioHandlerSemaHandle = osSemaphoreNew(1, 1, &RadioHandlerSema_attributes);
 8000788:	4a3a      	ldr	r2, [pc, #232]	; (8000874 <main+0x164>)
 800078a:	2101      	movs	r1, #1
 800078c:	2001      	movs	r0, #1
 800078e:	f003 ffb7 	bl	8004700 <osSemaphoreNew>
 8000792:	4602      	mov	r2, r0
 8000794:	4b38      	ldr	r3, [pc, #224]	; (8000878 <main+0x168>)
 8000796:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerScanKeypad */
  TimerScanKeypadHandle = osTimerNew(CallbackScanKeypad, osTimerPeriodic, NULL, &TimerScanKeypad_attributes);
 8000798:	4b38      	ldr	r3, [pc, #224]	; (800087c <main+0x16c>)
 800079a:	2200      	movs	r2, #0
 800079c:	2101      	movs	r1, #1
 800079e:	4838      	ldr	r0, [pc, #224]	; (8000880 <main+0x170>)
 80007a0:	f003 feea 	bl	8004578 <osTimerNew>
 80007a4:	4602      	mov	r2, r0
 80007a6:	4b37      	ldr	r3, [pc, #220]	; (8000884 <main+0x174>)
 80007a8:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SendRadioQueue */
  SendRadioQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &SendRadioQueue_attributes);
 80007aa:	4a37      	ldr	r2, [pc, #220]	; (8000888 <main+0x178>)
 80007ac:	2101      	movs	r1, #1
 80007ae:	2010      	movs	r0, #16
 80007b0:	f004 f844 	bl	800483c <osMessageQueueNew>
 80007b4:	4602      	mov	r2, r0
 80007b6:	4b35      	ldr	r3, [pc, #212]	; (800088c <main+0x17c>)
 80007b8:	601a      	str	r2, [r3, #0]

  /* creation of Queue02 */
  Queue02Handle = osMessageQueueNew (16, sizeof(Data), &Queue02_attributes);
 80007ba:	4a35      	ldr	r2, [pc, #212]	; (8000890 <main+0x180>)
 80007bc:	2104      	movs	r1, #4
 80007be:	2010      	movs	r0, #16
 80007c0:	f004 f83c 	bl	800483c <osMessageQueueNew>
 80007c4:	4602      	mov	r2, r0
 80007c6:	4b33      	ldr	r3, [pc, #204]	; (8000894 <main+0x184>)
 80007c8:	601a      	str	r2, [r3, #0]

  /* creation of ReceiveRadioQueue */
  ReceiveRadioQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &ReceiveRadioQueue_attributes);
 80007ca:	4a33      	ldr	r2, [pc, #204]	; (8000898 <main+0x188>)
 80007cc:	2101      	movs	r1, #1
 80007ce:	2010      	movs	r0, #16
 80007d0:	f004 f834 	bl	800483c <osMessageQueueNew>
 80007d4:	4602      	mov	r2, r0
 80007d6:	4b31      	ldr	r3, [pc, #196]	; (800089c <main+0x18c>)
 80007d8:	601a      	str	r2, [r3, #0]

  /* creation of SendSmsQueue */
  SendSmsQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &SendSmsQueue_attributes);
 80007da:	4a31      	ldr	r2, [pc, #196]	; (80008a0 <main+0x190>)
 80007dc:	2101      	movs	r1, #1
 80007de:	2010      	movs	r0, #16
 80007e0:	f004 f82c 	bl	800483c <osMessageQueueNew>
 80007e4:	4602      	mov	r2, r0
 80007e6:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <main+0x194>)
 80007e8:	601a      	str	r2, [r3, #0]

  /* creation of ReceiveSmsQueue */
  ReceiveSmsQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &ReceiveSmsQueue_attributes);
 80007ea:	4a2f      	ldr	r2, [pc, #188]	; (80008a8 <main+0x198>)
 80007ec:	2101      	movs	r1, #1
 80007ee:	2010      	movs	r0, #16
 80007f0:	f004 f824 	bl	800483c <osMessageQueueNew>
 80007f4:	4602      	mov	r2, r0
 80007f6:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <main+0x19c>)
 80007f8:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007fa:	4a2d      	ldr	r2, [pc, #180]	; (80008b0 <main+0x1a0>)
 80007fc:	2100      	movs	r1, #0
 80007fe:	482d      	ldr	r0, [pc, #180]	; (80008b4 <main+0x1a4>)
 8000800:	f003 fdd0 	bl	80043a4 <osThreadNew>
 8000804:	4602      	mov	r2, r0
 8000806:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <main+0x1a8>)
 8000808:	601a      	str	r2, [r3, #0]

  /* creation of SendRadio */
  SendRadioHandle = osThreadNew(StartSendRadio, NULL, &SendRadio_attributes);
 800080a:	4a2c      	ldr	r2, [pc, #176]	; (80008bc <main+0x1ac>)
 800080c:	2100      	movs	r1, #0
 800080e:	482c      	ldr	r0, [pc, #176]	; (80008c0 <main+0x1b0>)
 8000810:	f003 fdc8 	bl	80043a4 <osThreadNew>
 8000814:	4602      	mov	r2, r0
 8000816:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <main+0x1b4>)
 8000818:	601a      	str	r2, [r3, #0]

  /* creation of ReceiveRadio */
  ReceiveRadioHandle = osThreadNew(StartReceiveRadio, NULL, &ReceiveRadio_attributes);
 800081a:	4a2b      	ldr	r2, [pc, #172]	; (80008c8 <main+0x1b8>)
 800081c:	2100      	movs	r1, #0
 800081e:	482b      	ldr	r0, [pc, #172]	; (80008cc <main+0x1bc>)
 8000820:	f003 fdc0 	bl	80043a4 <osThreadNew>
 8000824:	4602      	mov	r2, r0
 8000826:	4b2a      	ldr	r3, [pc, #168]	; (80008d0 <main+0x1c0>)
 8000828:	601a      	str	r2, [r3, #0]

  /* creation of SendSms */
  SendSmsHandle = osThreadNew(StartSendSms, NULL, &SendSms_attributes);
 800082a:	4a2a      	ldr	r2, [pc, #168]	; (80008d4 <main+0x1c4>)
 800082c:	2100      	movs	r1, #0
 800082e:	482a      	ldr	r0, [pc, #168]	; (80008d8 <main+0x1c8>)
 8000830:	f003 fdb8 	bl	80043a4 <osThreadNew>
 8000834:	4602      	mov	r2, r0
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <main+0x1cc>)
 8000838:	601a      	str	r2, [r3, #0]

  /* creation of ReceiveSms */
  ReceiveSmsHandle = osThreadNew(StartReceiveSms, NULL, &ReceiveSms_attributes);
 800083a:	4a29      	ldr	r2, [pc, #164]	; (80008e0 <main+0x1d0>)
 800083c:	2100      	movs	r1, #0
 800083e:	4829      	ldr	r0, [pc, #164]	; (80008e4 <main+0x1d4>)
 8000840:	f003 fdb0 	bl	80043a4 <osThreadNew>
 8000844:	4602      	mov	r2, r0
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <main+0x1d8>)
 8000848:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800084a:	f003 fd75 	bl	8004338 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800084e:	e7fe      	b.n	800084e <main+0x13e>
 8000850:	200049c0 	.word	0x200049c0
 8000854:	08007dc8 	.word	0x08007dc8
 8000858:	08007e00 	.word	0x08007e00
 800085c:	08007e04 	.word	0x08007e04
 8000860:	08007e1c 	.word	0x08007e1c
 8000864:	08007fa8 	.word	0x08007fa8
 8000868:	20004e50 	.word	0x20004e50
 800086c:	08007fb8 	.word	0x08007fb8
 8000870:	20004e5c 	.word	0x20004e5c
 8000874:	08007fc8 	.word	0x08007fc8
 8000878:	20004e60 	.word	0x20004e60
 800087c:	08007f98 	.word	0x08007f98
 8000880:	08000d1d 	.word	0x08000d1d
 8000884:	200049b8 	.word	0x200049b8
 8000888:	08007f20 	.word	0x08007f20
 800088c:	20004e54 	.word	0x20004e54
 8000890:	08007f38 	.word	0x08007f38
 8000894:	20004e64 	.word	0x20004e64
 8000898:	08007f50 	.word	0x08007f50
 800089c:	200049b0 	.word	0x200049b0
 80008a0:	08007f68 	.word	0x08007f68
 80008a4:	20004e4c 	.word	0x20004e4c
 80008a8:	08007f80 	.word	0x08007f80
 80008ac:	200049bc 	.word	0x200049bc
 80008b0:	08007e6c 	.word	0x08007e6c
 80008b4:	08000c95 	.word	0x08000c95
 80008b8:	200049b4 	.word	0x200049b4
 80008bc:	08007e90 	.word	0x08007e90
 80008c0:	08000cb5 	.word	0x08000cb5
 80008c4:	20004e58 	.word	0x20004e58
 80008c8:	08007eb4 	.word	0x08007eb4
 80008cc:	08000cc5 	.word	0x08000cc5
 80008d0:	20004e68 	.word	0x20004e68
 80008d4:	08007ed8 	.word	0x08007ed8
 80008d8:	08000ce3 	.word	0x08000ce3
 80008dc:	20004e48 	.word	0x20004e48
 80008e0:	08007efc 	.word	0x08007efc
 80008e4:	08000cf5 	.word	0x08000cf5
 80008e8:	20004e44 	.word	0x20004e44

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0b4      	sub	sp, #208	; 0xd0
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80008f6:	2230      	movs	r2, #48	; 0x30
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f006 fdeb 	bl	80074d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	2284      	movs	r2, #132	; 0x84
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f006 fddc 	bl	80074d6 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800091e:	f001 f881 	bl	8001a24 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <SystemClock_Config+0x114>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a36      	ldr	r2, [pc, #216]	; (8000a00 <SystemClock_Config+0x114>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <SystemClock_Config+0x114>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800093a:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <SystemClock_Config+0x118>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000942:	4a30      	ldr	r2, [pc, #192]	; (8000a04 <SystemClock_Config+0x118>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6013      	str	r3, [r2, #0]
 800094a:	4b2e      	ldr	r3, [pc, #184]	; (8000a04 <SystemClock_Config+0x118>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000956:	2301      	movs	r3, #1
 8000958:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800095c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000960:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	2302      	movs	r3, #2
 8000966:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800096e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000972:	2304      	movs	r3, #4
 8000974:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000978:	2348      	movs	r3, #72	; 0x48
 800097a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800097e:	2302      	movs	r3, #2
 8000980:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000984:	2303      	movs	r3, #3
 8000986:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800098e:	4618      	mov	r0, r3
 8000990:	f001 f858 	bl	8001a44 <HAL_RCC_OscConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800099a:	f000 f9db 	bl	8000d54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099e:	230f      	movs	r3, #15
 80009a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a4:	2302      	movs	r3, #2
 80009a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009c2:	2102      	movs	r1, #2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fae1 	bl	8001f8c <HAL_RCC_ClockConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80009d0:	f000 f9c0 	bl	8000d54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <SystemClock_Config+0x11c>)
 80009d6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009d8:	2300      	movs	r3, #0
 80009da:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e2:	f107 0308 	add.w	r3, r7, #8
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 fcfa 	bl	80023e0 <HAL_RCCEx_PeriphCLKConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80009f2:	f000 f9af 	bl	8000d54 <Error_Handler>
  }
}
 80009f6:	bf00      	nop
 80009f8:	37d0      	adds	r7, #208	; 0xd0
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40007000 	.word	0x40007000
 8000a08:	00200100 	.word	0x00200100

08000a0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <MX_USART3_UART_Init+0x5c>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_USART3_UART_Init+0x58>)
 8000a50:	f002 fb1a 	bl	8003088 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a5a:	f000 f97b 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200049c0 	.word	0x200049c0
 8000a68:	40004800 	.word	0x40004800

08000a6c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7a:	2206      	movs	r2, #6
 8000a7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a80:	2202      	movs	r2, #2
 8000a82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab0:	f000 fe6f 	bl	8001792 <HAL_PCD_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000aba:	f000 f94b 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20004a40 	.word	0x20004a40

08000ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	; 0x30
 8000acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	4b67      	ldr	r3, [pc, #412]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a66      	ldr	r2, [pc, #408]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b64      	ldr	r3, [pc, #400]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	61bb      	str	r3, [r7, #24]
 8000af4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af6:	4b61      	ldr	r3, [pc, #388]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a60      	ldr	r2, [pc, #384]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b5e      	ldr	r3, [pc, #376]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b5b      	ldr	r3, [pc, #364]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a5a      	ldr	r2, [pc, #360]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b58      	ldr	r3, [pc, #352]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4b55      	ldr	r3, [pc, #340]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a54      	ldr	r2, [pc, #336]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b52      	ldr	r3, [pc, #328]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3e:	4b4f      	ldr	r3, [pc, #316]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a4e      	ldr	r2, [pc, #312]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000b44:	f043 0308 	orr.w	r3, r3, #8
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b4c      	ldr	r3, [pc, #304]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0308 	and.w	r3, r3, #8
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b56:	4b49      	ldr	r3, [pc, #292]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a48      	ldr	r2, [pc, #288]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b46      	ldr	r3, [pc, #280]	; (8000c7c <MX_GPIO_Init+0x1b4>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b74:	4842      	ldr	r0, [pc, #264]	; (8000c80 <MX_GPIO_Init+0x1b8>)
 8000b76:	f000 fdf3 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2140      	movs	r1, #64	; 0x40
 8000b7e:	4841      	ldr	r0, [pc, #260]	; (8000c84 <MX_GPIO_Init+0x1bc>)
 8000b80:	f000 fdee 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8a:	4b3f      	ldr	r3, [pc, #252]	; (8000c88 <MX_GPIO_Init+0x1c0>)
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	483c      	ldr	r0, [pc, #240]	; (8000c8c <MX_GPIO_Init+0x1c4>)
 8000b9a:	f000 fc37 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b9e:	2332      	movs	r3, #50	; 0x32
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bae:	230b      	movs	r3, #11
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4834      	ldr	r0, [pc, #208]	; (8000c8c <MX_GPIO_Init+0x1c4>)
 8000bba:	f000 fc27 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bbe:	2386      	movs	r3, #134	; 0x86
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bce:	230b      	movs	r3, #11
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	482d      	ldr	r0, [pc, #180]	; (8000c90 <MX_GPIO_Init+0x1c8>)
 8000bda:	f000 fc17 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bde:	f244 0381 	movw	r3, #16513	; 0x4081
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4822      	ldr	r0, [pc, #136]	; (8000c80 <MX_GPIO_Init+0x1b8>)
 8000bf8:	f000 fc08 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c0e:	230b      	movs	r3, #11
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	4819      	ldr	r0, [pc, #100]	; (8000c80 <MX_GPIO_Init+0x1b8>)
 8000c1a:	f000 fbf7 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c1e:	2340      	movs	r3, #64	; 0x40
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4813      	ldr	r0, [pc, #76]	; (8000c84 <MX_GPIO_Init+0x1bc>)
 8000c36:	f000 fbe9 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_GPIO_Init+0x1bc>)
 8000c4e:	f000 fbdd 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c64:	230b      	movs	r3, #11
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_GPIO_Init+0x1bc>)
 8000c70:	f000 fbcc 	bl	800140c <HAL_GPIO_Init>

}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020400 	.word	0x40020400
 8000c84:	40021800 	.word	0x40021800
 8000c88:	10110000 	.word	0x10110000
 8000c8c:	40020800 	.word	0x40020800
 8000c90:	40020000 	.word	0x40020000

08000c94 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  osTimerStart(TimerScanKeypadHandle,100);
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <StartDefaultTask+0x1c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2164      	movs	r1, #100	; 0x64
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f003 fcec 	bl	8004680 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f003 fc21 	bl	80044f0 <osDelay>
 8000cae:	e7fb      	b.n	8000ca8 <StartDefaultTask+0x14>
 8000cb0:	200049b8 	.word	0x200049b8

08000cb4 <StartSendRadio>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendRadio */
void StartSendRadio(void *argument)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendRadio */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f003 fc17 	bl	80044f0 <osDelay>
 8000cc2:	e7fb      	b.n	8000cbc <StartSendRadio+0x8>

08000cc4 <StartReceiveRadio>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveRadio */
void StartReceiveRadio(void *argument)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b0a2      	sub	sp, #136	; 0x88
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveRadio */
  uint8_t  rx_buf[ MAX_MSG_LEN];
  memset(rx_buf,0x00,sizeof(rx_buf));
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f006 fbfe 	bl	80074d6 <memset>
  /* Infinite loop */
  for(;;)
  {

      osDelay(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f003 fc08 	bl	80044f0 <osDelay>
 8000ce0:	e7fb      	b.n	8000cda <StartReceiveRadio+0x16>

08000ce2 <StartSendSms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendSms */
void StartSendSms(void *argument)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendSms */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f003 fc00 	bl	80044f0 <osDelay>
 8000cf0:	e7fb      	b.n	8000cea <StartSendSms+0x8>
	...

08000cf4 <StartReceiveSms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveSms */
void StartReceiveSms(void *argument)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0a2      	sub	sp, #136	; 0x88
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveSms */
    uint8_t  sms_in_buf[ MAX_MSG_LEN];
    uint8_t  c;
    HAL_StatusTypeDef uart_status;

    ConsoleWr(development, "StartReceiveSms", 1);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4906      	ldr	r1, [pc, #24]	; (8000d18 <StartReceiveSms+0x24>)
 8000d00:	2032      	movs	r0, #50	; 0x32
 8000d02:	f7ff fc73 	bl	80005ec <ConsoleWr>
	memset(sms_in_buf,0x00,sizeof(sms_in_buf));
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	2280      	movs	r2, #128	; 0x80
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f006 fbe1 	bl	80074d6 <memset>


	/* Infinite loop */
	for(;;)
 8000d14:	e7fe      	b.n	8000d14 <StartReceiveSms+0x20>
 8000d16:	bf00      	nop
 8000d18:	08007e2c 	.word	0x08007e2c

08000d1c <CallbackScanKeypad>:
  /* USER CODE END StartReceiveSms */
}

/* CallbackScanKeypad function */
void CallbackScanKeypad(void *argument)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackScanKeypad */

  /* USER CODE END CallbackScanKeypad */
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d101      	bne.n	8000d46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d42:	f000 fa1d 	bl	8001180 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40001400 	.word	0x40001400

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <Error_Handler+0x6>

08000d5c <msg_initialize>:
#include <string.h>


one_msg_struct msg_repo[MAX_MSG_ROW];

void msg_initialize(void){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	memset(msg_repo, 0x00, sizeof(msg_repo));
 8000d60:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 8000d64:	2100      	movs	r1, #0
 8000d66:	4802      	ldr	r0, [pc, #8]	; (8000d70 <msg_initialize+0x14>)
 8000d68:	f006 fbb5 	bl	80074d6 <memset>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20004e6c 	.word	0x20004e6c

08000d74 <msg_free_rows>:

uint8_t msg_free_rows(void){
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
	uint8_t cnt = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0; i < MAX_MSG_ROW; i++ ){
 8000d7e:	2300      	movs	r3, #0
 8000d80:	71bb      	strb	r3, [r7, #6]
 8000d82:	e00e      	b.n	8000da2 <msg_free_rows+0x2e>
		if (msg_repo[i].reserved == 0){
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	4a0c      	ldr	r2, [pc, #48]	; (8000db8 <msg_free_rows+0x44>)
 8000d88:	218c      	movs	r1, #140	; 0x8c
 8000d8a:	fb01 f303 	mul.w	r3, r1, r3
 8000d8e:	4413      	add	r3, r2
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d102      	bne.n	8000d9c <msg_free_rows+0x28>
			cnt++;
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0; i < MAX_MSG_ROW; i++ ){
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	71bb      	strb	r3, [r7, #6]
 8000da2:	79bb      	ldrb	r3, [r7, #6]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d9ed      	bls.n	8000d84 <msg_free_rows+0x10>
		}
	}
	return cnt;
 8000da8:	79fb      	ldrb	r3, [r7, #7]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20004e6c 	.word	0x20004e6c

08000dbc <sms_rd_serial>:

#include "main.h"
#include "sms.h"
#include "console.h"

void sms_rd_serial(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	ConsoleWr(application, "Serial interrupt",1);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4903      	ldr	r1, [pc, #12]	; (8000dd0 <sms_rd_serial+0x14>)
 8000dc4:	205a      	movs	r0, #90	; 0x5a
 8000dc6:	f7ff fc11 	bl	80005ec <ConsoleWr>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	08007e3c 	.word	0x08007e3c

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_MspInit+0x4c>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a10      	ldr	r2, [pc, #64]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_MspInit+0x4c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_MspInit+0x4c>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	210f      	movs	r1, #15
 8000e0e:	f06f 0001 	mvn.w	r0, #1
 8000e12:	f000 faaf 	bl	8001374 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800

08000e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <HAL_UART_MspInit+0x8c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d130      	bne.n	8000ea8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_UART_MspInit+0x90>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a1a      	ldr	r2, [pc, #104]	; (8000eb4 <HAL_UART_MspInit+0x90>)
 8000e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_UART_MspInit+0x90>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_UART_MspInit+0x90>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <HAL_UART_MspInit+0x90>)
 8000e64:	f043 0308 	orr.w	r3, r3, #8
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_UART_MspInit+0x90>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <HAL_UART_MspInit+0x94>)
 8000e94:	f000 faba 	bl	800140c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2105      	movs	r1, #5
 8000e9c:	2027      	movs	r0, #39	; 0x27
 8000e9e:	f000 fa69 	bl	8001374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ea2:	2027      	movs	r0, #39	; 0x27
 8000ea4:	f000 fa82 	bl	80013ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40004800 	.word	0x40004800
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020c00 	.word	0x40020c00

08000ebc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000edc:	d141      	bne.n	8000f62 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a22      	ldr	r2, [pc, #136]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ef6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f08:	230a      	movs	r3, #10
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	4817      	ldr	r0, [pc, #92]	; (8000f70 <HAL_PCD_MspInit+0xb4>)
 8000f14:	f000 fa7a 	bl	800140c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4810      	ldr	r0, [pc, #64]	; (8000f70 <HAL_PCD_MspInit+0xb4>)
 8000f2e:	f000 fa6d 	bl	800140c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f36:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f3c:	6353      	str	r3, [r2, #52]	; 0x34
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000

08000f74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	; 0x30
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	2037      	movs	r0, #55	; 0x37
 8000f8a:	f000 f9f3 	bl	8001374 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f8e:	2037      	movs	r0, #55	; 0x37
 8000f90:	f000 fa0c 	bl	80013ac <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <HAL_InitTick+0xa0>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	4a1e      	ldr	r2, [pc, #120]	; (8001014 <HAL_InitTick+0xa0>)
 8000f9a:	f043 0320 	orr.w	r3, r3, #32
 8000f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <HAL_InitTick+0xa0>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f003 0320 	and.w	r3, r3, #32
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fac:	f107 0210 	add.w	r2, r7, #16
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 f9e0 	bl	800237c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000fbc:	f001 f9b6 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc8:	4a13      	ldr	r2, [pc, #76]	; (8001018 <HAL_InitTick+0xa4>)
 8000fca:	fba2 2303 	umull	r2, r3, r2, r3
 8000fce:	0c9b      	lsrs	r3, r3, #18
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <HAL_InitTick+0xa8>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <HAL_InitTick+0xac>)
 8000fd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <HAL_InitTick+0xa8>)
 8000fdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fe0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_InitTick+0xa8>)
 8000fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_InitTick+0xa8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_InitTick+0xa8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000ff4:	4809      	ldr	r0, [pc, #36]	; (800101c <HAL_InitTick+0xa8>)
 8000ff6:	f001 fde1 	bl	8002bbc <HAL_TIM_Base_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d104      	bne.n	800100a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001000:	4806      	ldr	r0, [pc, #24]	; (800101c <HAL_InitTick+0xa8>)
 8001002:	f001 fe11 	bl	8002c28 <HAL_TIM_Base_Start_IT>
 8001006:	4603      	mov	r3, r0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3730      	adds	r7, #48	; 0x30
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	431bde83 	.word	0x431bde83
 800101c:	2000572c 	.word	0x2000572c
 8001020:	40001400 	.word	0x40001400

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <NMI_Handler+0x4>

0800102a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <MemManage_Handler+0x4>

08001036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <BusFault_Handler+0x4>

0800103c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <UsageFault_Handler+0x4>

08001042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  sms_rd_serial();
 8001054:	f7ff feb2 	bl	8000dbc <sms_rd_serial>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <USART3_IRQHandler+0x14>)
 800105a:	f002 f8f5 	bl	8003248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200049c0 	.word	0x200049c0

08001068 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <TIM7_IRQHandler+0x10>)
 800106e:	f001 fe05 	bl	8002c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000572c 	.word	0x2000572c

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ac:	f006 f9de 	bl	800746c <__errno>
 80010b0:	4602      	mov	r2, r0
 80010b2:	230c      	movs	r3, #12
 80010b4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20050000 	.word	0x20050000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	20000090 	.word	0x20000090
 80010e4:	200057b8 	.word	0x200057b8

080010e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <SystemInit+0x28>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f2:	4a07      	ldr	r2, [pc, #28]	; (8001110 <SystemInit+0x28>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SystemInit+0x28>)
 80010fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001102:	609a      	str	r2, [r3, #8]
#endif
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800114c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001118:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800111a:	e003      	b.n	8001124 <LoopCopyDataInit>

0800111c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800111e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001120:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001122:	3104      	adds	r1, #4

08001124 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001128:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800112a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800112c:	d3f6      	bcc.n	800111c <CopyDataInit>
  ldr  r2, =_sbss
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001130:	e002      	b.n	8001138 <LoopFillZerobss>

08001132 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001132:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001134:	f842 3b04 	str.w	r3, [r2], #4

08001138 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800113a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800113c:	d3f9      	bcc.n	8001132 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800113e:	f7ff ffd3 	bl	80010e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001142:	f006 f999 	bl	8007478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001146:	f7ff fae3 	bl	8000710 <main>
  bx  lr    
 800114a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800114c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001150:	08008034 	.word	0x08008034
  ldr  r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001158:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800115c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001160:	200057b4 	.word	0x200057b4

08001164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC_IRQHandler>

08001166 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116a:	2003      	movs	r0, #3
 800116c:	f000 f8f7 	bl	800135e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff feff 	bl	8000f74 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001176:	f7ff fe2d 	bl	8000dd4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008
 80011a4:	2000576c 	.word	0x2000576c

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	2000576c 	.word	0x2000576c

080011c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c8:	f7ff ffee 	bl	80011a8 <HAL_GetTick>
 80011cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d8:	d005      	beq.n	80011e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_Delay+0x40>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e6:	bf00      	nop
 80011e8:	f7ff ffde 	bl	80011a8 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d8f7      	bhi.n	80011e8 <HAL_Delay+0x28>
  {
  }
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000008 	.word	0x20000008

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <__NVIC_SetPriorityGrouping+0x40>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	4313      	orrs	r3, r2
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x40>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00
 8001248:	05fa0000 	.word	0x05fa0000

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0b      	blt.n	8001292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	4907      	ldr	r1, [pc, #28]	; (80012a0 <__NVIC_EnableIRQ+0x38>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db0a      	blt.n	80012ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	490c      	ldr	r1, [pc, #48]	; (80012f0 <__NVIC_SetPriority+0x4c>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012cc:	e00a      	b.n	80012e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4908      	ldr	r1, [pc, #32]	; (80012f4 <__NVIC_SetPriority+0x50>)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	3b04      	subs	r3, #4
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf28      	it	cs
 8001316:	2304      	movcs	r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3304      	adds	r3, #4
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b03      	subs	r3, #3
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001340:	f04f 31ff 	mov.w	r1, #4294967295
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43d9      	mvns	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	4313      	orrs	r3, r2
         );
}
 8001352:	4618      	mov	r0, r3
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ff4c 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001386:	f7ff ff61 	bl	800124c <__NVIC_GetPriorityGrouping>
 800138a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	68b9      	ldr	r1, [r7, #8]
 8001390:	6978      	ldr	r0, [r7, #20]
 8001392:	f7ff ffb1 	bl	80012f8 <NVIC_EncodePriority>
 8001396:	4602      	mov	r2, r0
 8001398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff80 	bl	80012a4 <__NVIC_SetPriority>
}
 80013a4:	bf00      	nop
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff54 	bl	8001268 <__NVIC_EnableIRQ>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d004      	beq.n	80013e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00c      	b.n	8001400 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2205      	movs	r2, #5
 80013ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0201 	bic.w	r2, r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	; 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	e175      	b.n	8001718 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800142c:	2201      	movs	r2, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	429a      	cmp	r2, r3
 8001446:	f040 8164 	bne.w	8001712 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d00b      	beq.n	800146a <HAL_GPIO_Init+0x5e>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d007      	beq.n	800146a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145e:	2b11      	cmp	r3, #17
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b12      	cmp	r3, #18
 8001468:	d130      	bne.n	80014cc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x100>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b12      	cmp	r3, #18
 800150a:	d123      	bne.n	8001554 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	08da      	lsrs	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3208      	adds	r2, #8
 800154e:	69b9      	ldr	r1, [r7, #24]
 8001550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0203 	and.w	r2, r3, #3
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80be 	beq.w	8001712 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	4b65      	ldr	r3, [pc, #404]	; (800172c <HAL_GPIO_Init+0x320>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a64      	ldr	r2, [pc, #400]	; (800172c <HAL_GPIO_Init+0x320>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b62      	ldr	r3, [pc, #392]	; (800172c <HAL_GPIO_Init+0x320>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80015ae:	4a60      	ldr	r2, [pc, #384]	; (8001730 <HAL_GPIO_Init+0x324>)
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	3302      	adds	r3, #2
 80015b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	220f      	movs	r2, #15
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a57      	ldr	r2, [pc, #348]	; (8001734 <HAL_GPIO_Init+0x328>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d037      	beq.n	800164a <HAL_GPIO_Init+0x23e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a56      	ldr	r2, [pc, #344]	; (8001738 <HAL_GPIO_Init+0x32c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d031      	beq.n	8001646 <HAL_GPIO_Init+0x23a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a55      	ldr	r2, [pc, #340]	; (800173c <HAL_GPIO_Init+0x330>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d02b      	beq.n	8001642 <HAL_GPIO_Init+0x236>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a54      	ldr	r2, [pc, #336]	; (8001740 <HAL_GPIO_Init+0x334>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d025      	beq.n	800163e <HAL_GPIO_Init+0x232>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a53      	ldr	r2, [pc, #332]	; (8001744 <HAL_GPIO_Init+0x338>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d01f      	beq.n	800163a <HAL_GPIO_Init+0x22e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a52      	ldr	r2, [pc, #328]	; (8001748 <HAL_GPIO_Init+0x33c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d019      	beq.n	8001636 <HAL_GPIO_Init+0x22a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a51      	ldr	r2, [pc, #324]	; (800174c <HAL_GPIO_Init+0x340>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_GPIO_Init+0x226>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a50      	ldr	r2, [pc, #320]	; (8001750 <HAL_GPIO_Init+0x344>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00d      	beq.n	800162e <HAL_GPIO_Init+0x222>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4f      	ldr	r2, [pc, #316]	; (8001754 <HAL_GPIO_Init+0x348>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d007      	beq.n	800162a <HAL_GPIO_Init+0x21e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4e      	ldr	r2, [pc, #312]	; (8001758 <HAL_GPIO_Init+0x34c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d101      	bne.n	8001626 <HAL_GPIO_Init+0x21a>
 8001622:	2309      	movs	r3, #9
 8001624:	e012      	b.n	800164c <HAL_GPIO_Init+0x240>
 8001626:	230a      	movs	r3, #10
 8001628:	e010      	b.n	800164c <HAL_GPIO_Init+0x240>
 800162a:	2308      	movs	r3, #8
 800162c:	e00e      	b.n	800164c <HAL_GPIO_Init+0x240>
 800162e:	2307      	movs	r3, #7
 8001630:	e00c      	b.n	800164c <HAL_GPIO_Init+0x240>
 8001632:	2306      	movs	r3, #6
 8001634:	e00a      	b.n	800164c <HAL_GPIO_Init+0x240>
 8001636:	2305      	movs	r3, #5
 8001638:	e008      	b.n	800164c <HAL_GPIO_Init+0x240>
 800163a:	2304      	movs	r3, #4
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x240>
 800163e:	2303      	movs	r3, #3
 8001640:	e004      	b.n	800164c <HAL_GPIO_Init+0x240>
 8001642:	2302      	movs	r3, #2
 8001644:	e002      	b.n	800164c <HAL_GPIO_Init+0x240>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <HAL_GPIO_Init+0x240>
 800164a:	2300      	movs	r3, #0
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	f002 0203 	and.w	r2, r2, #3
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	4093      	lsls	r3, r2
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800165c:	4934      	ldr	r1, [pc, #208]	; (8001730 <HAL_GPIO_Init+0x324>)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166a:	4b3c      	ldr	r3, [pc, #240]	; (800175c <HAL_GPIO_Init+0x350>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800168e:	4a33      	ldr	r2, [pc, #204]	; (800175c <HAL_GPIO_Init+0x350>)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001694:	4b31      	ldr	r3, [pc, #196]	; (800175c <HAL_GPIO_Init+0x350>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b8:	4a28      	ldr	r2, [pc, #160]	; (800175c <HAL_GPIO_Init+0x350>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016be:	4b27      	ldr	r3, [pc, #156]	; (800175c <HAL_GPIO_Init+0x350>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <HAL_GPIO_Init+0x350>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_GPIO_Init+0x350>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800170c:	4a13      	ldr	r2, [pc, #76]	; (800175c <HAL_GPIO_Init+0x350>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3301      	adds	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	2b0f      	cmp	r3, #15
 800171c:	f67f ae86 	bls.w	800142c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001720:	bf00      	nop
 8001722:	3724      	adds	r7, #36	; 0x24
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40023800 	.word	0x40023800
 8001730:	40013800 	.word	0x40013800
 8001734:	40020000 	.word	0x40020000
 8001738:	40020400 	.word	0x40020400
 800173c:	40020800 	.word	0x40020800
 8001740:	40020c00 	.word	0x40020c00
 8001744:	40021000 	.word	0x40021000
 8001748:	40021400 	.word	0x40021400
 800174c:	40021800 	.word	0x40021800
 8001750:	40021c00 	.word	0x40021c00
 8001754:	40022000 	.word	0x40022000
 8001758:	40022400 	.word	0x40022400
 800175c:	40013c00 	.word	0x40013c00

08001760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001770:	787b      	ldrb	r3, [r7, #1]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800177c:	e003      	b.n	8001786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	619a      	str	r2, [r3, #24]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001792:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001794:	b08f      	sub	sp, #60	; 0x3c
 8001796:	af0a      	add	r7, sp, #40	; 0x28
 8001798:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e116      	b.n	80019d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fb7c 	bl	8000ebc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2203      	movs	r2, #3
 80017c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 fb14 	bl	8003e10 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	687e      	ldr	r6, [r7, #4]
 80017f0:	466d      	mov	r5, sp
 80017f2:	f106 0410 	add.w	r4, r6, #16
 80017f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001802:	e885 0003 	stmia.w	r5, {r0, r1}
 8001806:	1d33      	adds	r3, r6, #4
 8001808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800180a:	6838      	ldr	r0, [r7, #0]
 800180c:	f002 faa8 	bl	8003d60 <USB_CoreInit>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2202      	movs	r2, #2
 800181a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e0d7      	b.n	80019d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f002 fb02 	bl	8003e32 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800182e:	2300      	movs	r3, #0
 8001830:	73fb      	strb	r3, [r7, #15]
 8001832:	e04a      	b.n	80018ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	333d      	adds	r3, #61	; 0x3d
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	333c      	adds	r3, #60	; 0x3c
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	b298      	uxth	r0, r3
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	3342      	adds	r3, #66	; 0x42
 8001870:	4602      	mov	r2, r0
 8001872:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	333f      	adds	r3, #63	; 0x3f
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	3344      	adds	r3, #68	; 0x44
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	3348      	adds	r3, #72	; 0x48
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	1a9b      	subs	r3, r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	3350      	adds	r3, #80	; 0x50
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	3301      	adds	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d3af      	bcc.n	8001834 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]
 80018d8:	e044      	b.n	8001964 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018f0:	7bfa      	ldrb	r2, [r7, #15]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	1a9b      	subs	r3, r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	1a9b      	subs	r3, r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	3301      	adds	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	429a      	cmp	r2, r3
 800196c:	d3b5      	bcc.n	80018da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	687e      	ldr	r6, [r7, #4]
 8001976:	466d      	mov	r5, sp
 8001978:	f106 0410 	add.w	r4, r6, #16
 800197c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001984:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001988:	e885 0003 	stmia.w	r5, {r0, r1}
 800198c:	1d33      	adds	r3, r6, #4
 800198e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001990:	6838      	ldr	r0, [r7, #0]
 8001992:	f002 fa79 	bl	8003e88 <USB_DevInit>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2202      	movs	r2, #2
 80019a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e014      	b.n	80019d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d102      	bne.n	80019c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f80b 	bl	80019dc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 fc2b 	bl	8004226 <USB_DevDisconnect>

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080019dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_PCDEx_ActivateLPM+0x44>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	10000003 	.word	0x10000003

08001a24 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40007000 	.word	0x40007000

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e291      	b.n	8001f7e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8087 	beq.w	8001b76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a68:	4b96      	ldr	r3, [pc, #600]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d00c      	beq.n	8001a8e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a74:	4b93      	ldr	r3, [pc, #588]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d112      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x62>
 8001a80:	4b90      	ldr	r3, [pc, #576]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a8c:	d10b      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8e:	4b8d      	ldr	r3, [pc, #564]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d06c      	beq.n	8001b74 <HAL_RCC_OscConfig+0x130>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d168      	bne.n	8001b74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e26b      	b.n	8001f7e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aae:	d106      	bne.n	8001abe <HAL_RCC_OscConfig+0x7a>
 8001ab0:	4b84      	ldr	r3, [pc, #528]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a83      	ldr	r2, [pc, #524]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	e02e      	b.n	8001b1c <HAL_RCC_OscConfig+0xd8>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x9c>
 8001ac6:	4b7f      	ldr	r3, [pc, #508]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7e      	ldr	r2, [pc, #504]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b7c      	ldr	r3, [pc, #496]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a7b      	ldr	r2, [pc, #492]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e01d      	b.n	8001b1c <HAL_RCC_OscConfig+0xd8>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0xc0>
 8001aea:	4b76      	ldr	r3, [pc, #472]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a75      	ldr	r2, [pc, #468]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b73      	ldr	r3, [pc, #460]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a72      	ldr	r2, [pc, #456]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0xd8>
 8001b04:	4b6f      	ldr	r3, [pc, #444]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a6e      	ldr	r2, [pc, #440]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b6c      	ldr	r3, [pc, #432]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a6b      	ldr	r2, [pc, #428]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fb40 	bl	80011a8 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff fb3c 	bl	80011a8 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e21f      	b.n	8001f7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b61      	ldr	r3, [pc, #388]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0xe8>
 8001b4a:	e014      	b.n	8001b76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fb2c 	bl	80011a8 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff fb28 	bl	80011a8 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e20b      	b.n	8001f7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	4b57      	ldr	r3, [pc, #348]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x110>
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d069      	beq.n	8001c56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b82:	4b50      	ldr	r3, [pc, #320]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8e:	4b4d      	ldr	r3, [pc, #308]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d11c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x190>
 8001b9a:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d116      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba6:	4b47      	ldr	r3, [pc, #284]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_RCC_OscConfig+0x17a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d001      	beq.n	8001bbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e1df      	b.n	8001f7e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbe:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	493d      	ldr	r1, [pc, #244]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd2:	e040      	b.n	8001c56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d023      	beq.n	8001c24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bdc:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a38      	ldr	r2, [pc, #224]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff fade 	bl	80011a8 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf0:	f7ff fada 	bl	80011a8 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e1bd      	b.n	8001f7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c02:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0e:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4929      	ldr	r1, [pc, #164]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
 8001c22:	e018      	b.n	8001c56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c24:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a26      	ldr	r2, [pc, #152]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001c2a:	f023 0301 	bic.w	r3, r3, #1
 8001c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff faba 	bl	80011a8 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c38:	f7ff fab6 	bl	80011a8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e199      	b.n	8001f7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d038      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d019      	beq.n	8001c9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c6e:	4a15      	ldr	r2, [pc, #84]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c76:	f7ff fa97 	bl	80011a8 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7e:	f7ff fa93 	bl	80011a8 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e176      	b.n	8001f7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x23a>
 8001c9c:	e01a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ca2:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <HAL_RCC_OscConfig+0x280>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001caa:	f7ff fa7d 	bl	80011a8 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fa79 	bl	80011a8 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d903      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e15c      	b.n	8001f7e <HAL_RCC_OscConfig+0x53a>
 8001cc4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc8:	4b91      	ldr	r3, [pc, #580]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1ee      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80a4 	beq.w	8001e2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce2:	4b8b      	ldr	r3, [pc, #556]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10d      	bne.n	8001d0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	4b88      	ldr	r3, [pc, #544]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a87      	ldr	r2, [pc, #540]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b85      	ldr	r3, [pc, #532]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d06:	2301      	movs	r3, #1
 8001d08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0a:	4b82      	ldr	r3, [pc, #520]	; (8001f14 <HAL_RCC_OscConfig+0x4d0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d118      	bne.n	8001d48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d16:	4b7f      	ldr	r3, [pc, #508]	; (8001f14 <HAL_RCC_OscConfig+0x4d0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a7e      	ldr	r2, [pc, #504]	; (8001f14 <HAL_RCC_OscConfig+0x4d0>)
 8001d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d22:	f7ff fa41 	bl	80011a8 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2a:	f7ff fa3d 	bl	80011a8 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b64      	cmp	r3, #100	; 0x64
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e120      	b.n	8001f7e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d3c:	4b75      	ldr	r3, [pc, #468]	; (8001f14 <HAL_RCC_OscConfig+0x4d0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d106      	bne.n	8001d5e <HAL_RCC_OscConfig+0x31a>
 8001d50:	4b6f      	ldr	r3, [pc, #444]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d54:	4a6e      	ldr	r2, [pc, #440]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5c:	e02d      	b.n	8001dba <HAL_RCC_OscConfig+0x376>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x33c>
 8001d66:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	4a69      	ldr	r2, [pc, #420]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	6713      	str	r3, [r2, #112]	; 0x70
 8001d72:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	4a66      	ldr	r2, [pc, #408]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001d78:	f023 0304 	bic.w	r3, r3, #4
 8001d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d7e:	e01c      	b.n	8001dba <HAL_RCC_OscConfig+0x376>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d10c      	bne.n	8001da2 <HAL_RCC_OscConfig+0x35e>
 8001d88:	4b61      	ldr	r3, [pc, #388]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8c:	4a60      	ldr	r2, [pc, #384]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	6713      	str	r3, [r2, #112]	; 0x70
 8001d94:	4b5e      	ldr	r3, [pc, #376]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d98:	4a5d      	ldr	r2, [pc, #372]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001da0:	e00b      	b.n	8001dba <HAL_RCC_OscConfig+0x376>
 8001da2:	4b5b      	ldr	r3, [pc, #364]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da6:	4a5a      	ldr	r2, [pc, #360]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6713      	str	r3, [r2, #112]	; 0x70
 8001dae:	4b58      	ldr	r3, [pc, #352]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db2:	4a57      	ldr	r2, [pc, #348]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001db4:	f023 0304 	bic.w	r3, r3, #4
 8001db8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d015      	beq.n	8001dee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc2:	f7ff f9f1 	bl	80011a8 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7ff f9ed 	bl	80011a8 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e0ce      	b.n	8001f7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	4b4b      	ldr	r3, [pc, #300]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0ee      	beq.n	8001dca <HAL_RCC_OscConfig+0x386>
 8001dec:	e014      	b.n	8001e18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dee:	f7ff f9db 	bl	80011a8 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df6:	f7ff f9d7 	bl	80011a8 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e0b8      	b.n	8001f7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1ee      	bne.n	8001df6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d105      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e1e:	4b3c      	ldr	r3, [pc, #240]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a3b      	ldr	r2, [pc, #236]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80a4 	beq.w	8001f7c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e34:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d06b      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d149      	bne.n	8001edc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e48:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a30      	ldr	r2, [pc, #192]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7ff f9a8 	bl	80011a8 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7ff f9a4 	bl	80011a8 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e087      	b.n	8001f7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6e:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69da      	ldr	r2, [r3, #28]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	019b      	lsls	r3, r3, #6
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e90:	085b      	lsrs	r3, r3, #1
 8001e92:	3b01      	subs	r3, #1
 8001e94:	041b      	lsls	r3, r3, #16
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	061b      	lsls	r3, r3, #24
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001ea2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ea6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff f978 	bl	80011a8 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7ff f974 	bl	80011a8 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e057      	b.n	8001f7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x478>
 8001eda:	e04f      	b.n	8001f7c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7ff f95e 	bl	80011a8 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7ff f95a 	bl	80011a8 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e03d      	b.n	8001f7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <HAL_RCC_OscConfig+0x4cc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x4ac>
 8001f0e:	e035      	b.n	8001f7c <HAL_RCC_OscConfig+0x538>
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_RCC_OscConfig+0x544>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d028      	beq.n	8001f78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d121      	bne.n	8001f78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d11a      	bne.n	8001f78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f48:	4013      	ands	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d111      	bne.n	8001f78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	085b      	lsrs	r3, r3, #1
 8001f60:	3b01      	subs	r3, #1
 8001f62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d107      	bne.n	8001f78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800

08001f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0d0      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d910      	bls.n	8001fd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b67      	ldr	r3, [pc, #412]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 020f 	bic.w	r2, r3, #15
 8001fba:	4965      	ldr	r1, [pc, #404]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b63      	ldr	r3, [pc, #396]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0b8      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d020      	beq.n	8002022 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fec:	4b59      	ldr	r3, [pc, #356]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4a58      	ldr	r2, [pc, #352]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ff6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002004:	4b53      	ldr	r3, [pc, #332]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a52      	ldr	r2, [pc, #328]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 800200a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800200e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002010:	4b50      	ldr	r3, [pc, #320]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	494d      	ldr	r1, [pc, #308]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 800201e:	4313      	orrs	r3, r2
 8002020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d040      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b47      	ldr	r3, [pc, #284]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d115      	bne.n	800206e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e07f      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204e:	4b41      	ldr	r3, [pc, #260]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e073      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205e:	4b3d      	ldr	r3, [pc, #244]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e06b      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800206e:	4b39      	ldr	r3, [pc, #228]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f023 0203 	bic.w	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4936      	ldr	r1, [pc, #216]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002080:	f7ff f892 	bl	80011a8 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	e00a      	b.n	800209e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002088:	f7ff f88e 	bl	80011a8 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	; 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e053      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 020c 	and.w	r2, r3, #12
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d1eb      	bne.n	8002088 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b0:	4b27      	ldr	r3, [pc, #156]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d210      	bcs.n	80020e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b24      	ldr	r3, [pc, #144]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 020f 	bic.w	r2, r3, #15
 80020c6:	4922      	ldr	r1, [pc, #136]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e032      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4916      	ldr	r1, [pc, #88]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d009      	beq.n	800211e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800210a:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	490e      	ldr	r1, [pc, #56]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800211e:	f000 f821 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 8002122:	4601      	mov	r1, r0
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <HAL_RCC_ClockConfig+0x1cc>)
 8002130:	5cd3      	ldrb	r3, [r2, r3]
 8002132:	fa21 f303 	lsr.w	r3, r1, r3
 8002136:	4a09      	ldr	r2, [pc, #36]	; (800215c <HAL_RCC_ClockConfig+0x1d0>)
 8002138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_RCC_ClockConfig+0x1d4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe ff18 	bl	8000f74 <HAL_InitTick>

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023c00 	.word	0x40023c00
 8002154:	40023800 	.word	0x40023800
 8002158:	08007fd8 	.word	0x08007fd8
 800215c:	20000000 	.word	0x20000000
 8002160:	20000004 	.word	0x20000004

08002164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	2300      	movs	r3, #0
 8002174:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800217a:	4b63      	ldr	r3, [pc, #396]	; (8002308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b04      	cmp	r3, #4
 8002184:	d007      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0x32>
 8002186:	2b08      	cmp	r3, #8
 8002188:	d008      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x38>
 800218a:	2b00      	cmp	r3, #0
 800218c:	f040 80b4 	bne.w	80022f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002190:	4b5e      	ldr	r3, [pc, #376]	; (800230c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002192:	60bb      	str	r3, [r7, #8]
      break;
 8002194:	e0b3      	b.n	80022fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002196:	4b5e      	ldr	r3, [pc, #376]	; (8002310 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002198:	60bb      	str	r3, [r7, #8]
      break;
 800219a:	e0b0      	b.n	80022fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800219c:	4b5a      	ldr	r3, [pc, #360]	; (8002308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021a4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021a6:	4b58      	ldr	r3, [pc, #352]	; (8002308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d04a      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b2:	4b55      	ldr	r3, [pc, #340]	; (8002308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	099b      	lsrs	r3, r3, #6
 80021b8:	f04f 0400 	mov.w	r4, #0
 80021bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	ea03 0501 	and.w	r5, r3, r1
 80021c8:	ea04 0602 	and.w	r6, r4, r2
 80021cc:	4629      	mov	r1, r5
 80021ce:	4632      	mov	r2, r6
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	f04f 0400 	mov.w	r4, #0
 80021d8:	0154      	lsls	r4, r2, #5
 80021da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021de:	014b      	lsls	r3, r1, #5
 80021e0:	4619      	mov	r1, r3
 80021e2:	4622      	mov	r2, r4
 80021e4:	1b49      	subs	r1, r1, r5
 80021e6:	eb62 0206 	sbc.w	r2, r2, r6
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	f04f 0400 	mov.w	r4, #0
 80021f2:	0194      	lsls	r4, r2, #6
 80021f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021f8:	018b      	lsls	r3, r1, #6
 80021fa:	1a5b      	subs	r3, r3, r1
 80021fc:	eb64 0402 	sbc.w	r4, r4, r2
 8002200:	f04f 0100 	mov.w	r1, #0
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	00e2      	lsls	r2, r4, #3
 800220a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800220e:	00d9      	lsls	r1, r3, #3
 8002210:	460b      	mov	r3, r1
 8002212:	4614      	mov	r4, r2
 8002214:	195b      	adds	r3, r3, r5
 8002216:	eb44 0406 	adc.w	r4, r4, r6
 800221a:	f04f 0100 	mov.w	r1, #0
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	0262      	lsls	r2, r4, #9
 8002224:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002228:	0259      	lsls	r1, r3, #9
 800222a:	460b      	mov	r3, r1
 800222c:	4614      	mov	r4, r2
 800222e:	4618      	mov	r0, r3
 8002230:	4621      	mov	r1, r4
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f04f 0400 	mov.w	r4, #0
 8002238:	461a      	mov	r2, r3
 800223a:	4623      	mov	r3, r4
 800223c:	f7fe f840 	bl	80002c0 <__aeabi_uldivmod>
 8002240:	4603      	mov	r3, r0
 8002242:	460c      	mov	r4, r1
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	e049      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002248:	4b2f      	ldr	r3, [pc, #188]	; (8002308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	099b      	lsrs	r3, r3, #6
 800224e:	f04f 0400 	mov.w	r4, #0
 8002252:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	ea03 0501 	and.w	r5, r3, r1
 800225e:	ea04 0602 	and.w	r6, r4, r2
 8002262:	4629      	mov	r1, r5
 8002264:	4632      	mov	r2, r6
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	f04f 0400 	mov.w	r4, #0
 800226e:	0154      	lsls	r4, r2, #5
 8002270:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002274:	014b      	lsls	r3, r1, #5
 8002276:	4619      	mov	r1, r3
 8002278:	4622      	mov	r2, r4
 800227a:	1b49      	subs	r1, r1, r5
 800227c:	eb62 0206 	sbc.w	r2, r2, r6
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	f04f 0400 	mov.w	r4, #0
 8002288:	0194      	lsls	r4, r2, #6
 800228a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800228e:	018b      	lsls	r3, r1, #6
 8002290:	1a5b      	subs	r3, r3, r1
 8002292:	eb64 0402 	sbc.w	r4, r4, r2
 8002296:	f04f 0100 	mov.w	r1, #0
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	00e2      	lsls	r2, r4, #3
 80022a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022a4:	00d9      	lsls	r1, r3, #3
 80022a6:	460b      	mov	r3, r1
 80022a8:	4614      	mov	r4, r2
 80022aa:	195b      	adds	r3, r3, r5
 80022ac:	eb44 0406 	adc.w	r4, r4, r6
 80022b0:	f04f 0100 	mov.w	r1, #0
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	02a2      	lsls	r2, r4, #10
 80022ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022be:	0299      	lsls	r1, r3, #10
 80022c0:	460b      	mov	r3, r1
 80022c2:	4614      	mov	r4, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	4621      	mov	r1, r4
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f04f 0400 	mov.w	r4, #0
 80022ce:	461a      	mov	r2, r3
 80022d0:	4623      	mov	r3, r4
 80022d2:	f7fd fff5 	bl	80002c0 <__aeabi_uldivmod>
 80022d6:	4603      	mov	r3, r0
 80022d8:	460c      	mov	r4, r1
 80022da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	3301      	adds	r3, #1
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f4:	60bb      	str	r3, [r7, #8]
      break;
 80022f6:	e002      	b.n	80022fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80022fa:	60bb      	str	r3, [r7, #8]
      break;
 80022fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022fe:	68bb      	ldr	r3, [r7, #8]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002308:	40023800 	.word	0x40023800
 800230c:	00f42400 	.word	0x00f42400
 8002310:	007a1200 	.word	0x007a1200

08002314 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_RCC_GetHCLKFreq+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000000 	.word	0x20000000

0800232c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002330:	f7ff fff0 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8002334:	4601      	mov	r1, r0
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	0a9b      	lsrs	r3, r3, #10
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	4a03      	ldr	r2, [pc, #12]	; (8002350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40023800 	.word	0x40023800
 8002350:	08007fe8 	.word	0x08007fe8

08002354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002358:	f7ff ffdc 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 800235c:	4601      	mov	r1, r0
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0b5b      	lsrs	r3, r3, #13
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4a03      	ldr	r2, [pc, #12]	; (8002378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40023800 	.word	0x40023800
 8002378:	08007fe8 	.word	0x08007fe8

0800237c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	220f      	movs	r2, #15
 800238a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	08db      	lsrs	r3, r3, #3
 80023b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_RCC_GetClockConfig+0x60>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 020f 	and.w	r2, r3, #15
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	601a      	str	r2, [r3, #0]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40023c00 	.word	0x40023c00

080023e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d012      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002408:	4b69      	ldr	r3, [pc, #420]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4a68      	ldr	r2, [pc, #416]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002412:	6093      	str	r3, [r2, #8]
 8002414:	4b66      	ldr	r3, [pc, #408]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241c:	4964      	ldr	r1, [pc, #400]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800242a:	2301      	movs	r3, #1
 800242c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d017      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800243a:	4b5d      	ldr	r3, [pc, #372]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002440:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002448:	4959      	ldr	r1, [pc, #356]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002458:	d101      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800245a:	2301      	movs	r3, #1
 800245c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002466:	2301      	movs	r3, #1
 8002468:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d017      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002476:	4b4e      	ldr	r3, [pc, #312]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800247c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	494a      	ldr	r1, [pc, #296]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002494:	d101      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002496:	2301      	movs	r3, #1
 8002498:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80024b2:	2301      	movs	r3, #1
 80024b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 808b 	beq.w	80025da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024c4:	4b3a      	ldr	r3, [pc, #232]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	4a39      	ldr	r2, [pc, #228]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ce:	6413      	str	r3, [r2, #64]	; 0x40
 80024d0:	4b37      	ldr	r3, [pc, #220]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024dc:	4b35      	ldr	r3, [pc, #212]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a34      	ldr	r2, [pc, #208]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e8:	f7fe fe5e 	bl	80011a8 <HAL_GetTick>
 80024ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f0:	f7fe fe5a 	bl	80011a8 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e355      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002502:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800250e:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002516:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d035      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	429a      	cmp	r2, r3
 800252a:	d02e      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800252c:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002534:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	4a1a      	ldr	r2, [pc, #104]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800254e:	4a18      	ldr	r2, [pc, #96]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002554:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d114      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fe22 	bl	80011a8 <HAL_GetTick>
 8002564:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002566:	e00a      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f7fe fe1e 	bl	80011a8 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e317      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257e:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0ee      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002596:	d111      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025a6:	400b      	ands	r3, r1
 80025a8:	4901      	ldr	r1, [pc, #4]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
 80025ae:	e00b      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40007000 	.word	0x40007000
 80025b8:	0ffffcff 	.word	0x0ffffcff
 80025bc:	4bb0      	ldr	r3, [pc, #704]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4aaf      	ldr	r2, [pc, #700]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025c6:	6093      	str	r3, [r2, #8]
 80025c8:	4bad      	ldr	r3, [pc, #692]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d4:	49aa      	ldr	r1, [pc, #680]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025e6:	4ba6      	ldr	r3, [pc, #664]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ec:	4aa4      	ldr	r2, [pc, #656]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80025f6:	4ba2      	ldr	r3, [pc, #648]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002600:	499f      	ldr	r1, [pc, #636]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002614:	4b9a      	ldr	r3, [pc, #616]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002622:	4997      	ldr	r1, [pc, #604]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002636:	4b92      	ldr	r3, [pc, #584]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002644:	498e      	ldr	r1, [pc, #568]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002658:	4b89      	ldr	r3, [pc, #548]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002666:	4986      	ldr	r1, [pc, #536]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800267a:	4b81      	ldr	r3, [pc, #516]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002680:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	497d      	ldr	r1, [pc, #500]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800269c:	4b78      	ldr	r3, [pc, #480]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	f023 0203 	bic.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	4975      	ldr	r1, [pc, #468]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026be:	4b70      	ldr	r3, [pc, #448]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	f023 020c 	bic.w	r2, r3, #12
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026cc:	496c      	ldr	r1, [pc, #432]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026e0:	4b67      	ldr	r3, [pc, #412]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	4964      	ldr	r1, [pc, #400]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002702:	4b5f      	ldr	r3, [pc, #380]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	495b      	ldr	r1, [pc, #364]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002724:	4b56      	ldr	r3, [pc, #344]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	4953      	ldr	r1, [pc, #332]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002746:	4b4e      	ldr	r3, [pc, #312]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	494a      	ldr	r1, [pc, #296]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002768:	4b45      	ldr	r3, [pc, #276]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	4942      	ldr	r1, [pc, #264]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800278a:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002798:	4939      	ldr	r1, [pc, #228]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027ac:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ba:	4931      	ldr	r1, [pc, #196]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d011      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027ce:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027dc:	4928      	ldr	r1, [pc, #160]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ec:	d101      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80027ee:	2301      	movs	r3, #1
 80027f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80027fe:	2301      	movs	r3, #1
 8002800:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800280e:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002814:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281c:	4918      	ldr	r1, [pc, #96]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00b      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002836:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002840:	490f      	ldr	r1, [pc, #60]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d005      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002856:	f040 80d8 	bne.w	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800285a:	4b09      	ldr	r3, [pc, #36]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a08      	ldr	r2, [pc, #32]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002860:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002866:	f7fe fc9f 	bl	80011a8 <HAL_GetTick>
 800286a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800286c:	e00a      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800286e:	f7fe fc9b 	bl	80011a8 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b64      	cmp	r3, #100	; 0x64
 800287a:	d903      	bls.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e196      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002880:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002884:	4b6c      	ldr	r3, [pc, #432]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1ee      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d021      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d11d      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028a4:	4b64      	ldr	r3, [pc, #400]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028b2:	4b61      	ldr	r3, [pc, #388]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b8:	0e1b      	lsrs	r3, r3, #24
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	019a      	lsls	r2, r3, #6
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	041b      	lsls	r3, r3, #16
 80028ca:	431a      	orrs	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	061b      	lsls	r3, r3, #24
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	071b      	lsls	r3, r3, #28
 80028d8:	4957      	ldr	r1, [pc, #348]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f4:	d00a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d02e      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800290a:	d129      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800290c:	4b4a      	ldr	r3, [pc, #296]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800290e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002912:	0c1b      	lsrs	r3, r3, #16
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800291a:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800291c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002920:	0f1b      	lsrs	r3, r3, #28
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	019a      	lsls	r2, r3, #6
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	041b      	lsls	r3, r3, #16
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	431a      	orrs	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	071b      	lsls	r3, r3, #28
 8002940:	493d      	ldr	r1, [pc, #244]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002948:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800294a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800294e:	f023 021f 	bic.w	r2, r3, #31
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	3b01      	subs	r3, #1
 8002958:	4937      	ldr	r1, [pc, #220]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01d      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800296c:	4b32      	ldr	r3, [pc, #200]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800296e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002972:	0e1b      	lsrs	r3, r3, #24
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800297a:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800297c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002980:	0f1b      	lsrs	r3, r3, #28
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	019a      	lsls	r2, r3, #6
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	041b      	lsls	r3, r3, #16
 8002994:	431a      	orrs	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	431a      	orrs	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	071b      	lsls	r3, r3, #28
 80029a0:	4925      	ldr	r1, [pc, #148]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d011      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	019a      	lsls	r2, r3, #6
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	041b      	lsls	r3, r3, #16
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	061b      	lsls	r3, r3, #24
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	071b      	lsls	r3, r3, #28
 80029d0:	4919      	ldr	r1, [pc, #100]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029d8:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a16      	ldr	r2, [pc, #88]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80029de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e4:	f7fe fbe0 	bl	80011a8 <HAL_GetTick>
 80029e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029ec:	f7fe fbdc 	bl	80011a8 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	; 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e0d7      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	f040 80cd 	bne.w	8002bac <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a08      	ldr	r2, [pc, #32]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a1e:	f7fe fbc3 	bl	80011a8 <HAL_GetTick>
 8002a22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a26:	f7fe fbbf 	bl	80011a8 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b64      	cmp	r3, #100	; 0x64
 8002a32:	d903      	bls.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0ba      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002a38:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a3c:	4b5e      	ldr	r3, [pc, #376]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a48:	d0ed      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d02e      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d12a      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a72:	4b51      	ldr	r3, [pc, #324]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a80:	4b4d      	ldr	r3, [pc, #308]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	0f1b      	lsrs	r3, r3, #28
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	019a      	lsls	r2, r3, #6
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	041b      	lsls	r3, r3, #16
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	061b      	lsls	r3, r3, #24
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	071b      	lsls	r3, r3, #28
 8002aa6:	4944      	ldr	r1, [pc, #272]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002aae:	4b42      	ldr	r3, [pc, #264]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	3b01      	subs	r3, #1
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	493d      	ldr	r1, [pc, #244]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d022      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002adc:	d11d      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ade:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae4:	0e1b      	lsrs	r3, r3, #24
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002aec:	4b32      	ldr	r3, [pc, #200]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af2:	0f1b      	lsrs	r3, r3, #28
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	019a      	lsls	r2, r3, #6
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	041b      	lsls	r3, r3, #16
 8002b06:	431a      	orrs	r2, r3
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	061b      	lsls	r3, r3, #24
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	071b      	lsls	r3, r3, #28
 8002b12:	4929      	ldr	r1, [pc, #164]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d028      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b26:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	0e1b      	lsrs	r3, r3, #24
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b34:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	0c1b      	lsrs	r3, r3, #16
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	019a      	lsls	r2, r3, #6
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	041b      	lsls	r3, r3, #16
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	061b      	lsls	r3, r3, #24
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	071b      	lsls	r3, r3, #28
 8002b5a:	4917      	ldr	r1, [pc, #92]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	4911      	ldr	r1, [pc, #68]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b78:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0e      	ldr	r2, [pc, #56]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b84:	f7fe fb10 	bl	80011a8 <HAL_GetTick>
 8002b88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b8c:	f7fe fb0c 	bl	80011a8 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e007      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002baa:	d1ef      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800

08002bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e01d      	b.n	8002c0a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f815 	bl	8002c12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	f000 f986 	bl	8002f0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <HAL_TIM_Base_Start_IT+0x50>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	d00b      	beq.n	8002c6a <HAL_TIM_Base_Start_IT+0x42>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c58:	d007      	beq.n	8002c6a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	00010007 	.word	0x00010007

08002c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d122      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d11b      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0202 	mvn.w	r2, #2
 8002ca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f905 	bl	8002ece <HAL_TIM_IC_CaptureCallback>
 8002cc4:	e005      	b.n	8002cd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f8f7 	bl	8002eba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f908 	bl	8002ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d122      	bne.n	8002d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d11b      	bne.n	8002d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0204 	mvn.w	r2, #4
 8002cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2202      	movs	r2, #2
 8002d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f8db 	bl	8002ece <HAL_TIM_IC_CaptureCallback>
 8002d18:	e005      	b.n	8002d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f8cd 	bl	8002eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f8de 	bl	8002ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d122      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d11b      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0208 	mvn.w	r2, #8
 8002d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2204      	movs	r2, #4
 8002d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f8b1 	bl	8002ece <HAL_TIM_IC_CaptureCallback>
 8002d6c:	e005      	b.n	8002d7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f8a3 	bl	8002eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f8b4 	bl	8002ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b10      	cmp	r3, #16
 8002d8c:	d122      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d11b      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0210 	mvn.w	r2, #16
 8002da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2208      	movs	r2, #8
 8002daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f887 	bl	8002ece <HAL_TIM_IC_CaptureCallback>
 8002dc0:	e005      	b.n	8002dce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f879 	bl	8002eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f88a 	bl	8002ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d10e      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d107      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0201 	mvn.w	r2, #1
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fd ff98 	bl	8000d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	2b80      	cmp	r3, #128	; 0x80
 8002e0c:	d10e      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	2b80      	cmp	r3, #128	; 0x80
 8002e1a:	d107      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f91a 	bl	8003060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e3a:	d10e      	bne.n	8002e5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e46:	2b80      	cmp	r3, #128	; 0x80
 8002e48:	d107      	bne.n	8002e5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f90d 	bl	8003074 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d10e      	bne.n	8002e86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e72:	2b40      	cmp	r3, #64	; 0x40
 8002e74:	d107      	bne.n	8002e86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f838 	bl	8002ef6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d10e      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d107      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f06f 0220 	mvn.w	r2, #32
 8002eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f8cd 	bl	800304c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a40      	ldr	r2, [pc, #256]	; (8003020 <TIM_Base_SetConfig+0x114>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d013      	beq.n	8002f4c <TIM_Base_SetConfig+0x40>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2a:	d00f      	beq.n	8002f4c <TIM_Base_SetConfig+0x40>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a3d      	ldr	r2, [pc, #244]	; (8003024 <TIM_Base_SetConfig+0x118>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00b      	beq.n	8002f4c <TIM_Base_SetConfig+0x40>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a3c      	ldr	r2, [pc, #240]	; (8003028 <TIM_Base_SetConfig+0x11c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d007      	beq.n	8002f4c <TIM_Base_SetConfig+0x40>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a3b      	ldr	r2, [pc, #236]	; (800302c <TIM_Base_SetConfig+0x120>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d003      	beq.n	8002f4c <TIM_Base_SetConfig+0x40>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a3a      	ldr	r2, [pc, #232]	; (8003030 <TIM_Base_SetConfig+0x124>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d108      	bne.n	8002f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a2f      	ldr	r2, [pc, #188]	; (8003020 <TIM_Base_SetConfig+0x114>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d02b      	beq.n	8002fbe <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6c:	d027      	beq.n	8002fbe <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a2c      	ldr	r2, [pc, #176]	; (8003024 <TIM_Base_SetConfig+0x118>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d023      	beq.n	8002fbe <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a2b      	ldr	r2, [pc, #172]	; (8003028 <TIM_Base_SetConfig+0x11c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01f      	beq.n	8002fbe <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a2a      	ldr	r2, [pc, #168]	; (800302c <TIM_Base_SetConfig+0x120>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01b      	beq.n	8002fbe <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a29      	ldr	r2, [pc, #164]	; (8003030 <TIM_Base_SetConfig+0x124>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d017      	beq.n	8002fbe <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a28      	ldr	r2, [pc, #160]	; (8003034 <TIM_Base_SetConfig+0x128>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d013      	beq.n	8002fbe <TIM_Base_SetConfig+0xb2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a27      	ldr	r2, [pc, #156]	; (8003038 <TIM_Base_SetConfig+0x12c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00f      	beq.n	8002fbe <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a26      	ldr	r2, [pc, #152]	; (800303c <TIM_Base_SetConfig+0x130>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00b      	beq.n	8002fbe <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a25      	ldr	r2, [pc, #148]	; (8003040 <TIM_Base_SetConfig+0x134>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d007      	beq.n	8002fbe <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a24      	ldr	r2, [pc, #144]	; (8003044 <TIM_Base_SetConfig+0x138>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d003      	beq.n	8002fbe <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a23      	ldr	r2, [pc, #140]	; (8003048 <TIM_Base_SetConfig+0x13c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d108      	bne.n	8002fd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <TIM_Base_SetConfig+0x114>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d003      	beq.n	8003004 <TIM_Base_SetConfig+0xf8>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a0c      	ldr	r2, [pc, #48]	; (8003030 <TIM_Base_SetConfig+0x124>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d103      	bne.n	800300c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	615a      	str	r2, [r3, #20]
}
 8003012:	bf00      	nop
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40010000 	.word	0x40010000
 8003024:	40000400 	.word	0x40000400
 8003028:	40000800 	.word	0x40000800
 800302c:	40000c00 	.word	0x40000c00
 8003030:	40010400 	.word	0x40010400
 8003034:	40014000 	.word	0x40014000
 8003038:	40014400 	.word	0x40014400
 800303c:	40014800 	.word	0x40014800
 8003040:	40001800 	.word	0x40001800
 8003044:	40001c00 	.word	0x40001c00
 8003048:	40002000 	.word	0x40002000

0800304c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e040      	b.n	800311c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd feba 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2224      	movs	r2, #36	; 0x24
 80030b4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fa04 	bl	80034d4 <UART_SetConfig>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e022      	b.n	800311c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fca2 	bl	8003a28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003102:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fd29 	bl	8003b6c <UART_CheckIdleState>
 800311a:	4603      	mov	r3, r0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003138:	2b20      	cmp	r3, #32
 800313a:	d17f      	bne.n	800323c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_UART_Transmit+0x24>
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e078      	b.n	800323e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_UART_Transmit+0x36>
 8003156:	2302      	movs	r3, #2
 8003158:	e071      	b.n	800323e <HAL_UART_Transmit+0x11a>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2221      	movs	r2, #33	; 0x21
 800316c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800316e:	f7fe f81b 	bl	80011a8 <HAL_GetTick>
 8003172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	88fa      	ldrh	r2, [r7, #6]
 8003178:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	88fa      	ldrh	r2, [r7, #6]
 8003180:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318c:	d108      	bne.n	80031a0 <HAL_UART_Transmit+0x7c>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d104      	bne.n	80031a0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	e003      	b.n	80031a8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80031b0:	e02c      	b.n	800320c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2200      	movs	r2, #0
 80031ba:	2180      	movs	r1, #128	; 0x80
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fd04 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e038      	b.n	800323e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10b      	bne.n	80031ea <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	3302      	adds	r3, #2
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	e007      	b.n	80031fa <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	781a      	ldrb	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	3301      	adds	r3, #1
 80031f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1cc      	bne.n	80031b2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2200      	movs	r2, #0
 8003220:	2140      	movs	r1, #64	; 0x40
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 fcd1 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e005      	b.n	800323e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	e000      	b.n	800323e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800323c:	2302      	movs	r3, #2
  }
}
 800323e:	4618      	mov	r0, r3
 8003240:	3720      	adds	r7, #32
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	f640 030f 	movw	r3, #2063	; 0x80f
 800326e:	4013      	ands	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d113      	bne.n	80032a0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00e      	beq.n	80032a0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8100 	beq.w	8003496 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
      }
      return;
 800329e:	e0fa      	b.n	8003496 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80d5 	beq.w	8003452 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80ca 	beq.w	8003452 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00e      	beq.n	80032e6 <HAL_UART_IRQHandler+0x9e>
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2201      	movs	r2, #1
 80032d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00e      	beq.n	800330e <HAL_UART_IRQHandler+0xc6>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2202      	movs	r2, #2
 8003300:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003306:	f043 0204 	orr.w	r2, r3, #4
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00e      	beq.n	8003336 <HAL_UART_IRQHandler+0xee>
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2204      	movs	r2, #4
 8003328:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800332e:	f043 0202 	orr.w	r2, r3, #2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d013      	beq.n	8003368 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003350:	2b00      	cmp	r3, #0
 8003352:	d009      	beq.n	8003368 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2208      	movs	r2, #8
 800335a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003360:	f043 0208 	orr.w	r2, r3, #8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00f      	beq.n	8003392 <HAL_UART_IRQHandler+0x14a>
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003384:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800338a:	f043 0220 	orr.w	r2, r3, #32
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d07f      	beq.n	800349a <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00c      	beq.n	80033be <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d007      	beq.n	80033be <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d004      	beq.n	80033dc <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d031      	beq.n	8003440 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fc6f 	bl	8003cc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ec:	2b40      	cmp	r3, #64	; 0x40
 80033ee:	d123      	bne.n	8003438 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033fe:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800340c:	4a26      	ldr	r2, [pc, #152]	; (80034a8 <HAL_UART_IRQHandler+0x260>)
 800340e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd ffd7 	bl	80013c8 <HAL_DMA_Abort_IT>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d016      	beq.n	800344e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800342a:	4610      	mov	r0, r2
 800342c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800342e:	e00e      	b.n	800344e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f845 	bl	80034c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003436:	e00a      	b.n	800344e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f841 	bl	80034c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343e:	e006      	b.n	800344e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f83d 	bl	80034c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800344c:	e025      	b.n	800349a <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800344e:	bf00      	nop
    return;
 8003450:	e023      	b.n	800349a <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00d      	beq.n	8003478 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	2b00      	cmp	r3, #0
 8003464:	d008      	beq.n	8003478 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800346a:	2b00      	cmp	r3, #0
 800346c:	d017      	beq.n	800349e <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	4798      	blx	r3
    }
    return;
 8003476:	e012      	b.n	800349e <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00e      	beq.n	80034a0 <HAL_UART_IRQHandler+0x258>
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	d009      	beq.n	80034a0 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fc4d 	bl	8003d2c <UART_EndTransmit_IT>
    return;
 8003492:	bf00      	nop
 8003494:	e004      	b.n	80034a0 <HAL_UART_IRQHandler+0x258>
      return;
 8003496:	bf00      	nop
 8003498:	e002      	b.n	80034a0 <HAL_UART_IRQHandler+0x258>
    return;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <HAL_UART_IRQHandler+0x258>
    return;
 800349e:	bf00      	nop
  }

}
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	08003d01 	.word	0x08003d01

080034ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80034dc:	2300      	movs	r3, #0
 80034de:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	4bb1      	ldr	r3, [pc, #708]	; (80037c8 <UART_SetConfig+0x2f4>)
 8003504:	4013      	ands	r3, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	6939      	ldr	r1, [r7, #16]
 800350c:	430b      	orrs	r3, r1
 800350e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a9f      	ldr	r2, [pc, #636]	; (80037cc <UART_SetConfig+0x2f8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d121      	bne.n	8003598 <UART_SetConfig+0xc4>
 8003554:	4b9e      	ldr	r3, [pc, #632]	; (80037d0 <UART_SetConfig+0x2fc>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b03      	cmp	r3, #3
 8003560:	d816      	bhi.n	8003590 <UART_SetConfig+0xbc>
 8003562:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <UART_SetConfig+0x94>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	08003579 	.word	0x08003579
 800356c:	08003585 	.word	0x08003585
 8003570:	0800357f 	.word	0x0800357f
 8003574:	0800358b 	.word	0x0800358b
 8003578:	2301      	movs	r3, #1
 800357a:	77fb      	strb	r3, [r7, #31]
 800357c:	e151      	b.n	8003822 <UART_SetConfig+0x34e>
 800357e:	2302      	movs	r3, #2
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	e14e      	b.n	8003822 <UART_SetConfig+0x34e>
 8003584:	2304      	movs	r3, #4
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e14b      	b.n	8003822 <UART_SetConfig+0x34e>
 800358a:	2308      	movs	r3, #8
 800358c:	77fb      	strb	r3, [r7, #31]
 800358e:	e148      	b.n	8003822 <UART_SetConfig+0x34e>
 8003590:	2310      	movs	r3, #16
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	bf00      	nop
 8003596:	e144      	b.n	8003822 <UART_SetConfig+0x34e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a8d      	ldr	r2, [pc, #564]	; (80037d4 <UART_SetConfig+0x300>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d134      	bne.n	800360c <UART_SetConfig+0x138>
 80035a2:	4b8b      	ldr	r3, [pc, #556]	; (80037d0 <UART_SetConfig+0x2fc>)
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	2b0c      	cmp	r3, #12
 80035ae:	d829      	bhi.n	8003604 <UART_SetConfig+0x130>
 80035b0:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <UART_SetConfig+0xe4>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	080035ed 	.word	0x080035ed
 80035bc:	08003605 	.word	0x08003605
 80035c0:	08003605 	.word	0x08003605
 80035c4:	08003605 	.word	0x08003605
 80035c8:	080035f9 	.word	0x080035f9
 80035cc:	08003605 	.word	0x08003605
 80035d0:	08003605 	.word	0x08003605
 80035d4:	08003605 	.word	0x08003605
 80035d8:	080035f3 	.word	0x080035f3
 80035dc:	08003605 	.word	0x08003605
 80035e0:	08003605 	.word	0x08003605
 80035e4:	08003605 	.word	0x08003605
 80035e8:	080035ff 	.word	0x080035ff
 80035ec:	2300      	movs	r3, #0
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	e117      	b.n	8003822 <UART_SetConfig+0x34e>
 80035f2:	2302      	movs	r3, #2
 80035f4:	77fb      	strb	r3, [r7, #31]
 80035f6:	e114      	b.n	8003822 <UART_SetConfig+0x34e>
 80035f8:	2304      	movs	r3, #4
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e111      	b.n	8003822 <UART_SetConfig+0x34e>
 80035fe:	2308      	movs	r3, #8
 8003600:	77fb      	strb	r3, [r7, #31]
 8003602:	e10e      	b.n	8003822 <UART_SetConfig+0x34e>
 8003604:	2310      	movs	r3, #16
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	bf00      	nop
 800360a:	e10a      	b.n	8003822 <UART_SetConfig+0x34e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a71      	ldr	r2, [pc, #452]	; (80037d8 <UART_SetConfig+0x304>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d120      	bne.n	8003658 <UART_SetConfig+0x184>
 8003616:	4b6e      	ldr	r3, [pc, #440]	; (80037d0 <UART_SetConfig+0x2fc>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003620:	2b10      	cmp	r3, #16
 8003622:	d00f      	beq.n	8003644 <UART_SetConfig+0x170>
 8003624:	2b10      	cmp	r3, #16
 8003626:	d802      	bhi.n	800362e <UART_SetConfig+0x15a>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <UART_SetConfig+0x164>
 800362c:	e010      	b.n	8003650 <UART_SetConfig+0x17c>
 800362e:	2b20      	cmp	r3, #32
 8003630:	d005      	beq.n	800363e <UART_SetConfig+0x16a>
 8003632:	2b30      	cmp	r3, #48	; 0x30
 8003634:	d009      	beq.n	800364a <UART_SetConfig+0x176>
 8003636:	e00b      	b.n	8003650 <UART_SetConfig+0x17c>
 8003638:	2300      	movs	r3, #0
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e0f1      	b.n	8003822 <UART_SetConfig+0x34e>
 800363e:	2302      	movs	r3, #2
 8003640:	77fb      	strb	r3, [r7, #31]
 8003642:	e0ee      	b.n	8003822 <UART_SetConfig+0x34e>
 8003644:	2304      	movs	r3, #4
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e0eb      	b.n	8003822 <UART_SetConfig+0x34e>
 800364a:	2308      	movs	r3, #8
 800364c:	77fb      	strb	r3, [r7, #31]
 800364e:	e0e8      	b.n	8003822 <UART_SetConfig+0x34e>
 8003650:	2310      	movs	r3, #16
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	bf00      	nop
 8003656:	e0e4      	b.n	8003822 <UART_SetConfig+0x34e>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a5f      	ldr	r2, [pc, #380]	; (80037dc <UART_SetConfig+0x308>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d120      	bne.n	80036a4 <UART_SetConfig+0x1d0>
 8003662:	4b5b      	ldr	r3, [pc, #364]	; (80037d0 <UART_SetConfig+0x2fc>)
 8003664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003668:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800366c:	2b40      	cmp	r3, #64	; 0x40
 800366e:	d00f      	beq.n	8003690 <UART_SetConfig+0x1bc>
 8003670:	2b40      	cmp	r3, #64	; 0x40
 8003672:	d802      	bhi.n	800367a <UART_SetConfig+0x1a6>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <UART_SetConfig+0x1b0>
 8003678:	e010      	b.n	800369c <UART_SetConfig+0x1c8>
 800367a:	2b80      	cmp	r3, #128	; 0x80
 800367c:	d005      	beq.n	800368a <UART_SetConfig+0x1b6>
 800367e:	2bc0      	cmp	r3, #192	; 0xc0
 8003680:	d009      	beq.n	8003696 <UART_SetConfig+0x1c2>
 8003682:	e00b      	b.n	800369c <UART_SetConfig+0x1c8>
 8003684:	2300      	movs	r3, #0
 8003686:	77fb      	strb	r3, [r7, #31]
 8003688:	e0cb      	b.n	8003822 <UART_SetConfig+0x34e>
 800368a:	2302      	movs	r3, #2
 800368c:	77fb      	strb	r3, [r7, #31]
 800368e:	e0c8      	b.n	8003822 <UART_SetConfig+0x34e>
 8003690:	2304      	movs	r3, #4
 8003692:	77fb      	strb	r3, [r7, #31]
 8003694:	e0c5      	b.n	8003822 <UART_SetConfig+0x34e>
 8003696:	2308      	movs	r3, #8
 8003698:	77fb      	strb	r3, [r7, #31]
 800369a:	e0c2      	b.n	8003822 <UART_SetConfig+0x34e>
 800369c:	2310      	movs	r3, #16
 800369e:	77fb      	strb	r3, [r7, #31]
 80036a0:	bf00      	nop
 80036a2:	e0be      	b.n	8003822 <UART_SetConfig+0x34e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a4d      	ldr	r2, [pc, #308]	; (80037e0 <UART_SetConfig+0x30c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d124      	bne.n	80036f8 <UART_SetConfig+0x224>
 80036ae:	4b48      	ldr	r3, [pc, #288]	; (80037d0 <UART_SetConfig+0x2fc>)
 80036b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036bc:	d012      	beq.n	80036e4 <UART_SetConfig+0x210>
 80036be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c2:	d802      	bhi.n	80036ca <UART_SetConfig+0x1f6>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <UART_SetConfig+0x204>
 80036c8:	e012      	b.n	80036f0 <UART_SetConfig+0x21c>
 80036ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ce:	d006      	beq.n	80036de <UART_SetConfig+0x20a>
 80036d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036d4:	d009      	beq.n	80036ea <UART_SetConfig+0x216>
 80036d6:	e00b      	b.n	80036f0 <UART_SetConfig+0x21c>
 80036d8:	2300      	movs	r3, #0
 80036da:	77fb      	strb	r3, [r7, #31]
 80036dc:	e0a1      	b.n	8003822 <UART_SetConfig+0x34e>
 80036de:	2302      	movs	r3, #2
 80036e0:	77fb      	strb	r3, [r7, #31]
 80036e2:	e09e      	b.n	8003822 <UART_SetConfig+0x34e>
 80036e4:	2304      	movs	r3, #4
 80036e6:	77fb      	strb	r3, [r7, #31]
 80036e8:	e09b      	b.n	8003822 <UART_SetConfig+0x34e>
 80036ea:	2308      	movs	r3, #8
 80036ec:	77fb      	strb	r3, [r7, #31]
 80036ee:	e098      	b.n	8003822 <UART_SetConfig+0x34e>
 80036f0:	2310      	movs	r3, #16
 80036f2:	77fb      	strb	r3, [r7, #31]
 80036f4:	bf00      	nop
 80036f6:	e094      	b.n	8003822 <UART_SetConfig+0x34e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a39      	ldr	r2, [pc, #228]	; (80037e4 <UART_SetConfig+0x310>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d124      	bne.n	800374c <UART_SetConfig+0x278>
 8003702:	4b33      	ldr	r3, [pc, #204]	; (80037d0 <UART_SetConfig+0x2fc>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800370c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003710:	d012      	beq.n	8003738 <UART_SetConfig+0x264>
 8003712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003716:	d802      	bhi.n	800371e <UART_SetConfig+0x24a>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <UART_SetConfig+0x258>
 800371c:	e012      	b.n	8003744 <UART_SetConfig+0x270>
 800371e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003722:	d006      	beq.n	8003732 <UART_SetConfig+0x25e>
 8003724:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003728:	d009      	beq.n	800373e <UART_SetConfig+0x26a>
 800372a:	e00b      	b.n	8003744 <UART_SetConfig+0x270>
 800372c:	2301      	movs	r3, #1
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e077      	b.n	8003822 <UART_SetConfig+0x34e>
 8003732:	2302      	movs	r3, #2
 8003734:	77fb      	strb	r3, [r7, #31]
 8003736:	e074      	b.n	8003822 <UART_SetConfig+0x34e>
 8003738:	2304      	movs	r3, #4
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e071      	b.n	8003822 <UART_SetConfig+0x34e>
 800373e:	2308      	movs	r3, #8
 8003740:	77fb      	strb	r3, [r7, #31]
 8003742:	e06e      	b.n	8003822 <UART_SetConfig+0x34e>
 8003744:	2310      	movs	r3, #16
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	bf00      	nop
 800374a:	e06a      	b.n	8003822 <UART_SetConfig+0x34e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a25      	ldr	r2, [pc, #148]	; (80037e8 <UART_SetConfig+0x314>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d124      	bne.n	80037a0 <UART_SetConfig+0x2cc>
 8003756:	4b1e      	ldr	r3, [pc, #120]	; (80037d0 <UART_SetConfig+0x2fc>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003764:	d012      	beq.n	800378c <UART_SetConfig+0x2b8>
 8003766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376a:	d802      	bhi.n	8003772 <UART_SetConfig+0x29e>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d007      	beq.n	8003780 <UART_SetConfig+0x2ac>
 8003770:	e012      	b.n	8003798 <UART_SetConfig+0x2c4>
 8003772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003776:	d006      	beq.n	8003786 <UART_SetConfig+0x2b2>
 8003778:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800377c:	d009      	beq.n	8003792 <UART_SetConfig+0x2be>
 800377e:	e00b      	b.n	8003798 <UART_SetConfig+0x2c4>
 8003780:	2300      	movs	r3, #0
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e04d      	b.n	8003822 <UART_SetConfig+0x34e>
 8003786:	2302      	movs	r3, #2
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e04a      	b.n	8003822 <UART_SetConfig+0x34e>
 800378c:	2304      	movs	r3, #4
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e047      	b.n	8003822 <UART_SetConfig+0x34e>
 8003792:	2308      	movs	r3, #8
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e044      	b.n	8003822 <UART_SetConfig+0x34e>
 8003798:	2310      	movs	r3, #16
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	bf00      	nop
 800379e:	e040      	b.n	8003822 <UART_SetConfig+0x34e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a11      	ldr	r2, [pc, #68]	; (80037ec <UART_SetConfig+0x318>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d139      	bne.n	800381e <UART_SetConfig+0x34a>
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <UART_SetConfig+0x2fc>)
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037b8:	d027      	beq.n	800380a <UART_SetConfig+0x336>
 80037ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037be:	d817      	bhi.n	80037f0 <UART_SetConfig+0x31c>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01c      	beq.n	80037fe <UART_SetConfig+0x32a>
 80037c4:	e027      	b.n	8003816 <UART_SetConfig+0x342>
 80037c6:	bf00      	nop
 80037c8:	efff69f3 	.word	0xefff69f3
 80037cc:	40011000 	.word	0x40011000
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40004400 	.word	0x40004400
 80037d8:	40004800 	.word	0x40004800
 80037dc:	40004c00 	.word	0x40004c00
 80037e0:	40005000 	.word	0x40005000
 80037e4:	40011400 	.word	0x40011400
 80037e8:	40007800 	.word	0x40007800
 80037ec:	40007c00 	.word	0x40007c00
 80037f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f4:	d006      	beq.n	8003804 <UART_SetConfig+0x330>
 80037f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037fa:	d009      	beq.n	8003810 <UART_SetConfig+0x33c>
 80037fc:	e00b      	b.n	8003816 <UART_SetConfig+0x342>
 80037fe:	2300      	movs	r3, #0
 8003800:	77fb      	strb	r3, [r7, #31]
 8003802:	e00e      	b.n	8003822 <UART_SetConfig+0x34e>
 8003804:	2302      	movs	r3, #2
 8003806:	77fb      	strb	r3, [r7, #31]
 8003808:	e00b      	b.n	8003822 <UART_SetConfig+0x34e>
 800380a:	2304      	movs	r3, #4
 800380c:	77fb      	strb	r3, [r7, #31]
 800380e:	e008      	b.n	8003822 <UART_SetConfig+0x34e>
 8003810:	2308      	movs	r3, #8
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e005      	b.n	8003822 <UART_SetConfig+0x34e>
 8003816:	2310      	movs	r3, #16
 8003818:	77fb      	strb	r3, [r7, #31]
 800381a:	bf00      	nop
 800381c:	e001      	b.n	8003822 <UART_SetConfig+0x34e>
 800381e:	2310      	movs	r3, #16
 8003820:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800382a:	d17f      	bne.n	800392c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800382c:	7ffb      	ldrb	r3, [r7, #31]
 800382e:	2b08      	cmp	r3, #8
 8003830:	d85c      	bhi.n	80038ec <UART_SetConfig+0x418>
 8003832:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <UART_SetConfig+0x364>)
 8003834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003838:	0800385d 	.word	0x0800385d
 800383c:	0800387d 	.word	0x0800387d
 8003840:	0800389d 	.word	0x0800389d
 8003844:	080038ed 	.word	0x080038ed
 8003848:	080038b5 	.word	0x080038b5
 800384c:	080038ed 	.word	0x080038ed
 8003850:	080038ed 	.word	0x080038ed
 8003854:	080038ed 	.word	0x080038ed
 8003858:	080038d5 	.word	0x080038d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800385c:	f7fe fd66 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 8003860:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	005a      	lsls	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	085b      	lsrs	r3, r3, #1
 800386c:	441a      	add	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	fbb2 f3f3 	udiv	r3, r2, r3
 8003876:	b29b      	uxth	r3, r3
 8003878:	61bb      	str	r3, [r7, #24]
        break;
 800387a:	e03a      	b.n	80038f2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800387c:	f7fe fd6a 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 8003880:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	005a      	lsls	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	085b      	lsrs	r3, r3, #1
 800388c:	441a      	add	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	fbb2 f3f3 	udiv	r3, r2, r3
 8003896:	b29b      	uxth	r3, r3
 8003898:	61bb      	str	r3, [r7, #24]
        break;
 800389a:	e02a      	b.n	80038f2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	085a      	lsrs	r2, r3, #1
 80038a2:	4b5f      	ldr	r3, [pc, #380]	; (8003a20 <UART_SetConfig+0x54c>)
 80038a4:	4413      	add	r3, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6852      	ldr	r2, [r2, #4]
 80038aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	61bb      	str	r3, [r7, #24]
        break;
 80038b2:	e01e      	b.n	80038f2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038b4:	f7fe fc56 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 80038b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	005a      	lsls	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	085b      	lsrs	r3, r3, #1
 80038c4:	441a      	add	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	61bb      	str	r3, [r7, #24]
        break;
 80038d2:	e00e      	b.n	80038f2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	085b      	lsrs	r3, r3, #1
 80038da:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	61bb      	str	r3, [r7, #24]
        break;
 80038ea:	e002      	b.n	80038f2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	75fb      	strb	r3, [r7, #23]
        break;
 80038f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b0f      	cmp	r3, #15
 80038f6:	d916      	bls.n	8003926 <UART_SetConfig+0x452>
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fe:	d212      	bcs.n	8003926 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	b29b      	uxth	r3, r3
 8003904:	f023 030f 	bic.w	r3, r3, #15
 8003908:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	085b      	lsrs	r3, r3, #1
 800390e:	b29b      	uxth	r3, r3
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	b29a      	uxth	r2, r3
 8003916:	897b      	ldrh	r3, [r7, #10]
 8003918:	4313      	orrs	r3, r2
 800391a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	897a      	ldrh	r2, [r7, #10]
 8003922:	60da      	str	r2, [r3, #12]
 8003924:	e070      	b.n	8003a08 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	75fb      	strb	r3, [r7, #23]
 800392a:	e06d      	b.n	8003a08 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800392c:	7ffb      	ldrb	r3, [r7, #31]
 800392e:	2b08      	cmp	r3, #8
 8003930:	d859      	bhi.n	80039e6 <UART_SetConfig+0x512>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <UART_SetConfig+0x464>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	0800395d 	.word	0x0800395d
 800393c:	0800397b 	.word	0x0800397b
 8003940:	08003999 	.word	0x08003999
 8003944:	080039e7 	.word	0x080039e7
 8003948:	080039b1 	.word	0x080039b1
 800394c:	080039e7 	.word	0x080039e7
 8003950:	080039e7 	.word	0x080039e7
 8003954:	080039e7 	.word	0x080039e7
 8003958:	080039cf 	.word	0x080039cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800395c:	f7fe fce6 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 8003960:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	085a      	lsrs	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	441a      	add	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	b29b      	uxth	r3, r3
 8003976:	61bb      	str	r3, [r7, #24]
        break;
 8003978:	e038      	b.n	80039ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800397a:	f7fe fceb 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 800397e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	085a      	lsrs	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	441a      	add	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	b29b      	uxth	r3, r3
 8003994:	61bb      	str	r3, [r7, #24]
        break;
 8003996:	e029      	b.n	80039ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	085a      	lsrs	r2, r3, #1
 800399e:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <UART_SetConfig+0x550>)
 80039a0:	4413      	add	r3, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6852      	ldr	r2, [r2, #4]
 80039a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	61bb      	str	r3, [r7, #24]
        break;
 80039ae:	e01d      	b.n	80039ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039b0:	f7fe fbd8 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 80039b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	085a      	lsrs	r2, r3, #1
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	441a      	add	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	61bb      	str	r3, [r7, #24]
        break;
 80039cc:	e00e      	b.n	80039ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	61bb      	str	r3, [r7, #24]
        break;
 80039e4:	e002      	b.n	80039ec <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	75fb      	strb	r3, [r7, #23]
        break;
 80039ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b0f      	cmp	r3, #15
 80039f0:	d908      	bls.n	8003a04 <UART_SetConfig+0x530>
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d204      	bcs.n	8003a04 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	e001      	b.n	8003a08 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	01e84800 	.word	0x01e84800
 8003a24:	00f42400 	.word	0x00f42400

08003a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01a      	beq.n	8003b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b26:	d10a      	bne.n	8003b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	605a      	str	r2, [r3, #4]
  }
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003b7a:	f7fd fb15 	bl	80011a8 <HAL_GetTick>
 8003b7e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d10e      	bne.n	8003bac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f814 	bl	8003bca <UART_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e00a      	b.n	8003bc2 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bda:	e05d      	b.n	8003c98 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be2:	d059      	beq.n	8003c98 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be4:	f7fd fae0 	bl	80011a8 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d302      	bcc.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x30>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d11b      	bne.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c08:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e042      	b.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d02b      	beq.n	8003c98 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4e:	d123      	bne.n	8003c98 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c58:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c68:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0201 	bic.w	r2, r2, #1
 8003c78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e00f      	b.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69da      	ldr	r2, [r3, #28]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d092      	beq.n	8003bdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cd6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7ff fbce 	bl	80034c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d42:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff fbab 	bl	80034ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d60:	b084      	sub	sp, #16
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	f107 001c 	add.w	r0, r7, #28
 8003d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d120      	bne.n	8003dba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	4b20      	ldr	r3, [pc, #128]	; (8003e0c <USB_CoreInit+0xac>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d105      	bne.n	8003dae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fa52 	bl	8004258 <USB_CoreReset>
 8003db4:	4603      	mov	r3, r0
 8003db6:	73fb      	strb	r3, [r7, #15]
 8003db8:	e010      	b.n	8003ddc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fa46 	bl	8004258 <USB_CoreReset>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d10b      	bne.n	8003dfa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f043 0206 	orr.w	r2, r3, #6
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f043 0220 	orr.w	r2, r3, #32
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e06:	b004      	add	sp, #16
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	ffbdffbf 	.word	0xffbdffbf

08003e10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f023 0201 	bic.w	r2, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d106      	bne.n	8003e5e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	60da      	str	r2, [r3, #12]
 8003e5c:	e00b      	b.n	8003e76 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d106      	bne.n	8003e72 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	60da      	str	r2, [r3, #12]
 8003e70:	e001      	b.n	8003e76 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e003      	b.n	8003e7e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003e76:	2032      	movs	r0, #50	; 0x32
 8003e78:	f7fd f9a2 	bl	80011c0 <HAL_Delay>

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e88:	b084      	sub	sp, #16
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b086      	sub	sp, #24
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	e009      	b.n	8003ebc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	3340      	adds	r3, #64	; 0x40
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b0e      	cmp	r3, #14
 8003ec0:	d9f2      	bls.n	8003ea8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11c      	bne.n	8003f02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ed6:	f043 0302 	orr.w	r3, r3, #2
 8003eda:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	e005      	b.n	8003f0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f14:	461a      	mov	r2, r3
 8003f16:	2300      	movs	r3, #0
 8003f18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f20:	4619      	mov	r1, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f28:	461a      	mov	r2, r3
 8003f2a:	680b      	ldr	r3, [r1, #0]
 8003f2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d10c      	bne.n	8003f4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d104      	bne.n	8003f44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f959 	bl	80041f4 <USB_SetDevSpeed>
 8003f42:	e018      	b.n	8003f76 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f44:	2101      	movs	r1, #1
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f954 	bl	80041f4 <USB_SetDevSpeed>
 8003f4c:	e013      	b.n	8003f76 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d10c      	bne.n	8003f6e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d104      	bne.n	8003f64 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f949 	bl	80041f4 <USB_SetDevSpeed>
 8003f62:	e008      	b.n	8003f76 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f64:	2101      	movs	r1, #1
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f944 	bl	80041f4 <USB_SetDevSpeed>
 8003f6c:	e003      	b.n	8003f76 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f6e:	2103      	movs	r1, #3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f93f 	bl	80041f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f76:	2110      	movs	r1, #16
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f8f3 	bl	8004164 <USB_FlushTxFifo>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f911 	bl	80041b0 <USB_FlushRxFifo>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003faa:	461a      	mov	r2, r3
 8003fac:	2300      	movs	r3, #0
 8003fae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	e043      	b.n	800404a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fd8:	d118      	bne.n	800400c <USB_DevInit+0x184>
    {
      if (i == 0U)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10a      	bne.n	8003ff6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fec:	461a      	mov	r2, r3
 8003fee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	e013      	b.n	800401e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004002:	461a      	mov	r2, r3
 8004004:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	e008      	b.n	800401e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004018:	461a      	mov	r2, r3
 800401a:	2300      	movs	r3, #0
 800401c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402a:	461a      	mov	r2, r3
 800402c:	2300      	movs	r3, #0
 800402e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403c:	461a      	mov	r2, r3
 800403e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004042:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	3301      	adds	r3, #1
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	429a      	cmp	r2, r3
 8004050:	d3b7      	bcc.n	8003fc2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	e043      	b.n	80040e0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800406a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800406e:	d118      	bne.n	80040a2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004082:	461a      	mov	r2, r3
 8004084:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e013      	b.n	80040b4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004098:	461a      	mov	r2, r3
 800409a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	e008      	b.n	80040b4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ae:	461a      	mov	r2, r3
 80040b0:	2300      	movs	r3, #0
 80040b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c0:	461a      	mov	r2, r3
 80040c2:	2300      	movs	r3, #0
 80040c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d2:	461a      	mov	r2, r3
 80040d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	3301      	adds	r3, #1
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d3b7      	bcc.n	8004058 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004108:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	2b00      	cmp	r3, #0
 800410e:	d105      	bne.n	800411c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	f043 0210 	orr.w	r2, r3, #16
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699a      	ldr	r2, [r3, #24]
 8004120:	4b0e      	ldr	r3, [pc, #56]	; (800415c <USB_DevInit+0x2d4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f043 0208 	orr.w	r2, r3, #8
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800413a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413c:	2b01      	cmp	r3, #1
 800413e:	d105      	bne.n	800414c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699a      	ldr	r2, [r3, #24]
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <USB_DevInit+0x2d8>)
 8004146:	4313      	orrs	r3, r2
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800414c:	7dfb      	ldrb	r3, [r7, #23]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004158:	b004      	add	sp, #16
 800415a:	4770      	bx	lr
 800415c:	803c3800 	.word	0x803c3800
 8004160:	40000004 	.word	0x40000004

08004164 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	019b      	lsls	r3, r3, #6
 8004176:	f043 0220 	orr.w	r2, r3, #32
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3301      	adds	r3, #1
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4a09      	ldr	r2, [pc, #36]	; (80041ac <USB_FlushTxFifo+0x48>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d901      	bls.n	8004190 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e006      	b.n	800419e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b20      	cmp	r3, #32
 800419a:	d0f0      	beq.n	800417e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	00030d40 	.word	0x00030d40

080041b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2210      	movs	r2, #16
 80041c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3301      	adds	r3, #1
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <USB_FlushRxFifo+0x40>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d901      	bls.n	80041d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e006      	b.n	80041e2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d0f0      	beq.n	80041c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	00030d40 	.word	0x00030d40

080041f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	68f9      	ldr	r1, [r7, #12]
 8004210:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004214:	4313      	orrs	r3, r2
 8004216:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004240:	f043 0302 	orr.w	r3, r3, #2
 8004244:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004246:	2003      	movs	r0, #3
 8004248:	f7fc ffba 	bl	80011c0 <HAL_Delay>

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	3301      	adds	r3, #1
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4a13      	ldr	r2, [pc, #76]	; (80042bc <USB_CoreReset+0x64>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e01b      	b.n	80042ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	daf2      	bge.n	8004264 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f043 0201 	orr.w	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3301      	adds	r3, #1
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4a09      	ldr	r2, [pc, #36]	; (80042bc <USB_CoreReset+0x64>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d901      	bls.n	80042a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e006      	b.n	80042ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d0f0      	beq.n	800428e <USB_CoreReset+0x36>

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	00030d40 	.word	0x00030d40

080042c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042d6:	f3ef 8305 	mrs	r3, IPSR
 80042da:	60bb      	str	r3, [r7, #8]
  return(result);
 80042dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10f      	bne.n	8004302 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042e2:	f3ef 8310 	mrs	r3, PRIMASK
 80042e6:	607b      	str	r3, [r7, #4]
  return(result);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d105      	bne.n	80042fa <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042ee:	f3ef 8311 	mrs	r3, BASEPRI
 80042f2:	603b      	str	r3, [r7, #0]
  return(result);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d007      	beq.n	800430a <osKernelInitialize+0x3a>
 80042fa:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <osKernelInitialize+0x64>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d103      	bne.n	800430a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004302:	f06f 0305 	mvn.w	r3, #5
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	e00c      	b.n	8004324 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <osKernelInitialize+0x64>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d105      	bne.n	800431e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <osKernelInitialize+0x64>)
 8004314:	2201      	movs	r2, #1
 8004316:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e002      	b.n	8004324 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800431e:	f04f 33ff 	mov.w	r3, #4294967295
 8004322:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004324:	68fb      	ldr	r3, [r7, #12]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	20000094 	.word	0x20000094

08004338 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800433e:	f3ef 8305 	mrs	r3, IPSR
 8004342:	60bb      	str	r3, [r7, #8]
  return(result);
 8004344:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10f      	bne.n	800436a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800434a:	f3ef 8310 	mrs	r3, PRIMASK
 800434e:	607b      	str	r3, [r7, #4]
  return(result);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d105      	bne.n	8004362 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004356:	f3ef 8311 	mrs	r3, BASEPRI
 800435a:	603b      	str	r3, [r7, #0]
  return(result);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <osKernelStart+0x3a>
 8004362:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <osKernelStart+0x68>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d103      	bne.n	8004372 <osKernelStart+0x3a>
    stat = osErrorISR;
 800436a:	f06f 0305 	mvn.w	r3, #5
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	e010      	b.n	8004394 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004372:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <osKernelStart+0x68>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d109      	bne.n	800438e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800437a:	f7ff ffa1 	bl	80042c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800437e:	4b08      	ldr	r3, [pc, #32]	; (80043a0 <osKernelStart+0x68>)
 8004380:	2202      	movs	r2, #2
 8004382:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004384:	f001 fb58 	bl	8005a38 <vTaskStartScheduler>
      stat = osOK;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	e002      	b.n	8004394 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800438e:	f04f 33ff 	mov.w	r3, #4294967295
 8004392:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004394:	68fb      	ldr	r3, [r7, #12]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000094 	.word	0x20000094

080043a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b090      	sub	sp, #64	; 0x40
 80043a8:	af04      	add	r7, sp, #16
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043b4:	f3ef 8305 	mrs	r3, IPSR
 80043b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80043ba:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f040 808f 	bne.w	80044e0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c2:	f3ef 8310 	mrs	r3, PRIMASK
 80043c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d105      	bne.n	80043da <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043ce:	f3ef 8311 	mrs	r3, BASEPRI
 80043d2:	617b      	str	r3, [r7, #20]
  return(result);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <osThreadNew+0x3e>
 80043da:	4b44      	ldr	r3, [pc, #272]	; (80044ec <osThreadNew+0x148>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d07e      	beq.n	80044e0 <osThreadNew+0x13c>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d07b      	beq.n	80044e0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80043ec:	2318      	movs	r3, #24
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80043f4:	f04f 33ff 	mov.w	r3, #4294967295
 80043f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d045      	beq.n	800448c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <osThreadNew+0x6a>
        name = attr->name;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	2b00      	cmp	r3, #0
 8004420:	d008      	beq.n	8004434 <osThreadNew+0x90>
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	2b38      	cmp	r3, #56	; 0x38
 8004426:	d805      	bhi.n	8004434 <osThreadNew+0x90>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <osThreadNew+0x94>
        return (NULL);
 8004434:	2300      	movs	r3, #0
 8004436:	e054      	b.n	80044e2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	089b      	lsrs	r3, r3, #2
 8004446:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00e      	beq.n	800446e <osThreadNew+0xca>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	2b5b      	cmp	r3, #91	; 0x5b
 8004456:	d90a      	bls.n	800446e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800445c:	2b00      	cmp	r3, #0
 800445e:	d006      	beq.n	800446e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <osThreadNew+0xca>
        mem = 1;
 8004468:	2301      	movs	r3, #1
 800446a:	623b      	str	r3, [r7, #32]
 800446c:	e010      	b.n	8004490 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10c      	bne.n	8004490 <osThreadNew+0xec>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d108      	bne.n	8004490 <osThreadNew+0xec>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d104      	bne.n	8004490 <osThreadNew+0xec>
          mem = 0;
 8004486:	2300      	movs	r3, #0
 8004488:	623b      	str	r3, [r7, #32]
 800448a:	e001      	b.n	8004490 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d110      	bne.n	80044b8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800449e:	9202      	str	r2, [sp, #8]
 80044a0:	9301      	str	r3, [sp, #4]
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f001 f8f7 	bl	80056a0 <xTaskCreateStatic>
 80044b2:	4603      	mov	r3, r0
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	e013      	b.n	80044e0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d110      	bne.n	80044e0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	f107 0310 	add.w	r3, r7, #16
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f001 f945 	bl	8005760 <xTaskCreate>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d001      	beq.n	80044e0 <osThreadNew+0x13c>
          hTask = NULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80044e0:	693b      	ldr	r3, [r7, #16]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3730      	adds	r7, #48	; 0x30
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000094 	.word	0x20000094

080044f0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044f8:	f3ef 8305 	mrs	r3, IPSR
 80044fc:	613b      	str	r3, [r7, #16]
  return(result);
 80044fe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10f      	bne.n	8004524 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004504:	f3ef 8310 	mrs	r3, PRIMASK
 8004508:	60fb      	str	r3, [r7, #12]
  return(result);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d105      	bne.n	800451c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004510:	f3ef 8311 	mrs	r3, BASEPRI
 8004514:	60bb      	str	r3, [r7, #8]
  return(result);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <osDelay+0x3c>
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <osDelay+0x58>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d103      	bne.n	800452c <osDelay+0x3c>
    stat = osErrorISR;
 8004524:	f06f 0305 	mvn.w	r3, #5
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	e007      	b.n	800453c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f001 fa48 	bl	80059cc <vTaskDelay>
    }
  }

  return (stat);
 800453c:	697b      	ldr	r3, [r7, #20]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000094 	.word	0x20000094

0800454c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f002 fb59 	bl	8006c0c <pvTimerGetTimerID>
 800455a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <TimerCallback+0x22>
    callb->func (callb->arg);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	6852      	ldr	r2, [r2, #4]
 800456a:	4610      	mov	r0, r2
 800456c:	4798      	blx	r3
  }
}
 800456e:	bf00      	nop
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004578:	b580      	push	{r7, lr}
 800457a:	b08e      	sub	sp, #56	; 0x38
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	607a      	str	r2, [r7, #4]
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	460b      	mov	r3, r1
 8004586:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800458c:	f3ef 8305 	mrs	r3, IPSR
 8004590:	61bb      	str	r3, [r7, #24]
  return(result);
 8004592:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8004594:	2b00      	cmp	r3, #0
 8004596:	d16a      	bne.n	800466e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004598:	f3ef 8310 	mrs	r3, PRIMASK
 800459c:	617b      	str	r3, [r7, #20]
  return(result);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045a4:	f3ef 8311 	mrs	r3, BASEPRI
 80045a8:	613b      	str	r3, [r7, #16]
  return(result);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <osTimerNew+0x40>
 80045b0:	4b31      	ldr	r3, [pc, #196]	; (8004678 <osTimerNew+0x100>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d05a      	beq.n	800466e <osTimerNew+0xf6>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d057      	beq.n	800466e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80045be:	2008      	movs	r0, #8
 80045c0:	f002 fd74 	bl	80070ac <pvPortMalloc>
 80045c4:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d050      	beq.n	800466e <osTimerNew+0xf6>
      callb->func = func;
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80045d8:	7afb      	ldrb	r3, [r7, #11]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d102      	bne.n	80045e4 <osTimerNew+0x6c>
        reload = pdFALSE;
 80045de:	2300      	movs	r3, #0
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
 80045e2:	e001      	b.n	80045e8 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 80045e4:	2301      	movs	r3, #1
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 80045e8:	f04f 33ff 	mov.w	r3, #4294967295
 80045ec:	623b      	str	r3, [r7, #32]
      name = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01c      	beq.n	8004632 <osTimerNew+0xba>
        if (attr->name != NULL) {
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <osTimerNew+0x8e>
          name = attr->name;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d006      	beq.n	800461c <osTimerNew+0xa4>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b2b      	cmp	r3, #43	; 0x2b
 8004614:	d902      	bls.n	800461c <osTimerNew+0xa4>
          mem = 1;
 8004616:	2301      	movs	r3, #1
 8004618:	623b      	str	r3, [r7, #32]
 800461a:	e00c      	b.n	8004636 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d108      	bne.n	8004636 <osTimerNew+0xbe>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d104      	bne.n	8004636 <osTimerNew+0xbe>
            mem = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	623b      	str	r3, [r7, #32]
 8004630:	e001      	b.n	8004636 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8004632:	2300      	movs	r3, #0
 8004634:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d10c      	bne.n	8004656 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	9301      	str	r3, [sp, #4]
 8004642:	4b0e      	ldr	r3, [pc, #56]	; (800467c <osTimerNew+0x104>)
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464a:	2101      	movs	r1, #1
 800464c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800464e:	f001 ff56 	bl	80064fe <xTimerCreateStatic>
 8004652:	62b8      	str	r0, [r7, #40]	; 0x28
 8004654:	e00b      	b.n	800466e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d108      	bne.n	800466e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800465c:	4b07      	ldr	r3, [pc, #28]	; (800467c <osTimerNew+0x104>)
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004664:	2101      	movs	r1, #1
 8004666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004668:	f001 ff28 	bl	80064bc <xTimerCreate>
 800466c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004670:	4618      	mov	r0, r3
 8004672:	3730      	adds	r7, #48	; 0x30
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000094 	.word	0x20000094
 800467c:	0800454d 	.word	0x0800454d

08004680 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b08a      	sub	sp, #40	; 0x28
 8004684:	af02      	add	r7, sp, #8
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800468e:	f3ef 8305 	mrs	r3, IPSR
 8004692:	617b      	str	r3, [r7, #20]
  return(result);
 8004694:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10f      	bne.n	80046ba <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469a:	f3ef 8310 	mrs	r3, PRIMASK
 800469e:	613b      	str	r3, [r7, #16]
  return(result);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d105      	bne.n	80046b2 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046a6:	f3ef 8311 	mrs	r3, BASEPRI
 80046aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <osTimerStart+0x42>
 80046b2:	4b12      	ldr	r3, [pc, #72]	; (80046fc <osTimerStart+0x7c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d103      	bne.n	80046c2 <osTimerStart+0x42>
    stat = osErrorISR;
 80046ba:	f06f 0305 	mvn.w	r3, #5
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	e017      	b.n	80046f2 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <osTimerStart+0x50>
    stat = osErrorParameter;
 80046c8:	f06f 0303 	mvn.w	r3, #3
 80046cc:	61fb      	str	r3, [r7, #28]
 80046ce:	e010      	b.n	80046f2 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80046d0:	2300      	movs	r3, #0
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	2300      	movs	r3, #0
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	2104      	movs	r1, #4
 80046da:	69b8      	ldr	r0, [r7, #24]
 80046dc:	f001 ff8c 	bl	80065f8 <xTimerGenericCommand>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d102      	bne.n	80046ec <osTimerStart+0x6c>
      stat = osOK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	e002      	b.n	80046f2 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 80046ec:	f06f 0302 	mvn.w	r3, #2
 80046f0:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80046f2:	69fb      	ldr	r3, [r7, #28]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3720      	adds	r7, #32
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20000094 	.word	0x20000094

08004700 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b08c      	sub	sp, #48	; 0x30
 8004704:	af02      	add	r7, sp, #8
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004710:	f3ef 8305 	mrs	r3, IPSR
 8004714:	61bb      	str	r3, [r7, #24]
  return(result);
 8004716:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004718:	2b00      	cmp	r3, #0
 800471a:	f040 8087 	bne.w	800482c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800471e:	f3ef 8310 	mrs	r3, PRIMASK
 8004722:	617b      	str	r3, [r7, #20]
  return(result);
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d105      	bne.n	8004736 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800472a:	f3ef 8311 	mrs	r3, BASEPRI
 800472e:	613b      	str	r3, [r7, #16]
  return(result);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <osSemaphoreNew+0x3e>
 8004736:	4b40      	ldr	r3, [pc, #256]	; (8004838 <osSemaphoreNew+0x138>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d076      	beq.n	800482c <osSemaphoreNew+0x12c>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d073      	beq.n	800482c <osSemaphoreNew+0x12c>
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	429a      	cmp	r2, r3
 800474a:	d86f      	bhi.n	800482c <osSemaphoreNew+0x12c>
    mem = -1;
 800474c:	f04f 33ff 	mov.w	r3, #4294967295
 8004750:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d015      	beq.n	8004784 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d006      	beq.n	800476e <osSemaphoreNew+0x6e>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	2b4f      	cmp	r3, #79	; 0x4f
 8004766:	d902      	bls.n	800476e <osSemaphoreNew+0x6e>
        mem = 1;
 8004768:	2301      	movs	r3, #1
 800476a:	623b      	str	r3, [r7, #32]
 800476c:	e00c      	b.n	8004788 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d108      	bne.n	8004788 <osSemaphoreNew+0x88>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <osSemaphoreNew+0x88>
          mem = 0;
 800477e:	2300      	movs	r3, #0
 8004780:	623b      	str	r3, [r7, #32]
 8004782:	e001      	b.n	8004788 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478e:	d04d      	beq.n	800482c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d129      	bne.n	80047ea <osSemaphoreNew+0xea>
        if (mem == 1) {
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d10b      	bne.n	80047b4 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	2303      	movs	r3, #3
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	2200      	movs	r2, #0
 80047a8:	2100      	movs	r1, #0
 80047aa:	2001      	movs	r0, #1
 80047ac:	f000 fa10 	bl	8004bd0 <xQueueGenericCreateStatic>
 80047b0:	6278      	str	r0, [r7, #36]	; 0x24
 80047b2:	e005      	b.n	80047c0 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80047b4:	2203      	movs	r2, #3
 80047b6:	2100      	movs	r1, #0
 80047b8:	2001      	movs	r0, #1
 80047ba:	f000 fa86 	bl	8004cca <xQueueGenericCreate>
 80047be:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d022      	beq.n	800480c <osSemaphoreNew+0x10c>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01f      	beq.n	800480c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80047cc:	2300      	movs	r3, #0
 80047ce:	2200      	movs	r2, #0
 80047d0:	2100      	movs	r1, #0
 80047d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047d4:	f000 fb4c 	bl	8004e70 <xQueueGenericSend>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d016      	beq.n	800480c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80047de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047e0:	f000 fda4 	bl	800532c <vQueueDelete>
            hSemaphore = NULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
 80047e8:	e010      	b.n	800480c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d108      	bne.n	8004802 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	461a      	mov	r2, r3
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 faca 	bl	8004d92 <xQueueCreateCountingSemaphoreStatic>
 80047fe:	6278      	str	r0, [r7, #36]	; 0x24
 8004800:	e004      	b.n	800480c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 fafd 	bl	8004e04 <xQueueCreateCountingSemaphore>
 800480a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00c      	beq.n	800482c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <osSemaphoreNew+0x120>
          name = attr->name;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	e001      	b.n	8004824 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004824:	69f9      	ldr	r1, [r7, #28]
 8004826:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004828:	f000 feb4 	bl	8005594 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800482e:	4618      	mov	r0, r3
 8004830:	3728      	adds	r7, #40	; 0x28
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000094 	.word	0x20000094

0800483c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800483c:	b580      	push	{r7, lr}
 800483e:	b08c      	sub	sp, #48	; 0x30
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004848:	2300      	movs	r3, #0
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800484c:	f3ef 8305 	mrs	r3, IPSR
 8004850:	61bb      	str	r3, [r7, #24]
  return(result);
 8004852:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004854:	2b00      	cmp	r3, #0
 8004856:	d170      	bne.n	800493a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004858:	f3ef 8310 	mrs	r3, PRIMASK
 800485c:	617b      	str	r3, [r7, #20]
  return(result);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004864:	f3ef 8311 	mrs	r3, BASEPRI
 8004868:	613b      	str	r3, [r7, #16]
  return(result);
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <osMessageQueueNew+0x3c>
 8004870:	4b34      	ldr	r3, [pc, #208]	; (8004944 <osMessageQueueNew+0x108>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d060      	beq.n	800493a <osMessageQueueNew+0xfe>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d05d      	beq.n	800493a <osMessageQueueNew+0xfe>
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d05a      	beq.n	800493a <osMessageQueueNew+0xfe>
    mem = -1;
 8004884:	f04f 33ff 	mov.w	r3, #4294967295
 8004888:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d029      	beq.n	80048e4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d012      	beq.n	80048be <osMessageQueueNew+0x82>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	2b4f      	cmp	r3, #79	; 0x4f
 800489e:	d90e      	bls.n	80048be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695a      	ldr	r2, [r3, #20]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d302      	bcc.n	80048be <osMessageQueueNew+0x82>
        mem = 1;
 80048b8:	2301      	movs	r3, #1
 80048ba:	623b      	str	r3, [r7, #32]
 80048bc:	e014      	b.n	80048e8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d110      	bne.n	80048e8 <osMessageQueueNew+0xac>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10c      	bne.n	80048e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d108      	bne.n	80048e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d104      	bne.n	80048e8 <osMessageQueueNew+0xac>
          mem = 0;
 80048de:	2300      	movs	r3, #0
 80048e0:	623b      	str	r3, [r7, #32]
 80048e2:	e001      	b.n	80048e8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d10c      	bne.n	8004908 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6899      	ldr	r1, [r3, #8]
 80048f6:	2300      	movs	r3, #0
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	460b      	mov	r3, r1
 80048fc:	68b9      	ldr	r1, [r7, #8]
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f966 	bl	8004bd0 <xQueueGenericCreateStatic>
 8004904:	6278      	str	r0, [r7, #36]	; 0x24
 8004906:	e008      	b.n	800491a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d105      	bne.n	800491a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800490e:	2200      	movs	r2, #0
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 f9d9 	bl	8004cca <xQueueGenericCreate>
 8004918:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00c      	beq.n	800493a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <osMessageQueueNew+0xf2>
        name = attr->name;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	e001      	b.n	8004932 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004932:	69f9      	ldr	r1, [r7, #28]
 8004934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004936:	f000 fe2d 	bl	8005594 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800493c:	4618      	mov	r0, r3
 800493e:	3728      	adds	r7, #40	; 0x28
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20000094 	.word	0x20000094

08004948 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4a07      	ldr	r2, [pc, #28]	; (8004974 <vApplicationGetIdleTaskMemory+0x2c>)
 8004958:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4a06      	ldr	r2, [pc, #24]	; (8004978 <vApplicationGetIdleTaskMemory+0x30>)
 800495e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2280      	movs	r2, #128	; 0x80
 8004964:	601a      	str	r2, [r3, #0]
}
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000098 	.word	0x20000098
 8004978:	200000f4 	.word	0x200000f4

0800497c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4a07      	ldr	r2, [pc, #28]	; (80049a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800498c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4a06      	ldr	r2, [pc, #24]	; (80049ac <vApplicationGetTimerTaskMemory+0x30>)
 8004992:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800499a:	601a      	str	r2, [r3, #0]
}
 800499c:	bf00      	nop
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	200002f4 	.word	0x200002f4
 80049ac:	20000350 	.word	0x20000350

080049b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f103 0208 	add.w	r2, r3, #8
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f04f 32ff 	mov.w	r2, #4294967295
 80049c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f103 0208 	add.w	r2, r3, #8
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f103 0208 	add.w	r2, r3, #8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]
}
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a52:	b480      	push	{r7}
 8004a54:	b085      	sub	sp, #20
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a68:	d103      	bne.n	8004a72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	e00c      	b.n	8004a8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3308      	adds	r3, #8
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	e002      	b.n	8004a80 <vListInsert+0x2e>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d2f6      	bcs.n	8004a7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6892      	ldr	r2, [r2, #8]
 8004ada:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6852      	ldr	r2, [r2, #4]
 8004ae4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d103      	bne.n	8004af8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	1e5a      	subs	r2, r3, #1
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10b      	bne.n	8004b44 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	b672      	cpsid	i
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	b662      	cpsie	i
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	e7fe      	b.n	8004b42 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8004b44:	f002 f990 	bl	8006e68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b50:	68f9      	ldr	r1, [r7, #12]
 8004b52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	441a      	add	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	3b01      	subs	r3, #1
 8004b76:	68f9      	ldr	r1, [r7, #12]
 8004b78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b7a:	fb01 f303 	mul.w	r3, r1, r3
 8004b7e:	441a      	add	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	22ff      	movs	r2, #255	; 0xff
 8004b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	22ff      	movs	r2, #255	; 0xff
 8004b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00f      	beq.n	8004bc2 <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3310      	adds	r3, #16
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f001 f9a4 	bl	8005ef4 <xTaskRemoveFromEventList>
 8004bac:	e009      	b.n	8004bc2 <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3310      	adds	r3, #16
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff fefc 	bl	80049b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	3324      	adds	r3, #36	; 0x24
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fef7 	bl	80049b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004bc2:	f002 f983 	bl	8006ecc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004bc6:	2301      	movs	r3, #1
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08e      	sub	sp, #56	; 0x38
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10b      	bne.n	8004bfc <xQueueGenericCreateStatic+0x2c>
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	b672      	cpsid	i
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	b662      	cpsie	i
 8004bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bfa:	e7fe      	b.n	8004bfa <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10b      	bne.n	8004c1a <xQueueGenericCreateStatic+0x4a>
 8004c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c06:	b672      	cpsid	i
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	b662      	cpsie	i
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
 8004c18:	e7fe      	b.n	8004c18 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <xQueueGenericCreateStatic+0x56>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <xQueueGenericCreateStatic+0x5a>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <xQueueGenericCreateStatic+0x5c>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10b      	bne.n	8004c48 <xQueueGenericCreateStatic+0x78>
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	b672      	cpsid	i
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	b662      	cpsie	i
 8004c44:	623b      	str	r3, [r7, #32]
 8004c46:	e7fe      	b.n	8004c46 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d102      	bne.n	8004c54 <xQueueGenericCreateStatic+0x84>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <xQueueGenericCreateStatic+0x88>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <xQueueGenericCreateStatic+0x8a>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10b      	bne.n	8004c76 <xQueueGenericCreateStatic+0xa6>
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	b672      	cpsid	i
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	b662      	cpsie	i
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	e7fe      	b.n	8004c74 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c76:	2350      	movs	r3, #80	; 0x50
 8004c78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b50      	cmp	r3, #80	; 0x50
 8004c7e:	d00b      	beq.n	8004c98 <xQueueGenericCreateStatic+0xc8>
 8004c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c84:	b672      	cpsid	i
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	b662      	cpsie	i
 8004c94:	61bb      	str	r3, [r7, #24]
 8004c96:	e7fe      	b.n	8004c96 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00d      	beq.n	8004cc0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f846 	bl	8004d4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3730      	adds	r7, #48	; 0x30
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b08a      	sub	sp, #40	; 0x28
 8004cce:	af02      	add	r7, sp, #8
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10b      	bne.n	8004cf6 <xQueueGenericCreate+0x2c>
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	b672      	cpsid	i
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	b662      	cpsie	i
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	e7fe      	b.n	8004cf4 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	e004      	b.n	8004d0c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	fb02 f303 	mul.w	r3, r2, r3
 8004d0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	3350      	adds	r3, #80	; 0x50
 8004d10:	4618      	mov	r0, r3
 8004d12:	f002 f9cb 	bl	80070ac <pvPortMalloc>
 8004d16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d011      	beq.n	8004d42 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	3350      	adds	r3, #80	; 0x50
 8004d26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d30:	79fa      	ldrb	r2, [r7, #7]
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	4613      	mov	r3, r2
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	68b9      	ldr	r1, [r7, #8]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f805 	bl	8004d4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d42:	69bb      	ldr	r3, [r7, #24]
	}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3720      	adds	r7, #32
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d103      	bne.n	8004d68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e002      	b.n	8004d6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	69b8      	ldr	r0, [r7, #24]
 8004d7e:	f7ff fecb 	bl	8004b18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	78fa      	ldrb	r2, [r7, #3]
 8004d86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d8a:	bf00      	nop
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b08a      	sub	sp, #40	; 0x28
 8004d96:	af02      	add	r7, sp, #8
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10b      	bne.n	8004dbc <xQueueCreateCountingSemaphoreStatic+0x2a>
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	b672      	cpsid	i
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	b662      	cpsie	i
 8004db8:	61bb      	str	r3, [r7, #24]
 8004dba:	e7fe      	b.n	8004dba <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d90b      	bls.n	8004ddc <xQueueCreateCountingSemaphoreStatic+0x4a>
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	b672      	cpsid	i
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	b662      	cpsie	i
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	e7fe      	b.n	8004dda <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004ddc:	2302      	movs	r3, #2
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	2100      	movs	r1, #0
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7ff fef2 	bl	8004bd0 <xQueueGenericCreateStatic>
 8004dec:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004dfa:	69fb      	ldr	r3, [r7, #28]
	}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3720      	adds	r7, #32
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10b      	bne.n	8004e2c <xQueueCreateCountingSemaphore+0x28>
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	b672      	cpsid	i
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	b662      	cpsie	i
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	e7fe      	b.n	8004e2a <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d90b      	bls.n	8004e4c <xQueueCreateCountingSemaphore+0x48>
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	b672      	cpsid	i
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	b662      	cpsie	i
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	e7fe      	b.n	8004e4a <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	2100      	movs	r1, #0
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff ff3a 	bl	8004cca <xQueueGenericCreate>
 8004e56:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004e64:	697b      	ldr	r3, [r7, #20]
	}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08e      	sub	sp, #56	; 0x38
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <xQueueGenericSend+0x34>
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	b672      	cpsid	i
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	b662      	cpsie	i
 8004ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea2:	e7fe      	b.n	8004ea2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d103      	bne.n	8004eb2 <xQueueGenericSend+0x42>
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <xQueueGenericSend+0x46>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <xQueueGenericSend+0x48>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10b      	bne.n	8004ed4 <xQueueGenericSend+0x64>
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	b672      	cpsid	i
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	b662      	cpsie	i
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed2:	e7fe      	b.n	8004ed2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d103      	bne.n	8004ee2 <xQueueGenericSend+0x72>
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <xQueueGenericSend+0x76>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <xQueueGenericSend+0x78>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10b      	bne.n	8004f04 <xQueueGenericSend+0x94>
 8004eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef0:	b672      	cpsid	i
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	b662      	cpsie	i
 8004f00:	623b      	str	r3, [r7, #32]
 8004f02:	e7fe      	b.n	8004f02 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f04:	f001 f9ae 	bl	8006264 <xTaskGetSchedulerState>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <xQueueGenericSend+0xa4>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <xQueueGenericSend+0xa8>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <xQueueGenericSend+0xaa>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <xQueueGenericSend+0xc6>
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	b672      	cpsid	i
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	b662      	cpsie	i
 8004f32:	61fb      	str	r3, [r7, #28]
 8004f34:	e7fe      	b.n	8004f34 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f36:	f001 ff97 	bl	8006e68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d302      	bcc.n	8004f4c <xQueueGenericSend+0xdc>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d112      	bne.n	8004f72 <xQueueGenericSend+0x102>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f52:	f000 fa0f 	bl	8005374 <prvCopyDataToQueue>
 8004f56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	3324      	adds	r3, #36	; 0x24
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 ffc5 	bl	8005ef4 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f6a:	f001 ffaf 	bl	8006ecc <vPortExitCritical>
				return pdPASS;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e062      	b.n	8005038 <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f78:	f001 ffa8 	bl	8006ecc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e05b      	b.n	8005038 <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f001 f816 	bl	8005fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f90:	2301      	movs	r3, #1
 8004f92:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f94:	f001 ff9a 	bl	8006ecc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f98:	f000 fdb6 	bl	8005b08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f9c:	f001 ff64 	bl	8006e68 <vPortEnterCritical>
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fa6:	b25b      	sxtb	r3, r3
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fac:	d103      	bne.n	8004fb6 <xQueueGenericSend+0x146>
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fbc:	b25b      	sxtb	r3, r3
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc2:	d103      	bne.n	8004fcc <xQueueGenericSend+0x15c>
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fcc:	f001 ff7e 	bl	8006ecc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fd0:	1d3a      	adds	r2, r7, #4
 8004fd2:	f107 0314 	add.w	r3, r7, #20
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f001 f805 	bl	8005fe8 <xTaskCheckForTimeOut>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d123      	bne.n	800502c <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fe6:	f000 fabd 	bl	8005564 <prvIsQueueFull>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d017      	beq.n	8005020 <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	3310      	adds	r3, #16
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 ff29 	bl	8005e50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005000:	f000 fa48 	bl	8005494 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005004:	f000 fd8e 	bl	8005b24 <xTaskResumeAll>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d193      	bne.n	8004f36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800500e:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <xQueueGenericSend+0x1d0>)
 8005010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	e78a      	b.n	8004f36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005022:	f000 fa37 	bl	8005494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005026:	f000 fd7d 	bl	8005b24 <xTaskResumeAll>
 800502a:	e784      	b.n	8004f36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800502c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800502e:	f000 fa31 	bl	8005494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005032:	f000 fd77 	bl	8005b24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005036:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005038:	4618      	mov	r0, r3
 800503a:	3738      	adds	r7, #56	; 0x38
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	e000ed04 	.word	0xe000ed04

08005044 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08e      	sub	sp, #56	; 0x38
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10b      	bne.n	8005074 <xQueueGenericSendFromISR+0x30>
 800505c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005060:	b672      	cpsid	i
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	b662      	cpsie	i
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
 8005072:	e7fe      	b.n	8005072 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <xQueueGenericSendFromISR+0x3e>
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <xQueueGenericSendFromISR+0x42>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <xQueueGenericSendFromISR+0x44>
 8005086:	2300      	movs	r3, #0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10b      	bne.n	80050a4 <xQueueGenericSendFromISR+0x60>
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	b672      	cpsid	i
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	b662      	cpsie	i
 80050a0:	623b      	str	r3, [r7, #32]
 80050a2:	e7fe      	b.n	80050a2 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d103      	bne.n	80050b2 <xQueueGenericSendFromISR+0x6e>
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <xQueueGenericSendFromISR+0x72>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <xQueueGenericSendFromISR+0x74>
 80050b6:	2300      	movs	r3, #0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <xQueueGenericSendFromISR+0x90>
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	b672      	cpsid	i
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	b662      	cpsie	i
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	e7fe      	b.n	80050d2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050d4:	f001 ffa8 	bl	8007028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050d8:	f3ef 8211 	mrs	r2, BASEPRI
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	b672      	cpsid	i
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	b662      	cpsie	i
 80050f0:	61ba      	str	r2, [r7, #24]
 80050f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80050f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005100:	429a      	cmp	r2, r3
 8005102:	d302      	bcc.n	800510a <xQueueGenericSendFromISR+0xc6>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d12c      	bne.n	8005164 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005110:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800511a:	f000 f92b 	bl	8005374 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800511e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005126:	d112      	bne.n	800514e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	2b00      	cmp	r3, #0
 800512e:	d016      	beq.n	800515e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	3324      	adds	r3, #36	; 0x24
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fedd 	bl	8005ef4 <xTaskRemoveFromEventList>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00e      	beq.n	800515e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	e007      	b.n	800515e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800514e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005152:	3301      	adds	r3, #1
 8005154:	b2db      	uxtb	r3, r3
 8005156:	b25a      	sxtb	r2, r3
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800515e:	2301      	movs	r3, #1
 8005160:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005162:	e001      	b.n	8005168 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005164:	2300      	movs	r3, #0
 8005166:	637b      	str	r3, [r7, #52]	; 0x34
 8005168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005174:	4618      	mov	r0, r3
 8005176:	3738      	adds	r7, #56	; 0x38
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08c      	sub	sp, #48	; 0x30
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005188:	2300      	movs	r3, #0
 800518a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10b      	bne.n	80051ae <xQueueReceive+0x32>
	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519a:	b672      	cpsid	i
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	b662      	cpsie	i
 80051aa:	623b      	str	r3, [r7, #32]
 80051ac:	e7fe      	b.n	80051ac <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d103      	bne.n	80051bc <xQueueReceive+0x40>
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <xQueueReceive+0x44>
 80051bc:	2301      	movs	r3, #1
 80051be:	e000      	b.n	80051c2 <xQueueReceive+0x46>
 80051c0:	2300      	movs	r3, #0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10b      	bne.n	80051de <xQueueReceive+0x62>
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	b672      	cpsid	i
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	b662      	cpsie	i
 80051da:	61fb      	str	r3, [r7, #28]
 80051dc:	e7fe      	b.n	80051dc <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051de:	f001 f841 	bl	8006264 <xTaskGetSchedulerState>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d102      	bne.n	80051ee <xQueueReceive+0x72>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <xQueueReceive+0x76>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <xQueueReceive+0x78>
 80051f2:	2300      	movs	r3, #0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10b      	bne.n	8005210 <xQueueReceive+0x94>
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	b672      	cpsid	i
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	b662      	cpsie	i
 800520c:	61bb      	str	r3, [r7, #24]
 800520e:	e7fe      	b.n	800520e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005210:	f001 fe2a 	bl	8006e68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	d014      	beq.n	800524a <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005224:	f000 f910 	bl	8005448 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	1e5a      	subs	r2, r3, #1
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d004      	beq.n	8005242 <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	3310      	adds	r3, #16
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fe59 	bl	8005ef4 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005242:	f001 fe43 	bl	8006ecc <vPortExitCritical>
				return pdPASS;
 8005246:	2301      	movs	r3, #1
 8005248:	e069      	b.n	800531e <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d103      	bne.n	8005258 <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005250:	f001 fe3c 	bl	8006ecc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005254:	2300      	movs	r3, #0
 8005256:	e062      	b.n	800531e <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800525e:	f107 0310 	add.w	r3, r7, #16
 8005262:	4618      	mov	r0, r3
 8005264:	f000 feaa 	bl	8005fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005268:	2301      	movs	r3, #1
 800526a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800526c:	f001 fe2e 	bl	8006ecc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005270:	f000 fc4a 	bl	8005b08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005274:	f001 fdf8 	bl	8006e68 <vPortEnterCritical>
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800527e:	b25b      	sxtb	r3, r3
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005284:	d103      	bne.n	800528e <xQueueReceive+0x112>
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005294:	b25b      	sxtb	r3, r3
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529a:	d103      	bne.n	80052a4 <xQueueReceive+0x128>
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052a4:	f001 fe12 	bl	8006ecc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052a8:	1d3a      	adds	r2, r7, #4
 80052aa:	f107 0310 	add.w	r3, r7, #16
 80052ae:	4611      	mov	r1, r2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fe99 	bl	8005fe8 <xTaskCheckForTimeOut>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d123      	bne.n	8005304 <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052be:	f000 f93b 	bl	8005538 <prvIsQueueEmpty>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d017      	beq.n	80052f8 <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	3324      	adds	r3, #36	; 0x24
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	4611      	mov	r1, r2
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fdbd 	bl	8005e50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052d8:	f000 f8dc 	bl	8005494 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052dc:	f000 fc22 	bl	8005b24 <xTaskResumeAll>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d194      	bne.n	8005210 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80052e6:	4b10      	ldr	r3, [pc, #64]	; (8005328 <xQueueReceive+0x1ac>)
 80052e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	e78b      	b.n	8005210 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80052f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052fa:	f000 f8cb 	bl	8005494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052fe:	f000 fc11 	bl	8005b24 <xTaskResumeAll>
 8005302:	e785      	b.n	8005210 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005306:	f000 f8c5 	bl	8005494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800530a:	f000 fc0b 	bl	8005b24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800530e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005310:	f000 f912 	bl	8005538 <prvIsQueueEmpty>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	f43f af7a 	beq.w	8005210 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800531c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800531e:	4618      	mov	r0, r3
 8005320:	3730      	adds	r7, #48	; 0x30
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10b      	bne.n	8005356 <vQueueDelete+0x2a>
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	b672      	cpsid	i
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	b662      	cpsie	i
 8005352:	60bb      	str	r3, [r7, #8]
 8005354:	e7fe      	b.n	8005354 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f944 	bl	80055e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005362:	2b00      	cmp	r3, #0
 8005364:	d102      	bne.n	800536c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f001 ff68 	bl	800723c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10d      	bne.n	80053ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d14d      	bne.n	8005436 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 ff7e 	bl	80062a0 <xTaskPriorityDisinherit>
 80053a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	609a      	str	r2, [r3, #8]
 80053ac:	e043      	b.n	8005436 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d119      	bne.n	80053e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6858      	ldr	r0, [r3, #4]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053bc:	461a      	mov	r2, r3
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	f002 f87e 	bl	80074c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	441a      	add	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d32b      	bcc.n	8005436 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	605a      	str	r2, [r3, #4]
 80053e6:	e026      	b.n	8005436 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68d8      	ldr	r0, [r3, #12]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	461a      	mov	r2, r3
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	f002 f864 	bl	80074c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	425b      	negs	r3, r3
 8005402:	441a      	add	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d207      	bcs.n	8005424 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	425b      	negs	r3, r3
 800541e:	441a      	add	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d105      	bne.n	8005436 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	3b01      	subs	r3, #1
 8005434:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800543e:	697b      	ldr	r3, [r7, #20]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	2b00      	cmp	r3, #0
 8005458:	d018      	beq.n	800548c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	441a      	add	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	429a      	cmp	r2, r3
 8005472:	d303      	bcc.n	800547c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68d9      	ldr	r1, [r3, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	461a      	mov	r2, r3
 8005486:	6838      	ldr	r0, [r7, #0]
 8005488:	f002 f81a 	bl	80074c0 <memcpy>
	}
}
 800548c:	bf00      	nop
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800549c:	f001 fce4 	bl	8006e68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054a8:	e011      	b.n	80054ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d012      	beq.n	80054d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3324      	adds	r3, #36	; 0x24
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fd1c 	bl	8005ef4 <xTaskRemoveFromEventList>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054c2:	f000 fdf5 	bl	80060b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	dce9      	bgt.n	80054aa <prvUnlockQueue+0x16>
 80054d6:	e000      	b.n	80054da <prvUnlockQueue+0x46>
					break;
 80054d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	22ff      	movs	r2, #255	; 0xff
 80054de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80054e2:	f001 fcf3 	bl	8006ecc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054e6:	f001 fcbf 	bl	8006e68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054f2:	e011      	b.n	8005518 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d012      	beq.n	8005522 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3310      	adds	r3, #16
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fcf7 	bl	8005ef4 <xTaskRemoveFromEventList>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800550c:	f000 fdd0 	bl	80060b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005510:	7bbb      	ldrb	r3, [r7, #14]
 8005512:	3b01      	subs	r3, #1
 8005514:	b2db      	uxtb	r3, r3
 8005516:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800551c:	2b00      	cmp	r3, #0
 800551e:	dce9      	bgt.n	80054f4 <prvUnlockQueue+0x60>
 8005520:	e000      	b.n	8005524 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005522:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	22ff      	movs	r2, #255	; 0xff
 8005528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800552c:	f001 fcce 	bl	8006ecc <vPortExitCritical>
}
 8005530:	bf00      	nop
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005540:	f001 fc92 	bl	8006e68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	2b00      	cmp	r3, #0
 800554a:	d102      	bne.n	8005552 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800554c:	2301      	movs	r3, #1
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	e001      	b.n	8005556 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005556:	f001 fcb9 	bl	8006ecc <vPortExitCritical>

	return xReturn;
 800555a:	68fb      	ldr	r3, [r7, #12]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800556c:	f001 fc7c 	bl	8006e68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005578:	429a      	cmp	r2, r3
 800557a:	d102      	bne.n	8005582 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800557c:	2301      	movs	r3, #1
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	e001      	b.n	8005586 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005586:	f001 fca1 	bl	8006ecc <vPortExitCritical>

	return xReturn;
 800558a:	68fb      	ldr	r3, [r7, #12]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e014      	b.n	80055ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055a4:	4a0e      	ldr	r2, [pc, #56]	; (80055e0 <vQueueAddToRegistry+0x4c>)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10b      	bne.n	80055c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055b0:	490b      	ldr	r1, [pc, #44]	; (80055e0 <vQueueAddToRegistry+0x4c>)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055ba:	4a09      	ldr	r2, [pc, #36]	; (80055e0 <vQueueAddToRegistry+0x4c>)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	4413      	add	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055c6:	e005      	b.n	80055d4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	3301      	adds	r3, #1
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b07      	cmp	r3, #7
 80055d2:	d9e7      	bls.n	80055a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	20005770 	.word	0x20005770

080055e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	e016      	b.n	8005620 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80055f2:	4a10      	ldr	r2, [pc, #64]	; (8005634 <vQueueUnregisterQueue+0x50>)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	4413      	add	r3, r2
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d10b      	bne.n	800561a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005602:	4a0c      	ldr	r2, [pc, #48]	; (8005634 <vQueueUnregisterQueue+0x50>)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2100      	movs	r1, #0
 8005608:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800560c:	4a09      	ldr	r2, [pc, #36]	; (8005634 <vQueueUnregisterQueue+0x50>)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	4413      	add	r3, r2
 8005614:	2200      	movs	r2, #0
 8005616:	605a      	str	r2, [r3, #4]
				break;
 8005618:	e005      	b.n	8005626 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3301      	adds	r3, #1
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b07      	cmp	r3, #7
 8005624:	d9e5      	bls.n	80055f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20005770 	.word	0x20005770

08005638 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005648:	f001 fc0e 	bl	8006e68 <vPortEnterCritical>
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005652:	b25b      	sxtb	r3, r3
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d103      	bne.n	8005662 <vQueueWaitForMessageRestricted+0x2a>
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005668:	b25b      	sxtb	r3, r3
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566e:	d103      	bne.n	8005678 <vQueueWaitForMessageRestricted+0x40>
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005678:	f001 fc28 	bl	8006ecc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	2b00      	cmp	r3, #0
 8005682:	d106      	bne.n	8005692 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	3324      	adds	r3, #36	; 0x24
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	68b9      	ldr	r1, [r7, #8]
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fc05 	bl	8005e9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005692:	6978      	ldr	r0, [r7, #20]
 8005694:	f7ff fefe 	bl	8005494 <prvUnlockQueue>
	}
 8005698:	bf00      	nop
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08e      	sub	sp, #56	; 0x38
 80056a4:	af04      	add	r7, sp, #16
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <xTaskCreateStatic+0x2c>
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	b672      	cpsid	i
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	b662      	cpsie	i
 80056c8:	623b      	str	r3, [r7, #32]
 80056ca:	e7fe      	b.n	80056ca <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10b      	bne.n	80056ea <xTaskCreateStatic+0x4a>
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	b672      	cpsid	i
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	b662      	cpsie	i
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	e7fe      	b.n	80056e8 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056ea:	235c      	movs	r3, #92	; 0x5c
 80056ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b5c      	cmp	r3, #92	; 0x5c
 80056f2:	d00b      	beq.n	800570c <xTaskCreateStatic+0x6c>
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	b672      	cpsid	i
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	b662      	cpsie	i
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	e7fe      	b.n	800570a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800570c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800570e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01e      	beq.n	8005752 <xTaskCreateStatic+0xb2>
 8005714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005716:	2b00      	cmp	r3, #0
 8005718:	d01b      	beq.n	8005752 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800571a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005722:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	2202      	movs	r2, #2
 8005728:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800572c:	2300      	movs	r3, #0
 800572e:	9303      	str	r3, [sp, #12]
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	9302      	str	r3, [sp, #8]
 8005734:	f107 0314 	add.w	r3, r7, #20
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f850 	bl	80057ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800574a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800574c:	f000 f8de 	bl	800590c <prvAddNewTaskToReadyList>
 8005750:	e001      	b.n	8005756 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005756:	697b      	ldr	r3, [r7, #20]
	}
 8005758:	4618      	mov	r0, r3
 800575a:	3728      	adds	r7, #40	; 0x28
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08c      	sub	sp, #48	; 0x30
 8005764:	af04      	add	r7, sp, #16
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4618      	mov	r0, r3
 8005776:	f001 fc99 	bl	80070ac <pvPortMalloc>
 800577a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00e      	beq.n	80057a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005782:	205c      	movs	r0, #92	; 0x5c
 8005784:	f001 fc92 	bl	80070ac <pvPortMalloc>
 8005788:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	631a      	str	r2, [r3, #48]	; 0x30
 8005796:	e005      	b.n	80057a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005798:	6978      	ldr	r0, [r7, #20]
 800579a:	f001 fd4f 	bl	800723c <vPortFree>
 800579e:	e001      	b.n	80057a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d017      	beq.n	80057da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057b2:	88fa      	ldrh	r2, [r7, #6]
 80057b4:	2300      	movs	r3, #0
 80057b6:	9303      	str	r3, [sp, #12]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	9302      	str	r3, [sp, #8]
 80057bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f80e 	bl	80057ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057ce:	69f8      	ldr	r0, [r7, #28]
 80057d0:	f000 f89c 	bl	800590c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057d4:	2301      	movs	r3, #1
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	e002      	b.n	80057e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057da:	f04f 33ff 	mov.w	r3, #4294967295
 80057de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057e0:	69bb      	ldr	r3, [r7, #24]
	}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3720      	adds	r7, #32
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b088      	sub	sp, #32
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
 80057f6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	461a      	mov	r2, r3
 8005802:	21a5      	movs	r1, #165	; 0xa5
 8005804:	f001 fe67 	bl	80074d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005812:	440b      	add	r3, r1
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	f023 0307 	bic.w	r3, r3, #7
 8005820:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00b      	beq.n	8005844 <prvInitialiseNewTask+0x5a>
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	b672      	cpsid	i
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	b662      	cpsie	i
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	e7fe      	b.n	8005842 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d01f      	beq.n	800588a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800584a:	2300      	movs	r3, #0
 800584c:	61fb      	str	r3, [r7, #28]
 800584e:	e012      	b.n	8005876 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	7819      	ldrb	r1, [r3, #0]
 8005858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	3334      	adds	r3, #52	; 0x34
 8005860:	460a      	mov	r2, r1
 8005862:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d006      	beq.n	800587e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	3301      	adds	r3, #1
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	2b0f      	cmp	r3, #15
 800587a:	d9e9      	bls.n	8005850 <prvInitialiseNewTask+0x66>
 800587c:	e000      	b.n	8005880 <prvInitialiseNewTask+0x96>
			{
				break;
 800587e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005888:	e003      	b.n	8005892 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	2b37      	cmp	r3, #55	; 0x37
 8005896:	d901      	bls.n	800589c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005898:	2337      	movs	r3, #55	; 0x37
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	2200      	movs	r2, #0
 80058ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	3304      	adds	r3, #4
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff f89c 	bl	80049f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	3318      	adds	r3, #24
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff f897 	bl	80049f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	2200      	movs	r2, #0
 80058dc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	68f9      	ldr	r1, [r7, #12]
 80058ea:	69b8      	ldr	r0, [r7, #24]
 80058ec:	f001 f9b0 	bl	8006c50 <pxPortInitialiseStack>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005900:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005902:	bf00      	nop
 8005904:	3720      	adds	r7, #32
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005914:	f001 faa8 	bl	8006e68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005918:	4b26      	ldr	r3, [pc, #152]	; (80059b4 <prvAddNewTaskToReadyList+0xa8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3301      	adds	r3, #1
 800591e:	4a25      	ldr	r2, [pc, #148]	; (80059b4 <prvAddNewTaskToReadyList+0xa8>)
 8005920:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005922:	4b25      	ldr	r3, [pc, #148]	; (80059b8 <prvAddNewTaskToReadyList+0xac>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800592a:	4a23      	ldr	r2, [pc, #140]	; (80059b8 <prvAddNewTaskToReadyList+0xac>)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005930:	4b20      	ldr	r3, [pc, #128]	; (80059b4 <prvAddNewTaskToReadyList+0xa8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d110      	bne.n	800595a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005938:	f000 fbd8 	bl	80060ec <prvInitialiseTaskLists>
 800593c:	e00d      	b.n	800595a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800593e:	4b1f      	ldr	r3, [pc, #124]	; (80059bc <prvAddNewTaskToReadyList+0xb0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005946:	4b1c      	ldr	r3, [pc, #112]	; (80059b8 <prvAddNewTaskToReadyList+0xac>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	429a      	cmp	r2, r3
 8005952:	d802      	bhi.n	800595a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005954:	4a18      	ldr	r2, [pc, #96]	; (80059b8 <prvAddNewTaskToReadyList+0xac>)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800595a:	4b19      	ldr	r3, [pc, #100]	; (80059c0 <prvAddNewTaskToReadyList+0xb4>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3301      	adds	r3, #1
 8005960:	4a17      	ldr	r2, [pc, #92]	; (80059c0 <prvAddNewTaskToReadyList+0xb4>)
 8005962:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005964:	4b16      	ldr	r3, [pc, #88]	; (80059c0 <prvAddNewTaskToReadyList+0xb4>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005970:	4b14      	ldr	r3, [pc, #80]	; (80059c4 <prvAddNewTaskToReadyList+0xb8>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d903      	bls.n	8005980 <prvAddNewTaskToReadyList+0x74>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	4a11      	ldr	r2, [pc, #68]	; (80059c4 <prvAddNewTaskToReadyList+0xb8>)
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4a0e      	ldr	r2, [pc, #56]	; (80059c8 <prvAddNewTaskToReadyList+0xbc>)
 800598e:	441a      	add	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3304      	adds	r3, #4
 8005994:	4619      	mov	r1, r3
 8005996:	4610      	mov	r0, r2
 8005998:	f7ff f837 	bl	8004a0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800599c:	f001 fa96 	bl	8006ecc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059a0:	4b06      	ldr	r3, [pc, #24]	; (80059bc <prvAddNewTaskToReadyList+0xb0>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059a8:	4b03      	ldr	r3, [pc, #12]	; (80059b8 <prvAddNewTaskToReadyList+0xac>)
 80059aa:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059ac:	bf00      	nop
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20000c24 	.word	0x20000c24
 80059b8:	20000750 	.word	0x20000750
 80059bc:	20000c30 	.word	0x20000c30
 80059c0:	20000c40 	.word	0x20000c40
 80059c4:	20000c2c 	.word	0x20000c2c
 80059c8:	20000754 	.word	0x20000754

080059cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d018      	beq.n	8005a10 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059de:	4b14      	ldr	r3, [pc, #80]	; (8005a30 <vTaskDelay+0x64>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00b      	beq.n	80059fe <vTaskDelay+0x32>
 80059e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ea:	b672      	cpsid	i
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	b662      	cpsie	i
 80059fa:	60bb      	str	r3, [r7, #8]
 80059fc:	e7fe      	b.n	80059fc <vTaskDelay+0x30>
			vTaskSuspendAll();
 80059fe:	f000 f883 	bl	8005b08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a02:	2100      	movs	r1, #0
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fcbb 	bl	8006380 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a0a:	f000 f88b 	bl	8005b24 <xTaskResumeAll>
 8005a0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d107      	bne.n	8005a26 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005a16:	4b07      	ldr	r3, [pc, #28]	; (8005a34 <vTaskDelay+0x68>)
 8005a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a26:	bf00      	nop
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000c4c 	.word	0x20000c4c
 8005a34:	e000ed04 	.word	0xe000ed04

08005a38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08a      	sub	sp, #40	; 0x28
 8005a3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a46:	463a      	mov	r2, r7
 8005a48:	1d39      	adds	r1, r7, #4
 8005a4a:	f107 0308 	add.w	r3, r7, #8
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fe ff7a 	bl	8004948 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	9202      	str	r2, [sp, #8]
 8005a5c:	9301      	str	r3, [sp, #4]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	2300      	movs	r3, #0
 8005a64:	460a      	mov	r2, r1
 8005a66:	4922      	ldr	r1, [pc, #136]	; (8005af0 <vTaskStartScheduler+0xb8>)
 8005a68:	4822      	ldr	r0, [pc, #136]	; (8005af4 <vTaskStartScheduler+0xbc>)
 8005a6a:	f7ff fe19 	bl	80056a0 <xTaskCreateStatic>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	4b21      	ldr	r3, [pc, #132]	; (8005af8 <vTaskStartScheduler+0xc0>)
 8005a72:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a74:	4b20      	ldr	r3, [pc, #128]	; (8005af8 <vTaskStartScheduler+0xc0>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	e001      	b.n	8005a86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d102      	bne.n	8005a92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a8c:	f000 fccc 	bl	8006428 <xTimerCreateTimerTask>
 8005a90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d117      	bne.n	8005ac8 <vTaskStartScheduler+0x90>
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	b672      	cpsid	i
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	b662      	cpsie	i
 8005aac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005aae:	4b13      	ldr	r3, [pc, #76]	; (8005afc <vTaskStartScheduler+0xc4>)
 8005ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ab6:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <vTaskStartScheduler+0xc8>)
 8005ab8:	2201      	movs	r2, #1
 8005aba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005abc:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <vTaskStartScheduler+0xcc>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ac2:	f001 f955 	bl	8006d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ac6:	e00f      	b.n	8005ae8 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	d10b      	bne.n	8005ae8 <vTaskStartScheduler+0xb0>
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	b672      	cpsid	i
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	b662      	cpsie	i
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	e7fe      	b.n	8005ae6 <vTaskStartScheduler+0xae>
}
 8005ae8:	bf00      	nop
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	08007e50 	.word	0x08007e50
 8005af4:	080060c9 	.word	0x080060c9
 8005af8:	20000c48 	.word	0x20000c48
 8005afc:	20000c44 	.word	0x20000c44
 8005b00:	20000c30 	.word	0x20000c30
 8005b04:	20000c28 	.word	0x20000c28

08005b08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005b0c:	4b04      	ldr	r3, [pc, #16]	; (8005b20 <vTaskSuspendAll+0x18>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3301      	adds	r3, #1
 8005b12:	4a03      	ldr	r2, [pc, #12]	; (8005b20 <vTaskSuspendAll+0x18>)
 8005b14:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005b16:	bf00      	nop
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	20000c4c 	.word	0x20000c4c

08005b24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b32:	4b3c      	ldr	r3, [pc, #240]	; (8005c24 <xTaskResumeAll+0x100>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10b      	bne.n	8005b52 <xTaskResumeAll+0x2e>
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	b672      	cpsid	i
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	b662      	cpsie	i
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	e7fe      	b.n	8005b50 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b52:	f001 f989 	bl	8006e68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b56:	4b33      	ldr	r3, [pc, #204]	; (8005c24 <xTaskResumeAll+0x100>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	4a31      	ldr	r2, [pc, #196]	; (8005c24 <xTaskResumeAll+0x100>)
 8005b5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b60:	4b30      	ldr	r3, [pc, #192]	; (8005c24 <xTaskResumeAll+0x100>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d156      	bne.n	8005c16 <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b68:	4b2f      	ldr	r3, [pc, #188]	; (8005c28 <xTaskResumeAll+0x104>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d052      	beq.n	8005c16 <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b70:	e02f      	b.n	8005bd2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b72:	4b2e      	ldr	r3, [pc, #184]	; (8005c2c <xTaskResumeAll+0x108>)
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3318      	adds	r3, #24
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fe ffa0 	bl	8004ac4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3304      	adds	r3, #4
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fe ff9b 	bl	8004ac4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b92:	4b27      	ldr	r3, [pc, #156]	; (8005c30 <xTaskResumeAll+0x10c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d903      	bls.n	8005ba2 <xTaskResumeAll+0x7e>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	4a24      	ldr	r2, [pc, #144]	; (8005c30 <xTaskResumeAll+0x10c>)
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4a21      	ldr	r2, [pc, #132]	; (8005c34 <xTaskResumeAll+0x110>)
 8005bb0:	441a      	add	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4610      	mov	r0, r2
 8005bba:	f7fe ff26 	bl	8004a0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc2:	4b1d      	ldr	r3, [pc, #116]	; (8005c38 <xTaskResumeAll+0x114>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d302      	bcc.n	8005bd2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005bcc:	4b1b      	ldr	r3, [pc, #108]	; (8005c3c <xTaskResumeAll+0x118>)
 8005bce:	2201      	movs	r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bd2:	4b16      	ldr	r3, [pc, #88]	; (8005c2c <xTaskResumeAll+0x108>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1cb      	bne.n	8005b72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005be0:	f000 fb20 	bl	8006224 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005be4:	4b16      	ldr	r3, [pc, #88]	; (8005c40 <xTaskResumeAll+0x11c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d010      	beq.n	8005c12 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bf0:	f000 f838 	bl	8005c64 <xTaskIncrementTick>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005bfa:	4b10      	ldr	r3, [pc, #64]	; (8005c3c <xTaskResumeAll+0x118>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f1      	bne.n	8005bf0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005c0c:	4b0c      	ldr	r3, [pc, #48]	; (8005c40 <xTaskResumeAll+0x11c>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c12:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <xTaskResumeAll+0x118>)
 8005c14:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c16:	f001 f959 	bl	8006ecc <vPortExitCritical>

	return xAlreadyYielded;
 8005c1a:	687b      	ldr	r3, [r7, #4]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20000c4c 	.word	0x20000c4c
 8005c28:	20000c24 	.word	0x20000c24
 8005c2c:	20000be4 	.word	0x20000be4
 8005c30:	20000c2c 	.word	0x20000c2c
 8005c34:	20000754 	.word	0x20000754
 8005c38:	20000750 	.word	0x20000750
 8005c3c:	20000c38 	.word	0x20000c38
 8005c40:	20000c34 	.word	0x20000c34

08005c44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c4a:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <xTaskGetTickCount+0x1c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c50:	687b      	ldr	r3, [r7, #4]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	20000c28 	.word	0x20000c28

08005c64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c6e:	4b40      	ldr	r3, [pc, #256]	; (8005d70 <xTaskIncrementTick+0x10c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d171      	bne.n	8005d5a <xTaskIncrementTick+0xf6>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c76:	4b3f      	ldr	r3, [pc, #252]	; (8005d74 <xTaskIncrementTick+0x110>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c7e:	4a3d      	ldr	r2, [pc, #244]	; (8005d74 <xTaskIncrementTick+0x110>)
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d121      	bne.n	8005cce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c8a:	4b3b      	ldr	r3, [pc, #236]	; (8005d78 <xTaskIncrementTick+0x114>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00b      	beq.n	8005cac <xTaskIncrementTick+0x48>
 8005c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c98:	b672      	cpsid	i
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	b662      	cpsie	i
 8005ca8:	603b      	str	r3, [r7, #0]
 8005caa:	e7fe      	b.n	8005caa <xTaskIncrementTick+0x46>
 8005cac:	4b32      	ldr	r3, [pc, #200]	; (8005d78 <xTaskIncrementTick+0x114>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	4b32      	ldr	r3, [pc, #200]	; (8005d7c <xTaskIncrementTick+0x118>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a30      	ldr	r2, [pc, #192]	; (8005d78 <xTaskIncrementTick+0x114>)
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	4a30      	ldr	r2, [pc, #192]	; (8005d7c <xTaskIncrementTick+0x118>)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	4b2f      	ldr	r3, [pc, #188]	; (8005d80 <xTaskIncrementTick+0x11c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	4a2e      	ldr	r2, [pc, #184]	; (8005d80 <xTaskIncrementTick+0x11c>)
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	f000 faab 	bl	8006224 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cce:	4b2d      	ldr	r3, [pc, #180]	; (8005d84 <xTaskIncrementTick+0x120>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d345      	bcc.n	8005d64 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cd8:	4b27      	ldr	r3, [pc, #156]	; (8005d78 <xTaskIncrementTick+0x114>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d104      	bne.n	8005cec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ce2:	4b28      	ldr	r3, [pc, #160]	; (8005d84 <xTaskIncrementTick+0x120>)
 8005ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce8:	601a      	str	r2, [r3, #0]
					break;
 8005cea:	e03b      	b.n	8005d64 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cec:	4b22      	ldr	r3, [pc, #136]	; (8005d78 <xTaskIncrementTick+0x114>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d203      	bcs.n	8005d0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d04:	4a1f      	ldr	r2, [pc, #124]	; (8005d84 <xTaskIncrementTick+0x120>)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d0a:	e02b      	b.n	8005d64 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fe fed7 	bl	8004ac4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d004      	beq.n	8005d28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	3318      	adds	r3, #24
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe fece 	bl	8004ac4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2c:	4b16      	ldr	r3, [pc, #88]	; (8005d88 <xTaskIncrementTick+0x124>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d903      	bls.n	8005d3c <xTaskIncrementTick+0xd8>
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	4a13      	ldr	r2, [pc, #76]	; (8005d88 <xTaskIncrementTick+0x124>)
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d40:	4613      	mov	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4a10      	ldr	r2, [pc, #64]	; (8005d8c <xTaskIncrementTick+0x128>)
 8005d4a:	441a      	add	r2, r3
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	4619      	mov	r1, r3
 8005d52:	4610      	mov	r0, r2
 8005d54:	f7fe fe59 	bl	8004a0a <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d58:	e7be      	b.n	8005cd8 <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d5a:	4b0d      	ldr	r3, [pc, #52]	; (8005d90 <xTaskIncrementTick+0x12c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	4a0b      	ldr	r2, [pc, #44]	; (8005d90 <xTaskIncrementTick+0x12c>)
 8005d62:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d64:	697b      	ldr	r3, [r7, #20]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000c4c 	.word	0x20000c4c
 8005d74:	20000c28 	.word	0x20000c28
 8005d78:	20000bdc 	.word	0x20000bdc
 8005d7c:	20000be0 	.word	0x20000be0
 8005d80:	20000c3c 	.word	0x20000c3c
 8005d84:	20000c44 	.word	0x20000c44
 8005d88:	20000c2c 	.word	0x20000c2c
 8005d8c:	20000754 	.word	0x20000754
 8005d90:	20000c34 	.word	0x20000c34

08005d94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d9a:	4b28      	ldr	r3, [pc, #160]	; (8005e3c <vTaskSwitchContext+0xa8>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005da2:	4b27      	ldr	r3, [pc, #156]	; (8005e40 <vTaskSwitchContext+0xac>)
 8005da4:	2201      	movs	r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005da8:	e042      	b.n	8005e30 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005daa:	4b25      	ldr	r3, [pc, #148]	; (8005e40 <vTaskSwitchContext+0xac>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db0:	4b24      	ldr	r3, [pc, #144]	; (8005e44 <vTaskSwitchContext+0xb0>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	e011      	b.n	8005ddc <vTaskSwitchContext+0x48>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10b      	bne.n	8005dd6 <vTaskSwitchContext+0x42>
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	b672      	cpsid	i
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	b662      	cpsie	i
 8005dd2:	607b      	str	r3, [r7, #4]
 8005dd4:	e7fe      	b.n	8005dd4 <vTaskSwitchContext+0x40>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	491a      	ldr	r1, [pc, #104]	; (8005e48 <vTaskSwitchContext+0xb4>)
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4613      	mov	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	440b      	add	r3, r1
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0e3      	beq.n	8005db8 <vTaskSwitchContext+0x24>
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4a13      	ldr	r2, [pc, #76]	; (8005e48 <vTaskSwitchContext+0xb4>)
 8005dfc:	4413      	add	r3, r2
 8005dfe:	60bb      	str	r3, [r7, #8]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	605a      	str	r2, [r3, #4]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	3308      	adds	r3, #8
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d104      	bne.n	8005e20 <vTaskSwitchContext+0x8c>
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	605a      	str	r2, [r3, #4]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	4a09      	ldr	r2, [pc, #36]	; (8005e4c <vTaskSwitchContext+0xb8>)
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4a06      	ldr	r2, [pc, #24]	; (8005e44 <vTaskSwitchContext+0xb0>)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6013      	str	r3, [r2, #0]
}
 8005e30:	bf00      	nop
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	20000c4c 	.word	0x20000c4c
 8005e40:	20000c38 	.word	0x20000c38
 8005e44:	20000c2c 	.word	0x20000c2c
 8005e48:	20000754 	.word	0x20000754
 8005e4c:	20000750 	.word	0x20000750

08005e50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10b      	bne.n	8005e78 <vTaskPlaceOnEventList+0x28>
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	b672      	cpsid	i
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	b662      	cpsie	i
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	e7fe      	b.n	8005e76 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e78:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <vTaskPlaceOnEventList+0x48>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3318      	adds	r3, #24
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7fe fde6 	bl	8004a52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e86:	2101      	movs	r1, #1
 8005e88:	6838      	ldr	r0, [r7, #0]
 8005e8a:	f000 fa79 	bl	8006380 <prvAddCurrentTaskToDelayedList>
}
 8005e8e:	bf00      	nop
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000750 	.word	0x20000750

08005e9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10b      	bne.n	8005ec6 <vTaskPlaceOnEventListRestricted+0x2a>
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	b672      	cpsid	i
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	b662      	cpsie	i
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e7fe      	b.n	8005ec4 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ec6:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3318      	adds	r3, #24
 8005ecc:	4619      	mov	r1, r3
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f7fe fd9b 	bl	8004a0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005eda:	f04f 33ff 	mov.w	r3, #4294967295
 8005ede:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	68b8      	ldr	r0, [r7, #8]
 8005ee4:	f000 fa4c 	bl	8006380 <prvAddCurrentTaskToDelayedList>
	}
 8005ee8:	bf00      	nop
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20000750 	.word	0x20000750

08005ef4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10b      	bne.n	8005f22 <xTaskRemoveFromEventList+0x2e>
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	b672      	cpsid	i
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	b662      	cpsie	i
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	e7fe      	b.n	8005f20 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	3318      	adds	r3, #24
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fe fdcc 	bl	8004ac4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f2c:	4b1d      	ldr	r3, [pc, #116]	; (8005fa4 <xTaskRemoveFromEventList+0xb0>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d11d      	bne.n	8005f70 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	3304      	adds	r3, #4
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fe fdc3 	bl	8004ac4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f42:	4b19      	ldr	r3, [pc, #100]	; (8005fa8 <xTaskRemoveFromEventList+0xb4>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d903      	bls.n	8005f52 <xTaskRemoveFromEventList+0x5e>
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4e:	4a16      	ldr	r2, [pc, #88]	; (8005fa8 <xTaskRemoveFromEventList+0xb4>)
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4a13      	ldr	r2, [pc, #76]	; (8005fac <xTaskRemoveFromEventList+0xb8>)
 8005f60:	441a      	add	r2, r3
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	3304      	adds	r3, #4
 8005f66:	4619      	mov	r1, r3
 8005f68:	4610      	mov	r0, r2
 8005f6a:	f7fe fd4e 	bl	8004a0a <vListInsertEnd>
 8005f6e:	e005      	b.n	8005f7c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	3318      	adds	r3, #24
 8005f74:	4619      	mov	r1, r3
 8005f76:	480e      	ldr	r0, [pc, #56]	; (8005fb0 <xTaskRemoveFromEventList+0xbc>)
 8005f78:	f7fe fd47 	bl	8004a0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f80:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <xTaskRemoveFromEventList+0xc0>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d905      	bls.n	8005f96 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f8e:	4b0a      	ldr	r3, [pc, #40]	; (8005fb8 <xTaskRemoveFromEventList+0xc4>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	e001      	b.n	8005f9a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f9a:	697b      	ldr	r3, [r7, #20]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20000c4c 	.word	0x20000c4c
 8005fa8:	20000c2c 	.word	0x20000c2c
 8005fac:	20000754 	.word	0x20000754
 8005fb0:	20000be4 	.word	0x20000be4
 8005fb4:	20000750 	.word	0x20000750
 8005fb8:	20000c38 	.word	0x20000c38

08005fbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fc4:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <vTaskInternalSetTimeOutState+0x24>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fcc:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <vTaskInternalSetTimeOutState+0x28>)
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	605a      	str	r2, [r3, #4]
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	20000c3c 	.word	0x20000c3c
 8005fe4:	20000c28 	.word	0x20000c28

08005fe8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10b      	bne.n	8006010 <xTaskCheckForTimeOut+0x28>
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	b672      	cpsid	i
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	b662      	cpsie	i
 800600c:	613b      	str	r3, [r7, #16]
 800600e:	e7fe      	b.n	800600e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10b      	bne.n	800602e <xTaskCheckForTimeOut+0x46>
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	b672      	cpsid	i
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	b662      	cpsie	i
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	e7fe      	b.n	800602c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800602e:	f000 ff1b 	bl	8006e68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006032:	4b1d      	ldr	r3, [pc, #116]	; (80060a8 <xTaskCheckForTimeOut+0xc0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604a:	d102      	bne.n	8006052 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800604c:	2300      	movs	r3, #0
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	e023      	b.n	800609a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4b15      	ldr	r3, [pc, #84]	; (80060ac <xTaskCheckForTimeOut+0xc4>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d007      	beq.n	800606e <xTaskCheckForTimeOut+0x86>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	429a      	cmp	r2, r3
 8006066:	d302      	bcc.n	800606e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006068:	2301      	movs	r3, #1
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	e015      	b.n	800609a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	429a      	cmp	r2, r3
 8006076:	d20b      	bcs.n	8006090 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	1ad2      	subs	r2, r2, r3
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff ff99 	bl	8005fbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
 800608e:	e004      	b.n	800609a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006096:	2301      	movs	r3, #1
 8006098:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800609a:	f000 ff17 	bl	8006ecc <vPortExitCritical>

	return xReturn;
 800609e:	69fb      	ldr	r3, [r7, #28]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3720      	adds	r7, #32
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	20000c28 	.word	0x20000c28
 80060ac:	20000c3c 	.word	0x20000c3c

080060b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060b4:	4b03      	ldr	r3, [pc, #12]	; (80060c4 <vTaskMissedYield+0x14>)
 80060b6:	2201      	movs	r2, #1
 80060b8:	601a      	str	r2, [r3, #0]
}
 80060ba:	bf00      	nop
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	20000c38 	.word	0x20000c38

080060c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060d0:	f000 f84c 	bl	800616c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 80060d4:	4b04      	ldr	r3, [pc, #16]	; (80060e8 <prvIdleTask+0x20>)
 80060d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060e4:	e7f4      	b.n	80060d0 <prvIdleTask+0x8>
 80060e6:	bf00      	nop
 80060e8:	e000ed04 	.word	0xe000ed04

080060ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060f2:	2300      	movs	r3, #0
 80060f4:	607b      	str	r3, [r7, #4]
 80060f6:	e00c      	b.n	8006112 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	4613      	mov	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4a12      	ldr	r2, [pc, #72]	; (800614c <prvInitialiseTaskLists+0x60>)
 8006104:	4413      	add	r3, r2
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe fc52 	bl	80049b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3301      	adds	r3, #1
 8006110:	607b      	str	r3, [r7, #4]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b37      	cmp	r3, #55	; 0x37
 8006116:	d9ef      	bls.n	80060f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006118:	480d      	ldr	r0, [pc, #52]	; (8006150 <prvInitialiseTaskLists+0x64>)
 800611a:	f7fe fc49 	bl	80049b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800611e:	480d      	ldr	r0, [pc, #52]	; (8006154 <prvInitialiseTaskLists+0x68>)
 8006120:	f7fe fc46 	bl	80049b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006124:	480c      	ldr	r0, [pc, #48]	; (8006158 <prvInitialiseTaskLists+0x6c>)
 8006126:	f7fe fc43 	bl	80049b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800612a:	480c      	ldr	r0, [pc, #48]	; (800615c <prvInitialiseTaskLists+0x70>)
 800612c:	f7fe fc40 	bl	80049b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006130:	480b      	ldr	r0, [pc, #44]	; (8006160 <prvInitialiseTaskLists+0x74>)
 8006132:	f7fe fc3d 	bl	80049b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006136:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <prvInitialiseTaskLists+0x78>)
 8006138:	4a05      	ldr	r2, [pc, #20]	; (8006150 <prvInitialiseTaskLists+0x64>)
 800613a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800613c:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <prvInitialiseTaskLists+0x7c>)
 800613e:	4a05      	ldr	r2, [pc, #20]	; (8006154 <prvInitialiseTaskLists+0x68>)
 8006140:	601a      	str	r2, [r3, #0]
}
 8006142:	bf00      	nop
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	20000754 	.word	0x20000754
 8006150:	20000bb4 	.word	0x20000bb4
 8006154:	20000bc8 	.word	0x20000bc8
 8006158:	20000be4 	.word	0x20000be4
 800615c:	20000bf8 	.word	0x20000bf8
 8006160:	20000c10 	.word	0x20000c10
 8006164:	20000bdc 	.word	0x20000bdc
 8006168:	20000be0 	.word	0x20000be0

0800616c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006172:	e019      	b.n	80061a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006174:	f000 fe78 	bl	8006e68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006178:	4b0f      	ldr	r3, [pc, #60]	; (80061b8 <prvCheckTasksWaitingTermination+0x4c>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3304      	adds	r3, #4
 8006184:	4618      	mov	r0, r3
 8006186:	f7fe fc9d 	bl	8004ac4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800618a:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <prvCheckTasksWaitingTermination+0x50>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3b01      	subs	r3, #1
 8006190:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <prvCheckTasksWaitingTermination+0x50>)
 8006192:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006194:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <prvCheckTasksWaitingTermination+0x54>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3b01      	subs	r3, #1
 800619a:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <prvCheckTasksWaitingTermination+0x54>)
 800619c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800619e:	f000 fe95 	bl	8006ecc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f80e 	bl	80061c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061a8:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <prvCheckTasksWaitingTermination+0x54>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e1      	bne.n	8006174 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	20000bf8 	.word	0x20000bf8
 80061bc:	20000c24 	.word	0x20000c24
 80061c0:	20000c0c 	.word	0x20000c0c

080061c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d108      	bne.n	80061e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 f82e 	bl	800723c <vPortFree>
				vPortFree( pxTCB );
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f001 f82b 	bl	800723c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061e6:	e019      	b.n	800621c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d103      	bne.n	80061fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f001 f822 	bl	800723c <vPortFree>
	}
 80061f8:	e010      	b.n	800621c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006200:	2b02      	cmp	r3, #2
 8006202:	d00b      	beq.n	800621c <prvDeleteTCB+0x58>
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	b672      	cpsid	i
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	b662      	cpsie	i
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	e7fe      	b.n	800621a <prvDeleteTCB+0x56>
	}
 800621c:	bf00      	nop
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800622a:	4b0c      	ldr	r3, [pc, #48]	; (800625c <prvResetNextTaskUnblockTime+0x38>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006234:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <prvResetNextTaskUnblockTime+0x3c>)
 8006236:	f04f 32ff 	mov.w	r2, #4294967295
 800623a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800623c:	e008      	b.n	8006250 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800623e:	4b07      	ldr	r3, [pc, #28]	; (800625c <prvResetNextTaskUnblockTime+0x38>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	4a04      	ldr	r2, [pc, #16]	; (8006260 <prvResetNextTaskUnblockTime+0x3c>)
 800624e:	6013      	str	r3, [r2, #0]
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	20000bdc 	.word	0x20000bdc
 8006260:	20000c44 	.word	0x20000c44

08006264 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800626a:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <xTaskGetSchedulerState+0x34>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d102      	bne.n	8006278 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006272:	2301      	movs	r3, #1
 8006274:	607b      	str	r3, [r7, #4]
 8006276:	e008      	b.n	800628a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006278:	4b08      	ldr	r3, [pc, #32]	; (800629c <xTaskGetSchedulerState+0x38>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d102      	bne.n	8006286 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006280:	2302      	movs	r3, #2
 8006282:	607b      	str	r3, [r7, #4]
 8006284:	e001      	b.n	800628a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006286:	2300      	movs	r3, #0
 8006288:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800628a:	687b      	ldr	r3, [r7, #4]
	}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	20000c30 	.word	0x20000c30
 800629c:	20000c4c 	.word	0x20000c4c

080062a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062ac:	2300      	movs	r3, #0
 80062ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d058      	beq.n	8006368 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062b6:	4b2f      	ldr	r3, [pc, #188]	; (8006374 <xTaskPriorityDisinherit+0xd4>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d00b      	beq.n	80062d8 <xTaskPriorityDisinherit+0x38>
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	b672      	cpsid	i
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	b662      	cpsie	i
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	e7fe      	b.n	80062d6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10b      	bne.n	80062f8 <xTaskPriorityDisinherit+0x58>
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	b672      	cpsid	i
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	b662      	cpsie	i
 80062f4:	60bb      	str	r3, [r7, #8]
 80062f6:	e7fe      	b.n	80062f6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062fc:	1e5a      	subs	r2, r3, #1
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630a:	429a      	cmp	r2, r3
 800630c:	d02c      	beq.n	8006368 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006312:	2b00      	cmp	r3, #0
 8006314:	d128      	bne.n	8006368 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	3304      	adds	r3, #4
 800631a:	4618      	mov	r0, r3
 800631c:	f7fe fbd2 	bl	8004ac4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006338:	4b0f      	ldr	r3, [pc, #60]	; (8006378 <xTaskPriorityDisinherit+0xd8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d903      	bls.n	8006348 <xTaskPriorityDisinherit+0xa8>
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	4a0c      	ldr	r2, [pc, #48]	; (8006378 <xTaskPriorityDisinherit+0xd8>)
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634c:	4613      	mov	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4a09      	ldr	r2, [pc, #36]	; (800637c <xTaskPriorityDisinherit+0xdc>)
 8006356:	441a      	add	r2, r3
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	3304      	adds	r3, #4
 800635c:	4619      	mov	r1, r3
 800635e:	4610      	mov	r0, r2
 8006360:	f7fe fb53 	bl	8004a0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006364:	2301      	movs	r3, #1
 8006366:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006368:	697b      	ldr	r3, [r7, #20]
	}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20000750 	.word	0x20000750
 8006378:	20000c2c 	.word	0x20000c2c
 800637c:	20000754 	.word	0x20000754

08006380 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800638a:	4b21      	ldr	r3, [pc, #132]	; (8006410 <prvAddCurrentTaskToDelayedList+0x90>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006390:	4b20      	ldr	r3, [pc, #128]	; (8006414 <prvAddCurrentTaskToDelayedList+0x94>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3304      	adds	r3, #4
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe fb94 	bl	8004ac4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a2:	d10a      	bne.n	80063ba <prvAddCurrentTaskToDelayedList+0x3a>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d007      	beq.n	80063ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063aa:	4b1a      	ldr	r3, [pc, #104]	; (8006414 <prvAddCurrentTaskToDelayedList+0x94>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3304      	adds	r3, #4
 80063b0:	4619      	mov	r1, r3
 80063b2:	4819      	ldr	r0, [pc, #100]	; (8006418 <prvAddCurrentTaskToDelayedList+0x98>)
 80063b4:	f7fe fb29 	bl	8004a0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063b8:	e026      	b.n	8006408 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4413      	add	r3, r2
 80063c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063c2:	4b14      	ldr	r3, [pc, #80]	; (8006414 <prvAddCurrentTaskToDelayedList+0x94>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d209      	bcs.n	80063e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063d2:	4b12      	ldr	r3, [pc, #72]	; (800641c <prvAddCurrentTaskToDelayedList+0x9c>)
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <prvAddCurrentTaskToDelayedList+0x94>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3304      	adds	r3, #4
 80063dc:	4619      	mov	r1, r3
 80063de:	4610      	mov	r0, r2
 80063e0:	f7fe fb37 	bl	8004a52 <vListInsert>
}
 80063e4:	e010      	b.n	8006408 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063e6:	4b0e      	ldr	r3, [pc, #56]	; (8006420 <prvAddCurrentTaskToDelayedList+0xa0>)
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <prvAddCurrentTaskToDelayedList+0x94>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3304      	adds	r3, #4
 80063f0:	4619      	mov	r1, r3
 80063f2:	4610      	mov	r0, r2
 80063f4:	f7fe fb2d 	bl	8004a52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063f8:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d202      	bcs.n	8006408 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006402:	4a08      	ldr	r2, [pc, #32]	; (8006424 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	6013      	str	r3, [r2, #0]
}
 8006408:	bf00      	nop
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	20000c28 	.word	0x20000c28
 8006414:	20000750 	.word	0x20000750
 8006418:	20000c10 	.word	0x20000c10
 800641c:	20000be0 	.word	0x20000be0
 8006420:	20000bdc 	.word	0x20000bdc
 8006424:	20000c44 	.word	0x20000c44

08006428 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08a      	sub	sp, #40	; 0x28
 800642c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800642e:	2300      	movs	r3, #0
 8006430:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006432:	f000 fbab 	bl	8006b8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006436:	4b1d      	ldr	r3, [pc, #116]	; (80064ac <xTimerCreateTimerTask+0x84>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d021      	beq.n	8006482 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800643e:	2300      	movs	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006442:	2300      	movs	r3, #0
 8006444:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006446:	1d3a      	adds	r2, r7, #4
 8006448:	f107 0108 	add.w	r1, r7, #8
 800644c:	f107 030c 	add.w	r3, r7, #12
 8006450:	4618      	mov	r0, r3
 8006452:	f7fe fa93 	bl	800497c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006456:	6879      	ldr	r1, [r7, #4]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	9202      	str	r2, [sp, #8]
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	2302      	movs	r3, #2
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	2300      	movs	r3, #0
 8006466:	460a      	mov	r2, r1
 8006468:	4911      	ldr	r1, [pc, #68]	; (80064b0 <xTimerCreateTimerTask+0x88>)
 800646a:	4812      	ldr	r0, [pc, #72]	; (80064b4 <xTimerCreateTimerTask+0x8c>)
 800646c:	f7ff f918 	bl	80056a0 <xTaskCreateStatic>
 8006470:	4602      	mov	r2, r0
 8006472:	4b11      	ldr	r3, [pc, #68]	; (80064b8 <xTimerCreateTimerTask+0x90>)
 8006474:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006476:	4b10      	ldr	r3, [pc, #64]	; (80064b8 <xTimerCreateTimerTask+0x90>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800647e:	2301      	movs	r3, #1
 8006480:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10b      	bne.n	80064a0 <xTimerCreateTimerTask+0x78>
 8006488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648c:	b672      	cpsid	i
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	b662      	cpsie	i
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	e7fe      	b.n	800649e <xTimerCreateTimerTask+0x76>
	return xReturn;
 80064a0:	697b      	ldr	r3, [r7, #20]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000c80 	.word	0x20000c80
 80064b0:	08007e58 	.word	0x08007e58
 80064b4:	08006731 	.word	0x08006731
 80064b8:	20000c84 	.word	0x20000c84

080064bc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af02      	add	r7, sp, #8
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80064ca:	202c      	movs	r0, #44	; 0x2c
 80064cc:	f000 fdee 	bl	80070ac <pvPortMalloc>
 80064d0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00d      	beq.n	80064f4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	9301      	str	r3, [sp, #4]
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 f845 	bl	800657e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80064f4:	697b      	ldr	r3, [r7, #20]
	}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b08a      	sub	sp, #40	; 0x28
 8006502:	af02      	add	r7, sp, #8
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	607a      	str	r2, [r7, #4]
 800650a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800650c:	232c      	movs	r3, #44	; 0x2c
 800650e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	2b2c      	cmp	r3, #44	; 0x2c
 8006514:	d00b      	beq.n	800652e <xTimerCreateStatic+0x30>
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	b672      	cpsid	i
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	b662      	cpsie	i
 800652a:	61bb      	str	r3, [r7, #24]
 800652c:	e7fe      	b.n	800652c <xTimerCreateStatic+0x2e>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800652e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10b      	bne.n	800654e <xTimerCreateStatic+0x50>
 8006536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653a:	b672      	cpsid	i
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	b662      	cpsie	i
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e7fe      	b.n	800654c <xTimerCreateStatic+0x4e>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006550:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00d      	beq.n	8006574 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	9301      	str	r3, [sp, #4]
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 f805 	bl	800657e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006574:	69fb      	ldr	r3, [r7, #28]
	}
 8006576:	4618      	mov	r0, r3
 8006578:	3720      	adds	r7, #32
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b086      	sub	sp, #24
 8006582:	af00      	add	r7, sp, #0
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	607a      	str	r2, [r7, #4]
 800658a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10b      	bne.n	80065aa <prvInitialiseNewTimer+0x2c>
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	b672      	cpsid	i
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	b662      	cpsie	i
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	e7fe      	b.n	80065a8 <prvInitialiseNewTimer+0x2a>

	if( pxNewTimer != NULL )
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01e      	beq.n	80065ee <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80065b0:	f000 faec 	bl	8006b8c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	6a3a      	ldr	r2, [r7, #32]
 80065ca:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	3304      	adds	r3, #4
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fe fa0d 	bl	80049f0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065e2:	f043 0304 	orr.w	r3, r3, #4
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80065ee:	bf00      	nop
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08a      	sub	sp, #40	; 0x28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006606:	2300      	movs	r3, #0
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10b      	bne.n	8006628 <xTimerGenericCommand+0x30>
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	b672      	cpsid	i
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	b662      	cpsie	i
 8006624:	623b      	str	r3, [r7, #32]
 8006626:	e7fe      	b.n	8006626 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006628:	4b19      	ldr	r3, [pc, #100]	; (8006690 <xTimerGenericCommand+0x98>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d02a      	beq.n	8006686 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b05      	cmp	r3, #5
 8006640:	dc18      	bgt.n	8006674 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006642:	f7ff fe0f 	bl	8006264 <xTaskGetSchedulerState>
 8006646:	4603      	mov	r3, r0
 8006648:	2b02      	cmp	r3, #2
 800664a:	d109      	bne.n	8006660 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800664c:	4b10      	ldr	r3, [pc, #64]	; (8006690 <xTimerGenericCommand+0x98>)
 800664e:	6818      	ldr	r0, [r3, #0]
 8006650:	f107 0110 	add.w	r1, r7, #16
 8006654:	2300      	movs	r3, #0
 8006656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006658:	f7fe fc0a 	bl	8004e70 <xQueueGenericSend>
 800665c:	6278      	str	r0, [r7, #36]	; 0x24
 800665e:	e012      	b.n	8006686 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006660:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <xTimerGenericCommand+0x98>)
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	f107 0110 	add.w	r1, r7, #16
 8006668:	2300      	movs	r3, #0
 800666a:	2200      	movs	r2, #0
 800666c:	f7fe fc00 	bl	8004e70 <xQueueGenericSend>
 8006670:	6278      	str	r0, [r7, #36]	; 0x24
 8006672:	e008      	b.n	8006686 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006674:	4b06      	ldr	r3, [pc, #24]	; (8006690 <xTimerGenericCommand+0x98>)
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	f107 0110 	add.w	r1, r7, #16
 800667c:	2300      	movs	r3, #0
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	f7fe fce0 	bl	8005044 <xQueueGenericSendFromISR>
 8006684:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006688:	4618      	mov	r0, r3
 800668a:	3728      	adds	r7, #40	; 0x28
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	20000c80 	.word	0x20000c80

08006694 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af02      	add	r7, sp, #8
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800669e:	4b23      	ldr	r3, [pc, #140]	; (800672c <prvProcessExpiredTimer+0x98>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	3304      	adds	r3, #4
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe fa09 	bl	8004ac4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d023      	beq.n	8006708 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	699a      	ldr	r2, [r3, #24]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	18d1      	adds	r1, r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	6978      	ldr	r0, [r7, #20]
 80066ce:	f000 f8d3 	bl	8006878 <prvInsertTimerInActiveList>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d020      	beq.n	800671a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066d8:	2300      	movs	r3, #0
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	2300      	movs	r3, #0
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	2100      	movs	r1, #0
 80066e2:	6978      	ldr	r0, [r7, #20]
 80066e4:	f7ff ff88 	bl	80065f8 <xTimerGenericCommand>
 80066e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d114      	bne.n	800671a <prvProcessExpiredTimer+0x86>
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	b672      	cpsid	i
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	b662      	cpsie	i
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	e7fe      	b.n	8006706 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800670e:	f023 0301 	bic.w	r3, r3, #1
 8006712:	b2da      	uxtb	r2, r3
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	6978      	ldr	r0, [r7, #20]
 8006720:	4798      	blx	r3
}
 8006722:	bf00      	nop
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000c78 	.word	0x20000c78

08006730 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006738:	f107 0308 	add.w	r3, r7, #8
 800673c:	4618      	mov	r0, r3
 800673e:	f000 f857 	bl	80067f0 <prvGetNextExpireTime>
 8006742:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	4619      	mov	r1, r3
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 f803 	bl	8006754 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800674e:	f000 f8d5 	bl	80068fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006752:	e7f1      	b.n	8006738 <prvTimerTask+0x8>

08006754 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800675e:	f7ff f9d3 	bl	8005b08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006762:	f107 0308 	add.w	r3, r7, #8
 8006766:	4618      	mov	r0, r3
 8006768:	f000 f866 	bl	8006838 <prvSampleTimeNow>
 800676c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d130      	bne.n	80067d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10a      	bne.n	8006790 <prvProcessTimerOrBlockTask+0x3c>
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	429a      	cmp	r2, r3
 8006780:	d806      	bhi.n	8006790 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006782:	f7ff f9cf 	bl	8005b24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006786:	68f9      	ldr	r1, [r7, #12]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7ff ff83 	bl	8006694 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800678e:	e024      	b.n	80067da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d008      	beq.n	80067a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006796:	4b13      	ldr	r3, [pc, #76]	; (80067e4 <prvProcessTimerOrBlockTask+0x90>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <prvProcessTimerOrBlockTask+0x50>
 80067a0:	2301      	movs	r3, #1
 80067a2:	e000      	b.n	80067a6 <prvProcessTimerOrBlockTask+0x52>
 80067a4:	2300      	movs	r3, #0
 80067a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067a8:	4b0f      	ldr	r3, [pc, #60]	; (80067e8 <prvProcessTimerOrBlockTask+0x94>)
 80067aa:	6818      	ldr	r0, [r3, #0]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	4619      	mov	r1, r3
 80067b6:	f7fe ff3f 	bl	8005638 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067ba:	f7ff f9b3 	bl	8005b24 <xTaskResumeAll>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10a      	bne.n	80067da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067c4:	4b09      	ldr	r3, [pc, #36]	; (80067ec <prvProcessTimerOrBlockTask+0x98>)
 80067c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	f3bf 8f6f 	isb	sy
}
 80067d4:	e001      	b.n	80067da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067d6:	f7ff f9a5 	bl	8005b24 <xTaskResumeAll>
}
 80067da:	bf00      	nop
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20000c7c 	.word	0x20000c7c
 80067e8:	20000c80 	.word	0x20000c80
 80067ec:	e000ed04 	.word	0xe000ed04

080067f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067f8:	4b0e      	ldr	r3, [pc, #56]	; (8006834 <prvGetNextExpireTime+0x44>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <prvGetNextExpireTime+0x16>
 8006802:	2201      	movs	r2, #1
 8006804:	e000      	b.n	8006808 <prvGetNextExpireTime+0x18>
 8006806:	2200      	movs	r2, #0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d105      	bne.n	8006820 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006814:	4b07      	ldr	r3, [pc, #28]	; (8006834 <prvGetNextExpireTime+0x44>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	e001      	b.n	8006824 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006824:	68fb      	ldr	r3, [r7, #12]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20000c78 	.word	0x20000c78

08006838 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006840:	f7ff fa00 	bl	8005c44 <xTaskGetTickCount>
 8006844:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006846:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <prvSampleTimeNow+0x3c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	429a      	cmp	r2, r3
 800684e:	d205      	bcs.n	800685c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006850:	f000 f936 	bl	8006ac0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	e002      	b.n	8006862 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006862:	4a04      	ldr	r2, [pc, #16]	; (8006874 <prvSampleTimeNow+0x3c>)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006868:	68fb      	ldr	r3, [r7, #12]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20000c88 	.word	0x20000c88

08006878 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	429a      	cmp	r2, r3
 800689c:	d812      	bhi.n	80068c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	1ad2      	subs	r2, r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d302      	bcc.n	80068b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068ac:	2301      	movs	r3, #1
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	e01b      	b.n	80068ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068b2:	4b10      	ldr	r3, [pc, #64]	; (80068f4 <prvInsertTimerInActiveList+0x7c>)
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3304      	adds	r3, #4
 80068ba:	4619      	mov	r1, r3
 80068bc:	4610      	mov	r0, r2
 80068be:	f7fe f8c8 	bl	8004a52 <vListInsert>
 80068c2:	e012      	b.n	80068ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d206      	bcs.n	80068da <prvInsertTimerInActiveList+0x62>
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d302      	bcc.n	80068da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068d4:	2301      	movs	r3, #1
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	e007      	b.n	80068ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068da:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <prvInsertTimerInActiveList+0x80>)
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3304      	adds	r3, #4
 80068e2:	4619      	mov	r1, r3
 80068e4:	4610      	mov	r0, r2
 80068e6:	f7fe f8b4 	bl	8004a52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068ea:	697b      	ldr	r3, [r7, #20]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20000c7c 	.word	0x20000c7c
 80068f8:	20000c78 	.word	0x20000c78

080068fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08e      	sub	sp, #56	; 0x38
 8006900:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006902:	e0cc      	b.n	8006a9e <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	da19      	bge.n	800693e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800690a:	1d3b      	adds	r3, r7, #4
 800690c:	3304      	adds	r3, #4
 800690e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10b      	bne.n	800692e <prvProcessReceivedCommands+0x32>
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	b672      	cpsid	i
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	b662      	cpsie	i
 800692a:	61fb      	str	r3, [r7, #28]
 800692c:	e7fe      	b.n	800692c <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800692e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006934:	6850      	ldr	r0, [r2, #4]
 8006936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006938:	6892      	ldr	r2, [r2, #8]
 800693a:	4611      	mov	r1, r2
 800693c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	f2c0 80ab 	blt.w	8006a9c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d004      	beq.n	800695c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006954:	3304      	adds	r3, #4
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe f8b4 	bl	8004ac4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800695c:	463b      	mov	r3, r7
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff ff6a 	bl	8006838 <prvSampleTimeNow>
 8006964:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b09      	cmp	r3, #9
 800696a:	f200 8098 	bhi.w	8006a9e <prvProcessReceivedCommands+0x1a2>
 800696e:	a201      	add	r2, pc, #4	; (adr r2, 8006974 <prvProcessReceivedCommands+0x78>)
 8006970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006974:	0800699d 	.word	0x0800699d
 8006978:	0800699d 	.word	0x0800699d
 800697c:	0800699d 	.word	0x0800699d
 8006980:	08006a13 	.word	0x08006a13
 8006984:	08006a27 	.word	0x08006a27
 8006988:	08006a73 	.word	0x08006a73
 800698c:	0800699d 	.word	0x0800699d
 8006990:	0800699d 	.word	0x0800699d
 8006994:	08006a13 	.word	0x08006a13
 8006998:	08006a27 	.word	0x08006a27
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069a2:	f043 0301 	orr.w	r3, r3, #1
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	18d1      	adds	r1, r2, r3
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069bc:	f7ff ff5c 	bl	8006878 <prvInsertTimerInActiveList>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d06b      	beq.n	8006a9e <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d060      	beq.n	8006a9e <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	441a      	add	r2, r3
 80069e4:	2300      	movs	r3, #0
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	2300      	movs	r3, #0
 80069ea:	2100      	movs	r1, #0
 80069ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ee:	f7ff fe03 	bl	80065f8 <xTimerGenericCommand>
 80069f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d151      	bne.n	8006a9e <prvProcessReceivedCommands+0x1a2>
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	b672      	cpsid	i
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	b662      	cpsie	i
 8006a0e:	61bb      	str	r3, [r7, #24]
 8006a10:	e7fe      	b.n	8006a10 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a24:	e03b      	b.n	8006a9e <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10b      	bne.n	8006a5e <prvProcessReceivedCommands+0x162>
 8006a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4a:	b672      	cpsid	i
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	b662      	cpsie	i
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e7fe      	b.n	8006a5c <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	699a      	ldr	r2, [r3, #24]
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	18d1      	adds	r1, r2, r3
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a6c:	f7ff ff04 	bl	8006878 <prvInsertTimerInActiveList>
					break;
 8006a70:	e015      	b.n	8006a9e <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d103      	bne.n	8006a88 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a82:	f000 fbdb 	bl	800723c <vPortFree>
 8006a86:	e00a      	b.n	8006a9e <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a8e:	f023 0301 	bic.w	r3, r3, #1
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a9a:	e000      	b.n	8006a9e <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006a9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a9e:	4b07      	ldr	r3, [pc, #28]	; (8006abc <prvProcessReceivedCommands+0x1c0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	1d39      	adds	r1, r7, #4
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fb68 	bl	800517c <xQueueReceive>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f47f af28 	bne.w	8006904 <prvProcessReceivedCommands+0x8>
	}
}
 8006ab4:	bf00      	nop
 8006ab6:	3730      	adds	r7, #48	; 0x30
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	20000c80 	.word	0x20000c80

08006ac0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ac6:	e049      	b.n	8006b5c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ac8:	4b2e      	ldr	r3, [pc, #184]	; (8006b84 <prvSwitchTimerLists+0xc4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad2:	4b2c      	ldr	r3, [pc, #176]	; (8006b84 <prvSwitchTimerLists+0xc4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fd ffef 	bl	8004ac4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d02f      	beq.n	8006b5c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4413      	add	r3, r2
 8006b04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d90e      	bls.n	8006b2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b1a:	4b1a      	ldr	r3, [pc, #104]	; (8006b84 <prvSwitchTimerLists+0xc4>)
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3304      	adds	r3, #4
 8006b22:	4619      	mov	r1, r3
 8006b24:	4610      	mov	r0, r2
 8006b26:	f7fd ff94 	bl	8004a52 <vListInsert>
 8006b2a:	e017      	b.n	8006b5c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	2300      	movs	r3, #0
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	2100      	movs	r1, #0
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7ff fd5e 	bl	80065f8 <xTimerGenericCommand>
 8006b3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10b      	bne.n	8006b5c <prvSwitchTimerLists+0x9c>
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	b672      	cpsid	i
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	b662      	cpsie	i
 8006b58:	603b      	str	r3, [r7, #0]
 8006b5a:	e7fe      	b.n	8006b5a <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b5c:	4b09      	ldr	r3, [pc, #36]	; (8006b84 <prvSwitchTimerLists+0xc4>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1b0      	bne.n	8006ac8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b66:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <prvSwitchTimerLists+0xc4>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b6c:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <prvSwitchTimerLists+0xc8>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a04      	ldr	r2, [pc, #16]	; (8006b84 <prvSwitchTimerLists+0xc4>)
 8006b72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b74:	4a04      	ldr	r2, [pc, #16]	; (8006b88 <prvSwitchTimerLists+0xc8>)
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	6013      	str	r3, [r2, #0]
}
 8006b7a:	bf00      	nop
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20000c78 	.word	0x20000c78
 8006b88:	20000c7c 	.word	0x20000c7c

08006b8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b92:	f000 f969 	bl	8006e68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b96:	4b15      	ldr	r3, [pc, #84]	; (8006bec <prvCheckForValidListAndQueue+0x60>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d120      	bne.n	8006be0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b9e:	4814      	ldr	r0, [pc, #80]	; (8006bf0 <prvCheckForValidListAndQueue+0x64>)
 8006ba0:	f7fd ff06 	bl	80049b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ba4:	4813      	ldr	r0, [pc, #76]	; (8006bf4 <prvCheckForValidListAndQueue+0x68>)
 8006ba6:	f7fd ff03 	bl	80049b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006baa:	4b13      	ldr	r3, [pc, #76]	; (8006bf8 <prvCheckForValidListAndQueue+0x6c>)
 8006bac:	4a10      	ldr	r2, [pc, #64]	; (8006bf0 <prvCheckForValidListAndQueue+0x64>)
 8006bae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006bb0:	4b12      	ldr	r3, [pc, #72]	; (8006bfc <prvCheckForValidListAndQueue+0x70>)
 8006bb2:	4a10      	ldr	r2, [pc, #64]	; (8006bf4 <prvCheckForValidListAndQueue+0x68>)
 8006bb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	4b11      	ldr	r3, [pc, #68]	; (8006c00 <prvCheckForValidListAndQueue+0x74>)
 8006bbc:	4a11      	ldr	r2, [pc, #68]	; (8006c04 <prvCheckForValidListAndQueue+0x78>)
 8006bbe:	2110      	movs	r1, #16
 8006bc0:	200a      	movs	r0, #10
 8006bc2:	f7fe f805 	bl	8004bd0 <xQueueGenericCreateStatic>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	4b08      	ldr	r3, [pc, #32]	; (8006bec <prvCheckForValidListAndQueue+0x60>)
 8006bca:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006bcc:	4b07      	ldr	r3, [pc, #28]	; (8006bec <prvCheckForValidListAndQueue+0x60>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d005      	beq.n	8006be0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006bd4:	4b05      	ldr	r3, [pc, #20]	; (8006bec <prvCheckForValidListAndQueue+0x60>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	490b      	ldr	r1, [pc, #44]	; (8006c08 <prvCheckForValidListAndQueue+0x7c>)
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fcda 	bl	8005594 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006be0:	f000 f974 	bl	8006ecc <vPortExitCritical>
}
 8006be4:	bf00      	nop
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000c80 	.word	0x20000c80
 8006bf0:	20000c50 	.word	0x20000c50
 8006bf4:	20000c64 	.word	0x20000c64
 8006bf8:	20000c78 	.word	0x20000c78
 8006bfc:	20000c7c 	.word	0x20000c7c
 8006c00:	20000d2c 	.word	0x20000d2c
 8006c04:	20000c8c 	.word	0x20000c8c
 8006c08:	08007e60 	.word	0x08007e60

08006c0c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10b      	bne.n	8006c36 <pvTimerGetTimerID+0x2a>
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	b672      	cpsid	i
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	b662      	cpsie	i
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	e7fe      	b.n	8006c34 <pvTimerGetTimerID+0x28>

	taskENTER_CRITICAL();
 8006c36:	f000 f917 	bl	8006e68 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006c40:	f000 f944 	bl	8006ecc <vPortExitCritical>

	return pvReturn;
 8006c44:	693b      	ldr	r3, [r7, #16]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	3b04      	subs	r3, #4
 8006c60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	3b04      	subs	r3, #4
 8006c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f023 0201 	bic.w	r2, r3, #1
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3b04      	subs	r3, #4
 8006c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c80:	4a0c      	ldr	r2, [pc, #48]	; (8006cb4 <pxPortInitialiseStack+0x64>)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3b14      	subs	r3, #20
 8006c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3b04      	subs	r3, #4
 8006c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f06f 0202 	mvn.w	r2, #2
 8006c9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3b20      	subs	r3, #32
 8006ca4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	08006cb9 	.word	0x08006cb9

08006cb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cc2:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <prvTaskExitError+0x58>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cca:	d00b      	beq.n	8006ce4 <prvTaskExitError+0x2c>
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	b672      	cpsid	i
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	b662      	cpsie	i
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	e7fe      	b.n	8006ce2 <prvTaskExitError+0x2a>
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	b672      	cpsid	i
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	b662      	cpsie	i
 8006cf8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006cfa:	bf00      	nop
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0fc      	beq.n	8006cfc <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d02:	bf00      	nop
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	2000000c 	.word	0x2000000c
	...

08006d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <pxCurrentTCBConst2>)
 8006d22:	6819      	ldr	r1, [r3, #0]
 8006d24:	6808      	ldr	r0, [r1, #0]
 8006d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2a:	f380 8809 	msr	PSP, r0
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f04f 0000 	mov.w	r0, #0
 8006d36:	f380 8811 	msr	BASEPRI, r0
 8006d3a:	4770      	bx	lr
 8006d3c:	f3af 8000 	nop.w

08006d40 <pxCurrentTCBConst2>:
 8006d40:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop

08006d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d48:	4808      	ldr	r0, [pc, #32]	; (8006d6c <prvPortStartFirstTask+0x24>)
 8006d4a:	6800      	ldr	r0, [r0, #0]
 8006d4c:	6800      	ldr	r0, [r0, #0]
 8006d4e:	f380 8808 	msr	MSP, r0
 8006d52:	f04f 0000 	mov.w	r0, #0
 8006d56:	f380 8814 	msr	CONTROL, r0
 8006d5a:	b662      	cpsie	i
 8006d5c:	b661      	cpsie	f
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	df00      	svc	0
 8006d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d6a:	bf00      	nop
 8006d6c:	e000ed08 	.word	0xe000ed08

08006d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d76:	4b36      	ldr	r3, [pc, #216]	; (8006e50 <xPortStartScheduler+0xe0>)
 8006d78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	22ff      	movs	r2, #255	; 0xff
 8006d86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	4b2e      	ldr	r3, [pc, #184]	; (8006e54 <xPortStartScheduler+0xe4>)
 8006d9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d9e:	4b2e      	ldr	r3, [pc, #184]	; (8006e58 <xPortStartScheduler+0xe8>)
 8006da0:	2207      	movs	r2, #7
 8006da2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006da4:	e009      	b.n	8006dba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006da6:	4b2c      	ldr	r3, [pc, #176]	; (8006e58 <xPortStartScheduler+0xe8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	4a2a      	ldr	r2, [pc, #168]	; (8006e58 <xPortStartScheduler+0xe8>)
 8006dae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dba:	78fb      	ldrb	r3, [r7, #3]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc2:	2b80      	cmp	r3, #128	; 0x80
 8006dc4:	d0ef      	beq.n	8006da6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dc6:	4b24      	ldr	r3, [pc, #144]	; (8006e58 <xPortStartScheduler+0xe8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f1c3 0307 	rsb	r3, r3, #7
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d00b      	beq.n	8006dea <xPortStartScheduler+0x7a>
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	b672      	cpsid	i
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	b662      	cpsie	i
 8006de6:	60bb      	str	r3, [r7, #8]
 8006de8:	e7fe      	b.n	8006de8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006dea:	4b1b      	ldr	r3, [pc, #108]	; (8006e58 <xPortStartScheduler+0xe8>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	021b      	lsls	r3, r3, #8
 8006df0:	4a19      	ldr	r2, [pc, #100]	; (8006e58 <xPortStartScheduler+0xe8>)
 8006df2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006df4:	4b18      	ldr	r3, [pc, #96]	; (8006e58 <xPortStartScheduler+0xe8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dfc:	4a16      	ldr	r2, [pc, #88]	; (8006e58 <xPortStartScheduler+0xe8>)
 8006dfe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e08:	4b14      	ldr	r3, [pc, #80]	; (8006e5c <xPortStartScheduler+0xec>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a13      	ldr	r2, [pc, #76]	; (8006e5c <xPortStartScheduler+0xec>)
 8006e0e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e12:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e14:	4b11      	ldr	r3, [pc, #68]	; (8006e5c <xPortStartScheduler+0xec>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a10      	ldr	r2, [pc, #64]	; (8006e5c <xPortStartScheduler+0xec>)
 8006e1a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e1e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e20:	f000 f8d4 	bl	8006fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e24:	4b0e      	ldr	r3, [pc, #56]	; (8006e60 <xPortStartScheduler+0xf0>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e2a:	f000 f8f3 	bl	8007014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <xPortStartScheduler+0xf4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a0c      	ldr	r2, [pc, #48]	; (8006e64 <xPortStartScheduler+0xf4>)
 8006e34:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e38:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e3a:	f7ff ff85 	bl	8006d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e3e:	f7fe ffa9 	bl	8005d94 <vTaskSwitchContext>
	prvTaskExitError();
 8006e42:	f7ff ff39 	bl	8006cb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	e000e400 	.word	0xe000e400
 8006e54:	20000d7c 	.word	0x20000d7c
 8006e58:	20000d80 	.word	0x20000d80
 8006e5c:	e000ed20 	.word	0xe000ed20
 8006e60:	2000000c 	.word	0x2000000c
 8006e64:	e000ef34 	.word	0xe000ef34

08006e68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	b672      	cpsid	i
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	b662      	cpsie	i
 8006e82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e84:	4b0f      	ldr	r3, [pc, #60]	; (8006ec4 <vPortEnterCritical+0x5c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	4a0e      	ldr	r2, [pc, #56]	; (8006ec4 <vPortEnterCritical+0x5c>)
 8006e8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e8e:	4b0d      	ldr	r3, [pc, #52]	; (8006ec4 <vPortEnterCritical+0x5c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d110      	bne.n	8006eb8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e96:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <vPortEnterCritical+0x60>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <vPortEnterCritical+0x50>
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	b672      	cpsid	i
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	b662      	cpsie	i
 8006eb4:	603b      	str	r3, [r7, #0]
 8006eb6:	e7fe      	b.n	8006eb6 <vPortEnterCritical+0x4e>
	}
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	2000000c 	.word	0x2000000c
 8006ec8:	e000ed04 	.word	0xe000ed04

08006ecc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ed2:	4b12      	ldr	r3, [pc, #72]	; (8006f1c <vPortExitCritical+0x50>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10b      	bne.n	8006ef2 <vPortExitCritical+0x26>
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	b672      	cpsid	i
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	b662      	cpsie	i
 8006eee:	607b      	str	r3, [r7, #4]
 8006ef0:	e7fe      	b.n	8006ef0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8006ef2:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <vPortExitCritical+0x50>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	4a08      	ldr	r2, [pc, #32]	; (8006f1c <vPortExitCritical+0x50>)
 8006efa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006efc:	4b07      	ldr	r3, [pc, #28]	; (8006f1c <vPortExitCritical+0x50>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d104      	bne.n	8006f0e <vPortExitCritical+0x42>
 8006f04:	2300      	movs	r3, #0
 8006f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f0e:	bf00      	nop
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	2000000c 	.word	0x2000000c

08006f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f20:	f3ef 8009 	mrs	r0, PSP
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	4b15      	ldr	r3, [pc, #84]	; (8006f80 <pxCurrentTCBConst>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	f01e 0f10 	tst.w	lr, #16
 8006f30:	bf08      	it	eq
 8006f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3a:	6010      	str	r0, [r2, #0]
 8006f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f44:	b672      	cpsid	i
 8006f46:	f380 8811 	msr	BASEPRI, r0
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	b662      	cpsie	i
 8006f54:	f7fe ff1e 	bl	8005d94 <vTaskSwitchContext>
 8006f58:	f04f 0000 	mov.w	r0, #0
 8006f5c:	f380 8811 	msr	BASEPRI, r0
 8006f60:	bc09      	pop	{r0, r3}
 8006f62:	6819      	ldr	r1, [r3, #0]
 8006f64:	6808      	ldr	r0, [r1, #0]
 8006f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6a:	f01e 0f10 	tst.w	lr, #16
 8006f6e:	bf08      	it	eq
 8006f70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f74:	f380 8809 	msr	PSP, r0
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop

08006f80 <pxCurrentTCBConst>:
 8006f80:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop

08006f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	b672      	cpsid	i
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	b662      	cpsie	i
 8006fa2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fa4:	f7fe fe5e 	bl	8005c64 <xTaskIncrementTick>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fae:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <SysTick_Handler+0x40>)
 8006fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fc0:	bf00      	nop
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	e000ed04 	.word	0xe000ed04

08006fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fd0:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <vPortSetupTimerInterrupt+0x34>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006fd6:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <vPortSetupTimerInterrupt+0x38>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <vPortSetupTimerInterrupt+0x3c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a0a      	ldr	r2, [pc, #40]	; (800700c <vPortSetupTimerInterrupt+0x40>)
 8006fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe6:	099b      	lsrs	r3, r3, #6
 8006fe8:	4a09      	ldr	r2, [pc, #36]	; (8007010 <vPortSetupTimerInterrupt+0x44>)
 8006fea:	3b01      	subs	r3, #1
 8006fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006fee:	4b04      	ldr	r3, [pc, #16]	; (8007000 <vPortSetupTimerInterrupt+0x34>)
 8006ff0:	2207      	movs	r2, #7
 8006ff2:	601a      	str	r2, [r3, #0]
}
 8006ff4:	bf00      	nop
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	e000e010 	.word	0xe000e010
 8007004:	e000e018 	.word	0xe000e018
 8007008:	20000000 	.word	0x20000000
 800700c:	10624dd3 	.word	0x10624dd3
 8007010:	e000e014 	.word	0xe000e014

08007014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007024 <vPortEnableVFP+0x10>
 8007018:	6801      	ldr	r1, [r0, #0]
 800701a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800701e:	6001      	str	r1, [r0, #0]
 8007020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007022:	bf00      	nop
 8007024:	e000ed88 	.word	0xe000ed88

08007028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800702e:	f3ef 8305 	mrs	r3, IPSR
 8007032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2b0f      	cmp	r3, #15
 8007038:	d915      	bls.n	8007066 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800703a:	4a18      	ldr	r2, [pc, #96]	; (800709c <vPortValidateInterruptPriority+0x74>)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4413      	add	r3, r2
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007044:	4b16      	ldr	r3, [pc, #88]	; (80070a0 <vPortValidateInterruptPriority+0x78>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	7afa      	ldrb	r2, [r7, #11]
 800704a:	429a      	cmp	r2, r3
 800704c:	d20b      	bcs.n	8007066 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	b672      	cpsid	i
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	b662      	cpsie	i
 8007062:	607b      	str	r3, [r7, #4]
 8007064:	e7fe      	b.n	8007064 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007066:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <vPortValidateInterruptPriority+0x7c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800706e:	4b0e      	ldr	r3, [pc, #56]	; (80070a8 <vPortValidateInterruptPriority+0x80>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d90b      	bls.n	800708e <vPortValidateInterruptPriority+0x66>
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	b672      	cpsid	i
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	b662      	cpsie	i
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	e7fe      	b.n	800708c <vPortValidateInterruptPriority+0x64>
	}
 800708e:	bf00      	nop
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	e000e3f0 	.word	0xe000e3f0
 80070a0:	20000d7c 	.word	0x20000d7c
 80070a4:	e000ed0c 	.word	0xe000ed0c
 80070a8:	20000d80 	.word	0x20000d80

080070ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08a      	sub	sp, #40	; 0x28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070b4:	2300      	movs	r3, #0
 80070b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070b8:	f7fe fd26 	bl	8005b08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070bc:	4b5a      	ldr	r3, [pc, #360]	; (8007228 <pvPortMalloc+0x17c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070c4:	f000 f916 	bl	80072f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070c8:	4b58      	ldr	r3, [pc, #352]	; (800722c <pvPortMalloc+0x180>)
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4013      	ands	r3, r2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f040 8090 	bne.w	80071f6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d01e      	beq.n	800711a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80070dc:	2208      	movs	r2, #8
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4413      	add	r3, r2
 80070e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d015      	beq.n	800711a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f023 0307 	bic.w	r3, r3, #7
 80070f4:	3308      	adds	r3, #8
 80070f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00b      	beq.n	800711a <pvPortMalloc+0x6e>
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	b672      	cpsid	i
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	b662      	cpsie	i
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	e7fe      	b.n	8007118 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d06a      	beq.n	80071f6 <pvPortMalloc+0x14a>
 8007120:	4b43      	ldr	r3, [pc, #268]	; (8007230 <pvPortMalloc+0x184>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	429a      	cmp	r2, r3
 8007128:	d865      	bhi.n	80071f6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800712a:	4b42      	ldr	r3, [pc, #264]	; (8007234 <pvPortMalloc+0x188>)
 800712c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800712e:	4b41      	ldr	r3, [pc, #260]	; (8007234 <pvPortMalloc+0x188>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007134:	e004      	b.n	8007140 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	429a      	cmp	r2, r3
 8007148:	d903      	bls.n	8007152 <pvPortMalloc+0xa6>
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1f1      	bne.n	8007136 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007152:	4b35      	ldr	r3, [pc, #212]	; (8007228 <pvPortMalloc+0x17c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007158:	429a      	cmp	r2, r3
 800715a:	d04c      	beq.n	80071f6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2208      	movs	r2, #8
 8007162:	4413      	add	r3, r2
 8007164:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	1ad2      	subs	r2, r2, r3
 8007176:	2308      	movs	r3, #8
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	429a      	cmp	r2, r3
 800717c:	d920      	bls.n	80071c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800717e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4413      	add	r3, r2
 8007184:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	f003 0307 	and.w	r3, r3, #7
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00b      	beq.n	80071a8 <pvPortMalloc+0xfc>
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	b672      	cpsid	i
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	b662      	cpsie	i
 80071a4:	613b      	str	r3, [r7, #16]
 80071a6:	e7fe      	b.n	80071a6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	1ad2      	subs	r2, r2, r3
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071ba:	69b8      	ldr	r0, [r7, #24]
 80071bc:	f000 f8fc 	bl	80073b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071c0:	4b1b      	ldr	r3, [pc, #108]	; (8007230 <pvPortMalloc+0x184>)
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	4a19      	ldr	r2, [pc, #100]	; (8007230 <pvPortMalloc+0x184>)
 80071cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071ce:	4b18      	ldr	r3, [pc, #96]	; (8007230 <pvPortMalloc+0x184>)
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4b19      	ldr	r3, [pc, #100]	; (8007238 <pvPortMalloc+0x18c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d203      	bcs.n	80071e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071da:	4b15      	ldr	r3, [pc, #84]	; (8007230 <pvPortMalloc+0x184>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a16      	ldr	r2, [pc, #88]	; (8007238 <pvPortMalloc+0x18c>)
 80071e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	4b11      	ldr	r3, [pc, #68]	; (800722c <pvPortMalloc+0x180>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	431a      	orrs	r2, r3
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80071f6:	f7fe fc95 	bl	8005b24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00b      	beq.n	800721c <pvPortMalloc+0x170>
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	b672      	cpsid	i
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	b662      	cpsie	i
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	e7fe      	b.n	800721a <pvPortMalloc+0x16e>
	return pvReturn;
 800721c:	69fb      	ldr	r3, [r7, #28]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3728      	adds	r7, #40	; 0x28
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	2000498c 	.word	0x2000498c
 800722c:	20004998 	.word	0x20004998
 8007230:	20004990 	.word	0x20004990
 8007234:	20004984 	.word	0x20004984
 8007238:	20004994 	.word	0x20004994

0800723c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d04a      	beq.n	80072e4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800724e:	2308      	movs	r3, #8
 8007250:	425b      	negs	r3, r3
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	4413      	add	r3, r2
 8007256:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	4b22      	ldr	r3, [pc, #136]	; (80072ec <vPortFree+0xb0>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4013      	ands	r3, r2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10b      	bne.n	8007282 <vPortFree+0x46>
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	b672      	cpsid	i
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	b662      	cpsie	i
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	e7fe      	b.n	8007280 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <vPortFree+0x66>
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	b672      	cpsid	i
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	b662      	cpsie	i
 800729e:	60bb      	str	r3, [r7, #8]
 80072a0:	e7fe      	b.n	80072a0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	4b11      	ldr	r3, [pc, #68]	; (80072ec <vPortFree+0xb0>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4013      	ands	r3, r2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d019      	beq.n	80072e4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d115      	bne.n	80072e4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <vPortFree+0xb0>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	43db      	mvns	r3, r3
 80072c2:	401a      	ands	r2, r3
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072c8:	f7fe fc1e 	bl	8005b08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <vPortFree+0xb4>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4413      	add	r3, r2
 80072d6:	4a06      	ldr	r2, [pc, #24]	; (80072f0 <vPortFree+0xb4>)
 80072d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072da:	6938      	ldr	r0, [r7, #16]
 80072dc:	f000 f86c 	bl	80073b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80072e0:	f7fe fc20 	bl	8005b24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072e4:	bf00      	nop
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20004998 	.word	0x20004998
 80072f0:	20004990 	.word	0x20004990

080072f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80072fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007300:	4b27      	ldr	r3, [pc, #156]	; (80073a0 <prvHeapInit+0xac>)
 8007302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f003 0307 	and.w	r3, r3, #7
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00c      	beq.n	8007328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3307      	adds	r3, #7
 8007312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f023 0307 	bic.w	r3, r3, #7
 800731a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	4a1f      	ldr	r2, [pc, #124]	; (80073a0 <prvHeapInit+0xac>)
 8007324:	4413      	add	r3, r2
 8007326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800732c:	4a1d      	ldr	r2, [pc, #116]	; (80073a4 <prvHeapInit+0xb0>)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007332:	4b1c      	ldr	r3, [pc, #112]	; (80073a4 <prvHeapInit+0xb0>)
 8007334:	2200      	movs	r2, #0
 8007336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	4413      	add	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007340:	2208      	movs	r2, #8
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	1a9b      	subs	r3, r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f023 0307 	bic.w	r3, r3, #7
 800734e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4a15      	ldr	r2, [pc, #84]	; (80073a8 <prvHeapInit+0xb4>)
 8007354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007356:	4b14      	ldr	r3, [pc, #80]	; (80073a8 <prvHeapInit+0xb4>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2200      	movs	r2, #0
 800735c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800735e:	4b12      	ldr	r3, [pc, #72]	; (80073a8 <prvHeapInit+0xb4>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	1ad2      	subs	r2, r2, r3
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007374:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <prvHeapInit+0xb4>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	4a0a      	ldr	r2, [pc, #40]	; (80073ac <prvHeapInit+0xb8>)
 8007382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	4a09      	ldr	r2, [pc, #36]	; (80073b0 <prvHeapInit+0xbc>)
 800738a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800738c:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <prvHeapInit+0xc0>)
 800738e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007392:	601a      	str	r2, [r3, #0]
}
 8007394:	bf00      	nop
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	20000d84 	.word	0x20000d84
 80073a4:	20004984 	.word	0x20004984
 80073a8:	2000498c 	.word	0x2000498c
 80073ac:	20004994 	.word	0x20004994
 80073b0:	20004990 	.word	0x20004990
 80073b4:	20004998 	.word	0x20004998

080073b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073c0:	4b28      	ldr	r3, [pc, #160]	; (8007464 <prvInsertBlockIntoFreeList+0xac>)
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	e002      	b.n	80073cc <prvInsertBlockIntoFreeList+0x14>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d8f7      	bhi.n	80073c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	4413      	add	r3, r2
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d108      	bne.n	80073fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	441a      	add	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	441a      	add	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d118      	bne.n	8007440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	4b15      	ldr	r3, [pc, #84]	; (8007468 <prvInsertBlockIntoFreeList+0xb0>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	429a      	cmp	r2, r3
 8007418:	d00d      	beq.n	8007436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	441a      	add	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	e008      	b.n	8007448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007436:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <prvInsertBlockIntoFreeList+0xb0>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	e003      	b.n	8007448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	429a      	cmp	r2, r3
 800744e:	d002      	beq.n	8007456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007456:	bf00      	nop
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	20004984 	.word	0x20004984
 8007468:	2000498c 	.word	0x2000498c

0800746c <__errno>:
 800746c:	4b01      	ldr	r3, [pc, #4]	; (8007474 <__errno+0x8>)
 800746e:	6818      	ldr	r0, [r3, #0]
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	20000010 	.word	0x20000010

08007478 <__libc_init_array>:
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	4e0d      	ldr	r6, [pc, #52]	; (80074b0 <__libc_init_array+0x38>)
 800747c:	4c0d      	ldr	r4, [pc, #52]	; (80074b4 <__libc_init_array+0x3c>)
 800747e:	1ba4      	subs	r4, r4, r6
 8007480:	10a4      	asrs	r4, r4, #2
 8007482:	2500      	movs	r5, #0
 8007484:	42a5      	cmp	r5, r4
 8007486:	d109      	bne.n	800749c <__libc_init_array+0x24>
 8007488:	4e0b      	ldr	r6, [pc, #44]	; (80074b8 <__libc_init_array+0x40>)
 800748a:	4c0c      	ldr	r4, [pc, #48]	; (80074bc <__libc_init_array+0x44>)
 800748c:	f000 fc28 	bl	8007ce0 <_init>
 8007490:	1ba4      	subs	r4, r4, r6
 8007492:	10a4      	asrs	r4, r4, #2
 8007494:	2500      	movs	r5, #0
 8007496:	42a5      	cmp	r5, r4
 8007498:	d105      	bne.n	80074a6 <__libc_init_array+0x2e>
 800749a:	bd70      	pop	{r4, r5, r6, pc}
 800749c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074a0:	4798      	blx	r3
 80074a2:	3501      	adds	r5, #1
 80074a4:	e7ee      	b.n	8007484 <__libc_init_array+0xc>
 80074a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074aa:	4798      	blx	r3
 80074ac:	3501      	adds	r5, #1
 80074ae:	e7f2      	b.n	8007496 <__libc_init_array+0x1e>
 80074b0:	0800802c 	.word	0x0800802c
 80074b4:	0800802c 	.word	0x0800802c
 80074b8:	0800802c 	.word	0x0800802c
 80074bc:	08008030 	.word	0x08008030

080074c0 <memcpy>:
 80074c0:	b510      	push	{r4, lr}
 80074c2:	1e43      	subs	r3, r0, #1
 80074c4:	440a      	add	r2, r1
 80074c6:	4291      	cmp	r1, r2
 80074c8:	d100      	bne.n	80074cc <memcpy+0xc>
 80074ca:	bd10      	pop	{r4, pc}
 80074cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074d4:	e7f7      	b.n	80074c6 <memcpy+0x6>

080074d6 <memset>:
 80074d6:	4402      	add	r2, r0
 80074d8:	4603      	mov	r3, r0
 80074da:	4293      	cmp	r3, r2
 80074dc:	d100      	bne.n	80074e0 <memset+0xa>
 80074de:	4770      	bx	lr
 80074e0:	f803 1b01 	strb.w	r1, [r3], #1
 80074e4:	e7f9      	b.n	80074da <memset+0x4>
	...

080074e8 <siprintf>:
 80074e8:	b40e      	push	{r1, r2, r3}
 80074ea:	b500      	push	{lr}
 80074ec:	b09c      	sub	sp, #112	; 0x70
 80074ee:	ab1d      	add	r3, sp, #116	; 0x74
 80074f0:	9002      	str	r0, [sp, #8]
 80074f2:	9006      	str	r0, [sp, #24]
 80074f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074f8:	4809      	ldr	r0, [pc, #36]	; (8007520 <siprintf+0x38>)
 80074fa:	9107      	str	r1, [sp, #28]
 80074fc:	9104      	str	r1, [sp, #16]
 80074fe:	4909      	ldr	r1, [pc, #36]	; (8007524 <siprintf+0x3c>)
 8007500:	f853 2b04 	ldr.w	r2, [r3], #4
 8007504:	9105      	str	r1, [sp, #20]
 8007506:	6800      	ldr	r0, [r0, #0]
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	a902      	add	r1, sp, #8
 800750c:	f000 f866 	bl	80075dc <_svfiprintf_r>
 8007510:	9b02      	ldr	r3, [sp, #8]
 8007512:	2200      	movs	r2, #0
 8007514:	701a      	strb	r2, [r3, #0]
 8007516:	b01c      	add	sp, #112	; 0x70
 8007518:	f85d eb04 	ldr.w	lr, [sp], #4
 800751c:	b003      	add	sp, #12
 800751e:	4770      	bx	lr
 8007520:	20000010 	.word	0x20000010
 8007524:	ffff0208 	.word	0xffff0208

08007528 <__ssputs_r>:
 8007528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800752c:	688e      	ldr	r6, [r1, #8]
 800752e:	429e      	cmp	r6, r3
 8007530:	4682      	mov	sl, r0
 8007532:	460c      	mov	r4, r1
 8007534:	4690      	mov	r8, r2
 8007536:	4699      	mov	r9, r3
 8007538:	d837      	bhi.n	80075aa <__ssputs_r+0x82>
 800753a:	898a      	ldrh	r2, [r1, #12]
 800753c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007540:	d031      	beq.n	80075a6 <__ssputs_r+0x7e>
 8007542:	6825      	ldr	r5, [r4, #0]
 8007544:	6909      	ldr	r1, [r1, #16]
 8007546:	1a6f      	subs	r7, r5, r1
 8007548:	6965      	ldr	r5, [r4, #20]
 800754a:	2302      	movs	r3, #2
 800754c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007550:	fb95 f5f3 	sdiv	r5, r5, r3
 8007554:	f109 0301 	add.w	r3, r9, #1
 8007558:	443b      	add	r3, r7
 800755a:	429d      	cmp	r5, r3
 800755c:	bf38      	it	cc
 800755e:	461d      	movcc	r5, r3
 8007560:	0553      	lsls	r3, r2, #21
 8007562:	d530      	bpl.n	80075c6 <__ssputs_r+0x9e>
 8007564:	4629      	mov	r1, r5
 8007566:	f000 fb21 	bl	8007bac <_malloc_r>
 800756a:	4606      	mov	r6, r0
 800756c:	b950      	cbnz	r0, 8007584 <__ssputs_r+0x5c>
 800756e:	230c      	movs	r3, #12
 8007570:	f8ca 3000 	str.w	r3, [sl]
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800757a:	81a3      	strh	r3, [r4, #12]
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007584:	463a      	mov	r2, r7
 8007586:	6921      	ldr	r1, [r4, #16]
 8007588:	f7ff ff9a 	bl	80074c0 <memcpy>
 800758c:	89a3      	ldrh	r3, [r4, #12]
 800758e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007596:	81a3      	strh	r3, [r4, #12]
 8007598:	6126      	str	r6, [r4, #16]
 800759a:	6165      	str	r5, [r4, #20]
 800759c:	443e      	add	r6, r7
 800759e:	1bed      	subs	r5, r5, r7
 80075a0:	6026      	str	r6, [r4, #0]
 80075a2:	60a5      	str	r5, [r4, #8]
 80075a4:	464e      	mov	r6, r9
 80075a6:	454e      	cmp	r6, r9
 80075a8:	d900      	bls.n	80075ac <__ssputs_r+0x84>
 80075aa:	464e      	mov	r6, r9
 80075ac:	4632      	mov	r2, r6
 80075ae:	4641      	mov	r1, r8
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	f000 fa93 	bl	8007adc <memmove>
 80075b6:	68a3      	ldr	r3, [r4, #8]
 80075b8:	1b9b      	subs	r3, r3, r6
 80075ba:	60a3      	str	r3, [r4, #8]
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	441e      	add	r6, r3
 80075c0:	6026      	str	r6, [r4, #0]
 80075c2:	2000      	movs	r0, #0
 80075c4:	e7dc      	b.n	8007580 <__ssputs_r+0x58>
 80075c6:	462a      	mov	r2, r5
 80075c8:	f000 fb4a 	bl	8007c60 <_realloc_r>
 80075cc:	4606      	mov	r6, r0
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d1e2      	bne.n	8007598 <__ssputs_r+0x70>
 80075d2:	6921      	ldr	r1, [r4, #16]
 80075d4:	4650      	mov	r0, sl
 80075d6:	f000 fa9b 	bl	8007b10 <_free_r>
 80075da:	e7c8      	b.n	800756e <__ssputs_r+0x46>

080075dc <_svfiprintf_r>:
 80075dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e0:	461d      	mov	r5, r3
 80075e2:	898b      	ldrh	r3, [r1, #12]
 80075e4:	061f      	lsls	r7, r3, #24
 80075e6:	b09d      	sub	sp, #116	; 0x74
 80075e8:	4680      	mov	r8, r0
 80075ea:	460c      	mov	r4, r1
 80075ec:	4616      	mov	r6, r2
 80075ee:	d50f      	bpl.n	8007610 <_svfiprintf_r+0x34>
 80075f0:	690b      	ldr	r3, [r1, #16]
 80075f2:	b96b      	cbnz	r3, 8007610 <_svfiprintf_r+0x34>
 80075f4:	2140      	movs	r1, #64	; 0x40
 80075f6:	f000 fad9 	bl	8007bac <_malloc_r>
 80075fa:	6020      	str	r0, [r4, #0]
 80075fc:	6120      	str	r0, [r4, #16]
 80075fe:	b928      	cbnz	r0, 800760c <_svfiprintf_r+0x30>
 8007600:	230c      	movs	r3, #12
 8007602:	f8c8 3000 	str.w	r3, [r8]
 8007606:	f04f 30ff 	mov.w	r0, #4294967295
 800760a:	e0c8      	b.n	800779e <_svfiprintf_r+0x1c2>
 800760c:	2340      	movs	r3, #64	; 0x40
 800760e:	6163      	str	r3, [r4, #20]
 8007610:	2300      	movs	r3, #0
 8007612:	9309      	str	r3, [sp, #36]	; 0x24
 8007614:	2320      	movs	r3, #32
 8007616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800761a:	2330      	movs	r3, #48	; 0x30
 800761c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007620:	9503      	str	r5, [sp, #12]
 8007622:	f04f 0b01 	mov.w	fp, #1
 8007626:	4637      	mov	r7, r6
 8007628:	463d      	mov	r5, r7
 800762a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800762e:	b10b      	cbz	r3, 8007634 <_svfiprintf_r+0x58>
 8007630:	2b25      	cmp	r3, #37	; 0x25
 8007632:	d13e      	bne.n	80076b2 <_svfiprintf_r+0xd6>
 8007634:	ebb7 0a06 	subs.w	sl, r7, r6
 8007638:	d00b      	beq.n	8007652 <_svfiprintf_r+0x76>
 800763a:	4653      	mov	r3, sl
 800763c:	4632      	mov	r2, r6
 800763e:	4621      	mov	r1, r4
 8007640:	4640      	mov	r0, r8
 8007642:	f7ff ff71 	bl	8007528 <__ssputs_r>
 8007646:	3001      	adds	r0, #1
 8007648:	f000 80a4 	beq.w	8007794 <_svfiprintf_r+0x1b8>
 800764c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800764e:	4453      	add	r3, sl
 8007650:	9309      	str	r3, [sp, #36]	; 0x24
 8007652:	783b      	ldrb	r3, [r7, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 809d 	beq.w	8007794 <_svfiprintf_r+0x1b8>
 800765a:	2300      	movs	r3, #0
 800765c:	f04f 32ff 	mov.w	r2, #4294967295
 8007660:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007664:	9304      	str	r3, [sp, #16]
 8007666:	9307      	str	r3, [sp, #28]
 8007668:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800766c:	931a      	str	r3, [sp, #104]	; 0x68
 800766e:	462f      	mov	r7, r5
 8007670:	2205      	movs	r2, #5
 8007672:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007676:	4850      	ldr	r0, [pc, #320]	; (80077b8 <_svfiprintf_r+0x1dc>)
 8007678:	f7f8 fdd2 	bl	8000220 <memchr>
 800767c:	9b04      	ldr	r3, [sp, #16]
 800767e:	b9d0      	cbnz	r0, 80076b6 <_svfiprintf_r+0xda>
 8007680:	06d9      	lsls	r1, r3, #27
 8007682:	bf44      	itt	mi
 8007684:	2220      	movmi	r2, #32
 8007686:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800768a:	071a      	lsls	r2, r3, #28
 800768c:	bf44      	itt	mi
 800768e:	222b      	movmi	r2, #43	; 0x2b
 8007690:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007694:	782a      	ldrb	r2, [r5, #0]
 8007696:	2a2a      	cmp	r2, #42	; 0x2a
 8007698:	d015      	beq.n	80076c6 <_svfiprintf_r+0xea>
 800769a:	9a07      	ldr	r2, [sp, #28]
 800769c:	462f      	mov	r7, r5
 800769e:	2000      	movs	r0, #0
 80076a0:	250a      	movs	r5, #10
 80076a2:	4639      	mov	r1, r7
 80076a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076a8:	3b30      	subs	r3, #48	; 0x30
 80076aa:	2b09      	cmp	r3, #9
 80076ac:	d94d      	bls.n	800774a <_svfiprintf_r+0x16e>
 80076ae:	b1b8      	cbz	r0, 80076e0 <_svfiprintf_r+0x104>
 80076b0:	e00f      	b.n	80076d2 <_svfiprintf_r+0xf6>
 80076b2:	462f      	mov	r7, r5
 80076b4:	e7b8      	b.n	8007628 <_svfiprintf_r+0x4c>
 80076b6:	4a40      	ldr	r2, [pc, #256]	; (80077b8 <_svfiprintf_r+0x1dc>)
 80076b8:	1a80      	subs	r0, r0, r2
 80076ba:	fa0b f000 	lsl.w	r0, fp, r0
 80076be:	4318      	orrs	r0, r3
 80076c0:	9004      	str	r0, [sp, #16]
 80076c2:	463d      	mov	r5, r7
 80076c4:	e7d3      	b.n	800766e <_svfiprintf_r+0x92>
 80076c6:	9a03      	ldr	r2, [sp, #12]
 80076c8:	1d11      	adds	r1, r2, #4
 80076ca:	6812      	ldr	r2, [r2, #0]
 80076cc:	9103      	str	r1, [sp, #12]
 80076ce:	2a00      	cmp	r2, #0
 80076d0:	db01      	blt.n	80076d6 <_svfiprintf_r+0xfa>
 80076d2:	9207      	str	r2, [sp, #28]
 80076d4:	e004      	b.n	80076e0 <_svfiprintf_r+0x104>
 80076d6:	4252      	negs	r2, r2
 80076d8:	f043 0302 	orr.w	r3, r3, #2
 80076dc:	9207      	str	r2, [sp, #28]
 80076de:	9304      	str	r3, [sp, #16]
 80076e0:	783b      	ldrb	r3, [r7, #0]
 80076e2:	2b2e      	cmp	r3, #46	; 0x2e
 80076e4:	d10c      	bne.n	8007700 <_svfiprintf_r+0x124>
 80076e6:	787b      	ldrb	r3, [r7, #1]
 80076e8:	2b2a      	cmp	r3, #42	; 0x2a
 80076ea:	d133      	bne.n	8007754 <_svfiprintf_r+0x178>
 80076ec:	9b03      	ldr	r3, [sp, #12]
 80076ee:	1d1a      	adds	r2, r3, #4
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	9203      	str	r2, [sp, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	bfb8      	it	lt
 80076f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80076fc:	3702      	adds	r7, #2
 80076fe:	9305      	str	r3, [sp, #20]
 8007700:	4d2e      	ldr	r5, [pc, #184]	; (80077bc <_svfiprintf_r+0x1e0>)
 8007702:	7839      	ldrb	r1, [r7, #0]
 8007704:	2203      	movs	r2, #3
 8007706:	4628      	mov	r0, r5
 8007708:	f7f8 fd8a 	bl	8000220 <memchr>
 800770c:	b138      	cbz	r0, 800771e <_svfiprintf_r+0x142>
 800770e:	2340      	movs	r3, #64	; 0x40
 8007710:	1b40      	subs	r0, r0, r5
 8007712:	fa03 f000 	lsl.w	r0, r3, r0
 8007716:	9b04      	ldr	r3, [sp, #16]
 8007718:	4303      	orrs	r3, r0
 800771a:	3701      	adds	r7, #1
 800771c:	9304      	str	r3, [sp, #16]
 800771e:	7839      	ldrb	r1, [r7, #0]
 8007720:	4827      	ldr	r0, [pc, #156]	; (80077c0 <_svfiprintf_r+0x1e4>)
 8007722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007726:	2206      	movs	r2, #6
 8007728:	1c7e      	adds	r6, r7, #1
 800772a:	f7f8 fd79 	bl	8000220 <memchr>
 800772e:	2800      	cmp	r0, #0
 8007730:	d038      	beq.n	80077a4 <_svfiprintf_r+0x1c8>
 8007732:	4b24      	ldr	r3, [pc, #144]	; (80077c4 <_svfiprintf_r+0x1e8>)
 8007734:	bb13      	cbnz	r3, 800777c <_svfiprintf_r+0x1a0>
 8007736:	9b03      	ldr	r3, [sp, #12]
 8007738:	3307      	adds	r3, #7
 800773a:	f023 0307 	bic.w	r3, r3, #7
 800773e:	3308      	adds	r3, #8
 8007740:	9303      	str	r3, [sp, #12]
 8007742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007744:	444b      	add	r3, r9
 8007746:	9309      	str	r3, [sp, #36]	; 0x24
 8007748:	e76d      	b.n	8007626 <_svfiprintf_r+0x4a>
 800774a:	fb05 3202 	mla	r2, r5, r2, r3
 800774e:	2001      	movs	r0, #1
 8007750:	460f      	mov	r7, r1
 8007752:	e7a6      	b.n	80076a2 <_svfiprintf_r+0xc6>
 8007754:	2300      	movs	r3, #0
 8007756:	3701      	adds	r7, #1
 8007758:	9305      	str	r3, [sp, #20]
 800775a:	4619      	mov	r1, r3
 800775c:	250a      	movs	r5, #10
 800775e:	4638      	mov	r0, r7
 8007760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007764:	3a30      	subs	r2, #48	; 0x30
 8007766:	2a09      	cmp	r2, #9
 8007768:	d903      	bls.n	8007772 <_svfiprintf_r+0x196>
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0c8      	beq.n	8007700 <_svfiprintf_r+0x124>
 800776e:	9105      	str	r1, [sp, #20]
 8007770:	e7c6      	b.n	8007700 <_svfiprintf_r+0x124>
 8007772:	fb05 2101 	mla	r1, r5, r1, r2
 8007776:	2301      	movs	r3, #1
 8007778:	4607      	mov	r7, r0
 800777a:	e7f0      	b.n	800775e <_svfiprintf_r+0x182>
 800777c:	ab03      	add	r3, sp, #12
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	4622      	mov	r2, r4
 8007782:	4b11      	ldr	r3, [pc, #68]	; (80077c8 <_svfiprintf_r+0x1ec>)
 8007784:	a904      	add	r1, sp, #16
 8007786:	4640      	mov	r0, r8
 8007788:	f3af 8000 	nop.w
 800778c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007790:	4681      	mov	r9, r0
 8007792:	d1d6      	bne.n	8007742 <_svfiprintf_r+0x166>
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	065b      	lsls	r3, r3, #25
 8007798:	f53f af35 	bmi.w	8007606 <_svfiprintf_r+0x2a>
 800779c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800779e:	b01d      	add	sp, #116	; 0x74
 80077a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a4:	ab03      	add	r3, sp, #12
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	4622      	mov	r2, r4
 80077aa:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <_svfiprintf_r+0x1ec>)
 80077ac:	a904      	add	r1, sp, #16
 80077ae:	4640      	mov	r0, r8
 80077b0:	f000 f882 	bl	80078b8 <_printf_i>
 80077b4:	e7ea      	b.n	800778c <_svfiprintf_r+0x1b0>
 80077b6:	bf00      	nop
 80077b8:	08007ff0 	.word	0x08007ff0
 80077bc:	08007ff6 	.word	0x08007ff6
 80077c0:	08007ffa 	.word	0x08007ffa
 80077c4:	00000000 	.word	0x00000000
 80077c8:	08007529 	.word	0x08007529

080077cc <_printf_common>:
 80077cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d0:	4691      	mov	r9, r2
 80077d2:	461f      	mov	r7, r3
 80077d4:	688a      	ldr	r2, [r1, #8]
 80077d6:	690b      	ldr	r3, [r1, #16]
 80077d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077dc:	4293      	cmp	r3, r2
 80077de:	bfb8      	it	lt
 80077e0:	4613      	movlt	r3, r2
 80077e2:	f8c9 3000 	str.w	r3, [r9]
 80077e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077ea:	4606      	mov	r6, r0
 80077ec:	460c      	mov	r4, r1
 80077ee:	b112      	cbz	r2, 80077f6 <_printf_common+0x2a>
 80077f0:	3301      	adds	r3, #1
 80077f2:	f8c9 3000 	str.w	r3, [r9]
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	0699      	lsls	r1, r3, #26
 80077fa:	bf42      	ittt	mi
 80077fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007800:	3302      	addmi	r3, #2
 8007802:	f8c9 3000 	strmi.w	r3, [r9]
 8007806:	6825      	ldr	r5, [r4, #0]
 8007808:	f015 0506 	ands.w	r5, r5, #6
 800780c:	d107      	bne.n	800781e <_printf_common+0x52>
 800780e:	f104 0a19 	add.w	sl, r4, #25
 8007812:	68e3      	ldr	r3, [r4, #12]
 8007814:	f8d9 2000 	ldr.w	r2, [r9]
 8007818:	1a9b      	subs	r3, r3, r2
 800781a:	42ab      	cmp	r3, r5
 800781c:	dc28      	bgt.n	8007870 <_printf_common+0xa4>
 800781e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007822:	6822      	ldr	r2, [r4, #0]
 8007824:	3300      	adds	r3, #0
 8007826:	bf18      	it	ne
 8007828:	2301      	movne	r3, #1
 800782a:	0692      	lsls	r2, r2, #26
 800782c:	d42d      	bmi.n	800788a <_printf_common+0xbe>
 800782e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007832:	4639      	mov	r1, r7
 8007834:	4630      	mov	r0, r6
 8007836:	47c0      	blx	r8
 8007838:	3001      	adds	r0, #1
 800783a:	d020      	beq.n	800787e <_printf_common+0xb2>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	68e5      	ldr	r5, [r4, #12]
 8007840:	f8d9 2000 	ldr.w	r2, [r9]
 8007844:	f003 0306 	and.w	r3, r3, #6
 8007848:	2b04      	cmp	r3, #4
 800784a:	bf08      	it	eq
 800784c:	1aad      	subeq	r5, r5, r2
 800784e:	68a3      	ldr	r3, [r4, #8]
 8007850:	6922      	ldr	r2, [r4, #16]
 8007852:	bf0c      	ite	eq
 8007854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007858:	2500      	movne	r5, #0
 800785a:	4293      	cmp	r3, r2
 800785c:	bfc4      	itt	gt
 800785e:	1a9b      	subgt	r3, r3, r2
 8007860:	18ed      	addgt	r5, r5, r3
 8007862:	f04f 0900 	mov.w	r9, #0
 8007866:	341a      	adds	r4, #26
 8007868:	454d      	cmp	r5, r9
 800786a:	d11a      	bne.n	80078a2 <_printf_common+0xd6>
 800786c:	2000      	movs	r0, #0
 800786e:	e008      	b.n	8007882 <_printf_common+0xb6>
 8007870:	2301      	movs	r3, #1
 8007872:	4652      	mov	r2, sl
 8007874:	4639      	mov	r1, r7
 8007876:	4630      	mov	r0, r6
 8007878:	47c0      	blx	r8
 800787a:	3001      	adds	r0, #1
 800787c:	d103      	bne.n	8007886 <_printf_common+0xba>
 800787e:	f04f 30ff 	mov.w	r0, #4294967295
 8007882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007886:	3501      	adds	r5, #1
 8007888:	e7c3      	b.n	8007812 <_printf_common+0x46>
 800788a:	18e1      	adds	r1, r4, r3
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	2030      	movs	r0, #48	; 0x30
 8007890:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007894:	4422      	add	r2, r4
 8007896:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800789a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800789e:	3302      	adds	r3, #2
 80078a0:	e7c5      	b.n	800782e <_printf_common+0x62>
 80078a2:	2301      	movs	r3, #1
 80078a4:	4622      	mov	r2, r4
 80078a6:	4639      	mov	r1, r7
 80078a8:	4630      	mov	r0, r6
 80078aa:	47c0      	blx	r8
 80078ac:	3001      	adds	r0, #1
 80078ae:	d0e6      	beq.n	800787e <_printf_common+0xb2>
 80078b0:	f109 0901 	add.w	r9, r9, #1
 80078b4:	e7d8      	b.n	8007868 <_printf_common+0x9c>
	...

080078b8 <_printf_i>:
 80078b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80078c0:	460c      	mov	r4, r1
 80078c2:	7e09      	ldrb	r1, [r1, #24]
 80078c4:	b085      	sub	sp, #20
 80078c6:	296e      	cmp	r1, #110	; 0x6e
 80078c8:	4617      	mov	r7, r2
 80078ca:	4606      	mov	r6, r0
 80078cc:	4698      	mov	r8, r3
 80078ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078d0:	f000 80b3 	beq.w	8007a3a <_printf_i+0x182>
 80078d4:	d822      	bhi.n	800791c <_printf_i+0x64>
 80078d6:	2963      	cmp	r1, #99	; 0x63
 80078d8:	d036      	beq.n	8007948 <_printf_i+0x90>
 80078da:	d80a      	bhi.n	80078f2 <_printf_i+0x3a>
 80078dc:	2900      	cmp	r1, #0
 80078de:	f000 80b9 	beq.w	8007a54 <_printf_i+0x19c>
 80078e2:	2958      	cmp	r1, #88	; 0x58
 80078e4:	f000 8083 	beq.w	80079ee <_printf_i+0x136>
 80078e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80078f0:	e032      	b.n	8007958 <_printf_i+0xa0>
 80078f2:	2964      	cmp	r1, #100	; 0x64
 80078f4:	d001      	beq.n	80078fa <_printf_i+0x42>
 80078f6:	2969      	cmp	r1, #105	; 0x69
 80078f8:	d1f6      	bne.n	80078e8 <_printf_i+0x30>
 80078fa:	6820      	ldr	r0, [r4, #0]
 80078fc:	6813      	ldr	r3, [r2, #0]
 80078fe:	0605      	lsls	r5, r0, #24
 8007900:	f103 0104 	add.w	r1, r3, #4
 8007904:	d52a      	bpl.n	800795c <_printf_i+0xa4>
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6011      	str	r1, [r2, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	da03      	bge.n	8007916 <_printf_i+0x5e>
 800790e:	222d      	movs	r2, #45	; 0x2d
 8007910:	425b      	negs	r3, r3
 8007912:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007916:	486f      	ldr	r0, [pc, #444]	; (8007ad4 <_printf_i+0x21c>)
 8007918:	220a      	movs	r2, #10
 800791a:	e039      	b.n	8007990 <_printf_i+0xd8>
 800791c:	2973      	cmp	r1, #115	; 0x73
 800791e:	f000 809d 	beq.w	8007a5c <_printf_i+0x1a4>
 8007922:	d808      	bhi.n	8007936 <_printf_i+0x7e>
 8007924:	296f      	cmp	r1, #111	; 0x6f
 8007926:	d020      	beq.n	800796a <_printf_i+0xb2>
 8007928:	2970      	cmp	r1, #112	; 0x70
 800792a:	d1dd      	bne.n	80078e8 <_printf_i+0x30>
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	f043 0320 	orr.w	r3, r3, #32
 8007932:	6023      	str	r3, [r4, #0]
 8007934:	e003      	b.n	800793e <_printf_i+0x86>
 8007936:	2975      	cmp	r1, #117	; 0x75
 8007938:	d017      	beq.n	800796a <_printf_i+0xb2>
 800793a:	2978      	cmp	r1, #120	; 0x78
 800793c:	d1d4      	bne.n	80078e8 <_printf_i+0x30>
 800793e:	2378      	movs	r3, #120	; 0x78
 8007940:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007944:	4864      	ldr	r0, [pc, #400]	; (8007ad8 <_printf_i+0x220>)
 8007946:	e055      	b.n	80079f4 <_printf_i+0x13c>
 8007948:	6813      	ldr	r3, [r2, #0]
 800794a:	1d19      	adds	r1, r3, #4
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6011      	str	r1, [r2, #0]
 8007950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007958:	2301      	movs	r3, #1
 800795a:	e08c      	b.n	8007a76 <_printf_i+0x1be>
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6011      	str	r1, [r2, #0]
 8007960:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007964:	bf18      	it	ne
 8007966:	b21b      	sxthne	r3, r3
 8007968:	e7cf      	b.n	800790a <_printf_i+0x52>
 800796a:	6813      	ldr	r3, [r2, #0]
 800796c:	6825      	ldr	r5, [r4, #0]
 800796e:	1d18      	adds	r0, r3, #4
 8007970:	6010      	str	r0, [r2, #0]
 8007972:	0628      	lsls	r0, r5, #24
 8007974:	d501      	bpl.n	800797a <_printf_i+0xc2>
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	e002      	b.n	8007980 <_printf_i+0xc8>
 800797a:	0668      	lsls	r0, r5, #25
 800797c:	d5fb      	bpl.n	8007976 <_printf_i+0xbe>
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	4854      	ldr	r0, [pc, #336]	; (8007ad4 <_printf_i+0x21c>)
 8007982:	296f      	cmp	r1, #111	; 0x6f
 8007984:	bf14      	ite	ne
 8007986:	220a      	movne	r2, #10
 8007988:	2208      	moveq	r2, #8
 800798a:	2100      	movs	r1, #0
 800798c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007990:	6865      	ldr	r5, [r4, #4]
 8007992:	60a5      	str	r5, [r4, #8]
 8007994:	2d00      	cmp	r5, #0
 8007996:	f2c0 8095 	blt.w	8007ac4 <_printf_i+0x20c>
 800799a:	6821      	ldr	r1, [r4, #0]
 800799c:	f021 0104 	bic.w	r1, r1, #4
 80079a0:	6021      	str	r1, [r4, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d13d      	bne.n	8007a22 <_printf_i+0x16a>
 80079a6:	2d00      	cmp	r5, #0
 80079a8:	f040 808e 	bne.w	8007ac8 <_printf_i+0x210>
 80079ac:	4665      	mov	r5, ip
 80079ae:	2a08      	cmp	r2, #8
 80079b0:	d10b      	bne.n	80079ca <_printf_i+0x112>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	07db      	lsls	r3, r3, #31
 80079b6:	d508      	bpl.n	80079ca <_printf_i+0x112>
 80079b8:	6923      	ldr	r3, [r4, #16]
 80079ba:	6862      	ldr	r2, [r4, #4]
 80079bc:	429a      	cmp	r2, r3
 80079be:	bfde      	ittt	le
 80079c0:	2330      	movle	r3, #48	; 0x30
 80079c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079ca:	ebac 0305 	sub.w	r3, ip, r5
 80079ce:	6123      	str	r3, [r4, #16]
 80079d0:	f8cd 8000 	str.w	r8, [sp]
 80079d4:	463b      	mov	r3, r7
 80079d6:	aa03      	add	r2, sp, #12
 80079d8:	4621      	mov	r1, r4
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff fef6 	bl	80077cc <_printf_common>
 80079e0:	3001      	adds	r0, #1
 80079e2:	d14d      	bne.n	8007a80 <_printf_i+0x1c8>
 80079e4:	f04f 30ff 	mov.w	r0, #4294967295
 80079e8:	b005      	add	sp, #20
 80079ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079ee:	4839      	ldr	r0, [pc, #228]	; (8007ad4 <_printf_i+0x21c>)
 80079f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80079f4:	6813      	ldr	r3, [r2, #0]
 80079f6:	6821      	ldr	r1, [r4, #0]
 80079f8:	1d1d      	adds	r5, r3, #4
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6015      	str	r5, [r2, #0]
 80079fe:	060a      	lsls	r2, r1, #24
 8007a00:	d50b      	bpl.n	8007a1a <_printf_i+0x162>
 8007a02:	07ca      	lsls	r2, r1, #31
 8007a04:	bf44      	itt	mi
 8007a06:	f041 0120 	orrmi.w	r1, r1, #32
 8007a0a:	6021      	strmi	r1, [r4, #0]
 8007a0c:	b91b      	cbnz	r3, 8007a16 <_printf_i+0x15e>
 8007a0e:	6822      	ldr	r2, [r4, #0]
 8007a10:	f022 0220 	bic.w	r2, r2, #32
 8007a14:	6022      	str	r2, [r4, #0]
 8007a16:	2210      	movs	r2, #16
 8007a18:	e7b7      	b.n	800798a <_printf_i+0xd2>
 8007a1a:	064d      	lsls	r5, r1, #25
 8007a1c:	bf48      	it	mi
 8007a1e:	b29b      	uxthmi	r3, r3
 8007a20:	e7ef      	b.n	8007a02 <_printf_i+0x14a>
 8007a22:	4665      	mov	r5, ip
 8007a24:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a28:	fb02 3311 	mls	r3, r2, r1, r3
 8007a2c:	5cc3      	ldrb	r3, [r0, r3]
 8007a2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007a32:	460b      	mov	r3, r1
 8007a34:	2900      	cmp	r1, #0
 8007a36:	d1f5      	bne.n	8007a24 <_printf_i+0x16c>
 8007a38:	e7b9      	b.n	80079ae <_printf_i+0xf6>
 8007a3a:	6813      	ldr	r3, [r2, #0]
 8007a3c:	6825      	ldr	r5, [r4, #0]
 8007a3e:	6961      	ldr	r1, [r4, #20]
 8007a40:	1d18      	adds	r0, r3, #4
 8007a42:	6010      	str	r0, [r2, #0]
 8007a44:	0628      	lsls	r0, r5, #24
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	d501      	bpl.n	8007a4e <_printf_i+0x196>
 8007a4a:	6019      	str	r1, [r3, #0]
 8007a4c:	e002      	b.n	8007a54 <_printf_i+0x19c>
 8007a4e:	066a      	lsls	r2, r5, #25
 8007a50:	d5fb      	bpl.n	8007a4a <_printf_i+0x192>
 8007a52:	8019      	strh	r1, [r3, #0]
 8007a54:	2300      	movs	r3, #0
 8007a56:	6123      	str	r3, [r4, #16]
 8007a58:	4665      	mov	r5, ip
 8007a5a:	e7b9      	b.n	80079d0 <_printf_i+0x118>
 8007a5c:	6813      	ldr	r3, [r2, #0]
 8007a5e:	1d19      	adds	r1, r3, #4
 8007a60:	6011      	str	r1, [r2, #0]
 8007a62:	681d      	ldr	r5, [r3, #0]
 8007a64:	6862      	ldr	r2, [r4, #4]
 8007a66:	2100      	movs	r1, #0
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f7f8 fbd9 	bl	8000220 <memchr>
 8007a6e:	b108      	cbz	r0, 8007a74 <_printf_i+0x1bc>
 8007a70:	1b40      	subs	r0, r0, r5
 8007a72:	6060      	str	r0, [r4, #4]
 8007a74:	6863      	ldr	r3, [r4, #4]
 8007a76:	6123      	str	r3, [r4, #16]
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a7e:	e7a7      	b.n	80079d0 <_printf_i+0x118>
 8007a80:	6923      	ldr	r3, [r4, #16]
 8007a82:	462a      	mov	r2, r5
 8007a84:	4639      	mov	r1, r7
 8007a86:	4630      	mov	r0, r6
 8007a88:	47c0      	blx	r8
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	d0aa      	beq.n	80079e4 <_printf_i+0x12c>
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	079b      	lsls	r3, r3, #30
 8007a92:	d413      	bmi.n	8007abc <_printf_i+0x204>
 8007a94:	68e0      	ldr	r0, [r4, #12]
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	4298      	cmp	r0, r3
 8007a9a:	bfb8      	it	lt
 8007a9c:	4618      	movlt	r0, r3
 8007a9e:	e7a3      	b.n	80079e8 <_printf_i+0x130>
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	464a      	mov	r2, r9
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	47c0      	blx	r8
 8007aaa:	3001      	adds	r0, #1
 8007aac:	d09a      	beq.n	80079e4 <_printf_i+0x12c>
 8007aae:	3501      	adds	r5, #1
 8007ab0:	68e3      	ldr	r3, [r4, #12]
 8007ab2:	9a03      	ldr	r2, [sp, #12]
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	42ab      	cmp	r3, r5
 8007ab8:	dcf2      	bgt.n	8007aa0 <_printf_i+0x1e8>
 8007aba:	e7eb      	b.n	8007a94 <_printf_i+0x1dc>
 8007abc:	2500      	movs	r5, #0
 8007abe:	f104 0919 	add.w	r9, r4, #25
 8007ac2:	e7f5      	b.n	8007ab0 <_printf_i+0x1f8>
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1ac      	bne.n	8007a22 <_printf_i+0x16a>
 8007ac8:	7803      	ldrb	r3, [r0, #0]
 8007aca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ace:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ad2:	e76c      	b.n	80079ae <_printf_i+0xf6>
 8007ad4:	08008001 	.word	0x08008001
 8007ad8:	08008012 	.word	0x08008012

08007adc <memmove>:
 8007adc:	4288      	cmp	r0, r1
 8007ade:	b510      	push	{r4, lr}
 8007ae0:	eb01 0302 	add.w	r3, r1, r2
 8007ae4:	d807      	bhi.n	8007af6 <memmove+0x1a>
 8007ae6:	1e42      	subs	r2, r0, #1
 8007ae8:	4299      	cmp	r1, r3
 8007aea:	d00a      	beq.n	8007b02 <memmove+0x26>
 8007aec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007af0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007af4:	e7f8      	b.n	8007ae8 <memmove+0xc>
 8007af6:	4283      	cmp	r3, r0
 8007af8:	d9f5      	bls.n	8007ae6 <memmove+0xa>
 8007afa:	1881      	adds	r1, r0, r2
 8007afc:	1ad2      	subs	r2, r2, r3
 8007afe:	42d3      	cmn	r3, r2
 8007b00:	d100      	bne.n	8007b04 <memmove+0x28>
 8007b02:	bd10      	pop	{r4, pc}
 8007b04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b08:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007b0c:	e7f7      	b.n	8007afe <memmove+0x22>
	...

08007b10 <_free_r>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4605      	mov	r5, r0
 8007b14:	2900      	cmp	r1, #0
 8007b16:	d045      	beq.n	8007ba4 <_free_r+0x94>
 8007b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b1c:	1f0c      	subs	r4, r1, #4
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	bfb8      	it	lt
 8007b22:	18e4      	addlt	r4, r4, r3
 8007b24:	f000 f8d2 	bl	8007ccc <__malloc_lock>
 8007b28:	4a1f      	ldr	r2, [pc, #124]	; (8007ba8 <_free_r+0x98>)
 8007b2a:	6813      	ldr	r3, [r2, #0]
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	b933      	cbnz	r3, 8007b3e <_free_r+0x2e>
 8007b30:	6063      	str	r3, [r4, #4]
 8007b32:	6014      	str	r4, [r2, #0]
 8007b34:	4628      	mov	r0, r5
 8007b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b3a:	f000 b8c8 	b.w	8007cce <__malloc_unlock>
 8007b3e:	42a3      	cmp	r3, r4
 8007b40:	d90c      	bls.n	8007b5c <_free_r+0x4c>
 8007b42:	6821      	ldr	r1, [r4, #0]
 8007b44:	1862      	adds	r2, r4, r1
 8007b46:	4293      	cmp	r3, r2
 8007b48:	bf04      	itt	eq
 8007b4a:	681a      	ldreq	r2, [r3, #0]
 8007b4c:	685b      	ldreq	r3, [r3, #4]
 8007b4e:	6063      	str	r3, [r4, #4]
 8007b50:	bf04      	itt	eq
 8007b52:	1852      	addeq	r2, r2, r1
 8007b54:	6022      	streq	r2, [r4, #0]
 8007b56:	6004      	str	r4, [r0, #0]
 8007b58:	e7ec      	b.n	8007b34 <_free_r+0x24>
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	b10a      	cbz	r2, 8007b64 <_free_r+0x54>
 8007b60:	42a2      	cmp	r2, r4
 8007b62:	d9fa      	bls.n	8007b5a <_free_r+0x4a>
 8007b64:	6819      	ldr	r1, [r3, #0]
 8007b66:	1858      	adds	r0, r3, r1
 8007b68:	42a0      	cmp	r0, r4
 8007b6a:	d10b      	bne.n	8007b84 <_free_r+0x74>
 8007b6c:	6820      	ldr	r0, [r4, #0]
 8007b6e:	4401      	add	r1, r0
 8007b70:	1858      	adds	r0, r3, r1
 8007b72:	4282      	cmp	r2, r0
 8007b74:	6019      	str	r1, [r3, #0]
 8007b76:	d1dd      	bne.n	8007b34 <_free_r+0x24>
 8007b78:	6810      	ldr	r0, [r2, #0]
 8007b7a:	6852      	ldr	r2, [r2, #4]
 8007b7c:	605a      	str	r2, [r3, #4]
 8007b7e:	4401      	add	r1, r0
 8007b80:	6019      	str	r1, [r3, #0]
 8007b82:	e7d7      	b.n	8007b34 <_free_r+0x24>
 8007b84:	d902      	bls.n	8007b8c <_free_r+0x7c>
 8007b86:	230c      	movs	r3, #12
 8007b88:	602b      	str	r3, [r5, #0]
 8007b8a:	e7d3      	b.n	8007b34 <_free_r+0x24>
 8007b8c:	6820      	ldr	r0, [r4, #0]
 8007b8e:	1821      	adds	r1, r4, r0
 8007b90:	428a      	cmp	r2, r1
 8007b92:	bf04      	itt	eq
 8007b94:	6811      	ldreq	r1, [r2, #0]
 8007b96:	6852      	ldreq	r2, [r2, #4]
 8007b98:	6062      	str	r2, [r4, #4]
 8007b9a:	bf04      	itt	eq
 8007b9c:	1809      	addeq	r1, r1, r0
 8007b9e:	6021      	streq	r1, [r4, #0]
 8007ba0:	605c      	str	r4, [r3, #4]
 8007ba2:	e7c7      	b.n	8007b34 <_free_r+0x24>
 8007ba4:	bd38      	pop	{r3, r4, r5, pc}
 8007ba6:	bf00      	nop
 8007ba8:	2000499c 	.word	0x2000499c

08007bac <_malloc_r>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	1ccd      	adds	r5, r1, #3
 8007bb0:	f025 0503 	bic.w	r5, r5, #3
 8007bb4:	3508      	adds	r5, #8
 8007bb6:	2d0c      	cmp	r5, #12
 8007bb8:	bf38      	it	cc
 8007bba:	250c      	movcc	r5, #12
 8007bbc:	2d00      	cmp	r5, #0
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	db01      	blt.n	8007bc6 <_malloc_r+0x1a>
 8007bc2:	42a9      	cmp	r1, r5
 8007bc4:	d903      	bls.n	8007bce <_malloc_r+0x22>
 8007bc6:	230c      	movs	r3, #12
 8007bc8:	6033      	str	r3, [r6, #0]
 8007bca:	2000      	movs	r0, #0
 8007bcc:	bd70      	pop	{r4, r5, r6, pc}
 8007bce:	f000 f87d 	bl	8007ccc <__malloc_lock>
 8007bd2:	4a21      	ldr	r2, [pc, #132]	; (8007c58 <_malloc_r+0xac>)
 8007bd4:	6814      	ldr	r4, [r2, #0]
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	b991      	cbnz	r1, 8007c00 <_malloc_r+0x54>
 8007bda:	4c20      	ldr	r4, [pc, #128]	; (8007c5c <_malloc_r+0xb0>)
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	b91b      	cbnz	r3, 8007be8 <_malloc_r+0x3c>
 8007be0:	4630      	mov	r0, r6
 8007be2:	f000 f863 	bl	8007cac <_sbrk_r>
 8007be6:	6020      	str	r0, [r4, #0]
 8007be8:	4629      	mov	r1, r5
 8007bea:	4630      	mov	r0, r6
 8007bec:	f000 f85e 	bl	8007cac <_sbrk_r>
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	d124      	bne.n	8007c3e <_malloc_r+0x92>
 8007bf4:	230c      	movs	r3, #12
 8007bf6:	6033      	str	r3, [r6, #0]
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f000 f868 	bl	8007cce <__malloc_unlock>
 8007bfe:	e7e4      	b.n	8007bca <_malloc_r+0x1e>
 8007c00:	680b      	ldr	r3, [r1, #0]
 8007c02:	1b5b      	subs	r3, r3, r5
 8007c04:	d418      	bmi.n	8007c38 <_malloc_r+0x8c>
 8007c06:	2b0b      	cmp	r3, #11
 8007c08:	d90f      	bls.n	8007c2a <_malloc_r+0x7e>
 8007c0a:	600b      	str	r3, [r1, #0]
 8007c0c:	50cd      	str	r5, [r1, r3]
 8007c0e:	18cc      	adds	r4, r1, r3
 8007c10:	4630      	mov	r0, r6
 8007c12:	f000 f85c 	bl	8007cce <__malloc_unlock>
 8007c16:	f104 000b 	add.w	r0, r4, #11
 8007c1a:	1d23      	adds	r3, r4, #4
 8007c1c:	f020 0007 	bic.w	r0, r0, #7
 8007c20:	1ac3      	subs	r3, r0, r3
 8007c22:	d0d3      	beq.n	8007bcc <_malloc_r+0x20>
 8007c24:	425a      	negs	r2, r3
 8007c26:	50e2      	str	r2, [r4, r3]
 8007c28:	e7d0      	b.n	8007bcc <_malloc_r+0x20>
 8007c2a:	428c      	cmp	r4, r1
 8007c2c:	684b      	ldr	r3, [r1, #4]
 8007c2e:	bf16      	itet	ne
 8007c30:	6063      	strne	r3, [r4, #4]
 8007c32:	6013      	streq	r3, [r2, #0]
 8007c34:	460c      	movne	r4, r1
 8007c36:	e7eb      	b.n	8007c10 <_malloc_r+0x64>
 8007c38:	460c      	mov	r4, r1
 8007c3a:	6849      	ldr	r1, [r1, #4]
 8007c3c:	e7cc      	b.n	8007bd8 <_malloc_r+0x2c>
 8007c3e:	1cc4      	adds	r4, r0, #3
 8007c40:	f024 0403 	bic.w	r4, r4, #3
 8007c44:	42a0      	cmp	r0, r4
 8007c46:	d005      	beq.n	8007c54 <_malloc_r+0xa8>
 8007c48:	1a21      	subs	r1, r4, r0
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f000 f82e 	bl	8007cac <_sbrk_r>
 8007c50:	3001      	adds	r0, #1
 8007c52:	d0cf      	beq.n	8007bf4 <_malloc_r+0x48>
 8007c54:	6025      	str	r5, [r4, #0]
 8007c56:	e7db      	b.n	8007c10 <_malloc_r+0x64>
 8007c58:	2000499c 	.word	0x2000499c
 8007c5c:	200049a0 	.word	0x200049a0

08007c60 <_realloc_r>:
 8007c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c62:	4607      	mov	r7, r0
 8007c64:	4614      	mov	r4, r2
 8007c66:	460e      	mov	r6, r1
 8007c68:	b921      	cbnz	r1, 8007c74 <_realloc_r+0x14>
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c70:	f7ff bf9c 	b.w	8007bac <_malloc_r>
 8007c74:	b922      	cbnz	r2, 8007c80 <_realloc_r+0x20>
 8007c76:	f7ff ff4b 	bl	8007b10 <_free_r>
 8007c7a:	4625      	mov	r5, r4
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c80:	f000 f826 	bl	8007cd0 <_malloc_usable_size_r>
 8007c84:	42a0      	cmp	r0, r4
 8007c86:	d20f      	bcs.n	8007ca8 <_realloc_r+0x48>
 8007c88:	4621      	mov	r1, r4
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	f7ff ff8e 	bl	8007bac <_malloc_r>
 8007c90:	4605      	mov	r5, r0
 8007c92:	2800      	cmp	r0, #0
 8007c94:	d0f2      	beq.n	8007c7c <_realloc_r+0x1c>
 8007c96:	4631      	mov	r1, r6
 8007c98:	4622      	mov	r2, r4
 8007c9a:	f7ff fc11 	bl	80074c0 <memcpy>
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	f7ff ff35 	bl	8007b10 <_free_r>
 8007ca6:	e7e9      	b.n	8007c7c <_realloc_r+0x1c>
 8007ca8:	4635      	mov	r5, r6
 8007caa:	e7e7      	b.n	8007c7c <_realloc_r+0x1c>

08007cac <_sbrk_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	4c06      	ldr	r4, [pc, #24]	; (8007cc8 <_sbrk_r+0x1c>)
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	6023      	str	r3, [r4, #0]
 8007cb8:	f7f9 f9e0 	bl	800107c <_sbrk>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d102      	bne.n	8007cc6 <_sbrk_r+0x1a>
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	b103      	cbz	r3, 8007cc6 <_sbrk_r+0x1a>
 8007cc4:	602b      	str	r3, [r5, #0]
 8007cc6:	bd38      	pop	{r3, r4, r5, pc}
 8007cc8:	200057b0 	.word	0x200057b0

08007ccc <__malloc_lock>:
 8007ccc:	4770      	bx	lr

08007cce <__malloc_unlock>:
 8007cce:	4770      	bx	lr

08007cd0 <_malloc_usable_size_r>:
 8007cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cd4:	1f18      	subs	r0, r3, #4
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	bfbc      	itt	lt
 8007cda:	580b      	ldrlt	r3, [r1, r0]
 8007cdc:	18c0      	addlt	r0, r0, r3
 8007cde:	4770      	bx	lr

08007ce0 <_init>:
 8007ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce2:	bf00      	nop
 8007ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce6:	bc08      	pop	{r3}
 8007ce8:	469e      	mov	lr, r3
 8007cea:	4770      	bx	lr

08007cec <_fini>:
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	bf00      	nop
 8007cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf2:	bc08      	pop	{r3}
 8007cf4:	469e      	mov	lr, r3
 8007cf6:	4770      	bx	lr
