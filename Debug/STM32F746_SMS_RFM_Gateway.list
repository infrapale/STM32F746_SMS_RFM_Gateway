
STM32F746_SMS_RFM_Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000406c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f4  080042f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080042f4  080042f4  000142f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042fc  080042fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000070  08004374  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08004374  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd2a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ec4  00000000  00000000  0002cdca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  0002ec90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b0  00000000  00000000  0002f748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025bd1  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000997c  00000000  00000000  00055cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e7c10  00000000  00000000  0005f645  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147255  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e94  00000000  00000000  001472d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004224 	.word	0x08004224

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004224 	.word	0x08004224

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <ConsoleInitialize>:
	uint32_t rd_timeout;
} console;

const char newline_str[] =  "\r\n";

void ConsoleInitialize(UART_HandleTypeDef *uart_ptr){
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    console.p_uart     = uart_ptr;
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <ConsoleInitialize+0x28>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6013      	str	r3, [r2, #0]
	console.priority   = development;
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <ConsoleInitialize+0x28>)
 80005d0:	2232      	movs	r2, #50	; 0x32
 80005d2:	711a      	strb	r2, [r3, #4]
	console.rd_timeout = 5000;
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <ConsoleInitialize+0x28>)
 80005d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80005da:	609a      	str	r2, [r3, #8]
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	20000098 	.word	0x20000098

080005ec <ConsoleWr>:
void ConsoleSetPriority(enum console_priority c_p){
	console.priority = 	c_p;
}

void ConsoleWr(enum console_priority c_priority, char *txt, uint8_t newline){
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
	//if (c_priority >= console.priority){
	if CONSOLE_PRIORITY_IS_OK(c_priority){
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <ConsoleWr+0x4c>)
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	79fa      	ldrb	r2, [r7, #7]
 8000602:	429a      	cmp	r2, r3
 8000604:	d313      	bcc.n	800062e <ConsoleWr+0x42>
		HAL_UART_Transmit(console.p_uart, (uint8_t*)txt, strlen(txt),HAL_MAX_DELAY);
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <ConsoleWr+0x4c>)
 8000608:	681c      	ldr	r4, [r3, #0]
 800060a:	6838      	ldr	r0, [r7, #0]
 800060c:	f7ff fe00 	bl	8000210 <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	b29a      	uxth	r2, r3
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	6839      	ldr	r1, [r7, #0]
 800061a:	4620      	mov	r0, r4
 800061c:	f002 f9c6 	bl	80029ac <HAL_UART_Transmit>
		if (newline) {
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d003      	beq.n	800062e <ConsoleWr+0x42>
			ConsoleNewline(c_priority);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f823 	bl	8000674 <ConsoleNewline>
		}
	}
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bd90      	pop	{r4, r7, pc}
 8000636:	bf00      	nop
 8000638:	20000098 	.word	0x20000098

0800063c <ConsoleWrChar>:

void ConsoleWrChar(enum console_priority c_priority, char c){
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]
	if CONSOLE_PRIORITY_IS_OK(c_priority){
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <ConsoleWrChar+0x34>)
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	79fa      	ldrb	r2, [r7, #7]
 8000652:	429a      	cmp	r2, r3
 8000654:	d307      	bcc.n	8000666 <ConsoleWrChar+0x2a>
		HAL_UART_Transmit(console.p_uart, &c, 1,HAL_MAX_DELAY);
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <ConsoleWrChar+0x34>)
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	1db9      	adds	r1, r7, #6
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	2201      	movs	r2, #1
 8000662:	f002 f9a3 	bl	80029ac <HAL_UART_Transmit>
	}
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000098 	.word	0x20000098

08000674 <ConsoleNewline>:

void ConsoleNewline(enum console_priority c_priority){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
	if (c_priority >= console.priority){
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <ConsoleNewline+0x2c>)
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	79fa      	ldrb	r2, [r7, #7]
 8000684:	429a      	cmp	r2, r3
 8000686:	d307      	bcc.n	8000698 <ConsoleNewline+0x24>
    	HAL_UART_Transmit(console.p_uart, (uint8_t*)newline_str, strlen( newline_str), HAL_MAX_DELAY);
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <ConsoleNewline+0x2c>)
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	2202      	movs	r2, #2
 8000692:	4904      	ldr	r1, [pc, #16]	; (80006a4 <ConsoleNewline+0x30>)
 8000694:	f002 f98a 	bl	80029ac <HAL_UART_Transmit>
	}
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000098 	.word	0x20000098
 80006a4:	080042a4 	.word	0x080042a4

080006a8 <ConsoleWrDec>:

void ConsoleWrDec(enum console_priority c_priority, char *pre_txt, uint16_t value ,char *post_txt, uint8_t newline){
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b08b      	sub	sp, #44	; 0x2c
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
 80006b6:	4613      	mov	r3, r2
 80006b8:	81bb      	strh	r3, [r7, #12]
	if (c_priority >= console.priority){
 80006ba:	4b21      	ldr	r3, [pc, #132]	; (8000740 <ConsoleWrDec+0x98>)
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	7bfa      	ldrb	r2, [r7, #15]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d338      	bcc.n	8000736 <ConsoleWrDec+0x8e>
		char value_str[VALUE_TEXT_LEN];
		sprintf(value_str,"%d", value);
 80006c4:	89ba      	ldrh	r2, [r7, #12]
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	491e      	ldr	r1, [pc, #120]	; (8000744 <ConsoleWrDec+0x9c>)
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 f9a3 	bl	8003a18 <siprintf>
		HAL_UART_Transmit(console.p_uart, (uint8_t*)pre_txt, strlen(pre_txt),HAL_MAX_DELAY);
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <ConsoleWrDec+0x98>)
 80006d4:	681c      	ldr	r4, [r3, #0]
 80006d6:	68b8      	ldr	r0, [r7, #8]
 80006d8:	f7ff fd9a 	bl	8000210 <strlen>
 80006dc:	4603      	mov	r3, r0
 80006de:	b29a      	uxth	r2, r3
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	4620      	mov	r0, r4
 80006e8:	f002 f960 	bl	80029ac <HAL_UART_Transmit>
		HAL_UART_Transmit(console.p_uart, (uint8_t*)value_str, strlen(value_str),HAL_MAX_DELAY);
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <ConsoleWrDec+0x98>)
 80006ee:	681c      	ldr	r4, [r3, #0]
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fd8b 	bl	8000210 <strlen>
 80006fa:	4603      	mov	r3, r0
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	f107 0114 	add.w	r1, r7, #20
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	4620      	mov	r0, r4
 8000708:	f002 f950 	bl	80029ac <HAL_UART_Transmit>
		HAL_UART_Transmit(console.p_uart, (uint8_t*)post_txt, strlen(post_txt),HAL_MAX_DELAY);
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <ConsoleWrDec+0x98>)
 800070e:	681c      	ldr	r4, [r3, #0]
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff fd7d 	bl	8000210 <strlen>
 8000716:	4603      	mov	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	4620      	mov	r0, r4
 8000722:	f002 f943 	bl	80029ac <HAL_UART_Transmit>
		if (newline) {
 8000726:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800072a:	2b00      	cmp	r3, #0
 800072c:	d003      	beq.n	8000736 <ConsoleWrDec+0x8e>
			ConsoleNewline(c_priority);
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff9f 	bl	8000674 <ConsoleNewline>
		}
	}
}
 8000736:	bf00      	nop
 8000738:	372c      	adds	r7, #44	; 0x2c
 800073a:	46bd      	mov	sp, r7
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	bf00      	nop
 8000740:	20000098 	.word	0x20000098
 8000744:	0800423c 	.word	0x0800423c

08000748 <ConsoleRdChar>:
  * @param pData
  * @param Size
  * @param Timeout
  * @retval
  */
HAL_StatusTypeDef ConsoleRdChar( uint8_t *pData ){
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef uart_status;
	uart_status = HAL_UART_Receive(console.p_uart, pData, 1, console.rd_timeout);
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <ConsoleRdChar+0x28>)
 8000752:	6818      	ldr	r0, [r3, #0]
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <ConsoleRdChar+0x28>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	2201      	movs	r2, #1
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	f002 f9b7 	bl	8002ace <HAL_UART_Receive>
 8000760:	4603      	mov	r3, r0
 8000762:	73fb      	strb	r3, [r7, #15]
	return uart_status;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000098 	.word	0x20000098

08000774 <ConsoleRdLn>:


HAL_StatusTypeDef ConsoleRdLn(uint8_t *pData, uint8_t max_len ){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef uart_status = HAL_OK;
 8000780:	2300      	movs	r3, #0
 8000782:	73fb      	strb	r3, [r7, #15]
	uint8_t  cnt= 0;
 8000784:	2300      	movs	r3, #0
 8000786:	73bb      	strb	r3, [r7, #14]
	uint8_t  done = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	737b      	strb	r3, [r7, #13]

	while ((cnt < max_len) && (uart_status == HAL_OK) && !done) {
 800078c:	e018      	b.n	80007c0 <ConsoleRdLn+0x4c>
		uart_status = HAL_UART_Receive(console.p_uart, pData, 1, console.rd_timeout);
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <ConsoleRdLn+0x6c>)
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <ConsoleRdLn+0x6c>)
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	2201      	movs	r2, #1
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	f002 f998 	bl	8002ace <HAL_UART_Receive>
 800079e:	4603      	mov	r3, r0
 80007a0:	73fb      	strb	r3, [r7, #15]

		if (*pData == ASCII_CR){
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b10      	cmp	r3, #16
 80007a8:	d104      	bne.n	80007b4 <ConsoleRdLn+0x40>
			*pData = 0x00;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
			done = 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	737b      	strb	r3, [r7, #13]
		}
		pData++;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3301      	adds	r3, #1
 80007b8:	607b      	str	r3, [r7, #4]
		cnt++;
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	3301      	adds	r3, #1
 80007be:	73bb      	strb	r3, [r7, #14]
	while ((cnt < max_len) && (uart_status == HAL_OK) && !done) {
 80007c0:	7bba      	ldrb	r2, [r7, #14]
 80007c2:	78fb      	ldrb	r3, [r7, #3]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d205      	bcs.n	80007d4 <ConsoleRdLn+0x60>
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d102      	bne.n	80007d4 <ConsoleRdLn+0x60>
 80007ce:	7b7b      	ldrb	r3, [r7, #13]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0dc      	beq.n	800078e <ConsoleRdLn+0x1a>
	}
}
 80007d4:	bf00      	nop
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000098 	.word	0x20000098

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	; 0x30
 80007e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ea:	f000 fb86 	bl	8000efa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ee:	f000 f849 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f2:	f000 f935 	bl	8000a60 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007f6:	f000 f8d5 	bl	80009a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007fa:	f000 f903 	bl	8000a04 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  uint8_t cbuf[32];
  uint8_t *pdata = cbuf;
 80007fe:	463b      	mov	r3, r7
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef uart_status;

  ConsoleInitialize(&huart3);
 8000802:	481a      	ldr	r0, [pc, #104]	; (800086c <main+0x88>)
 8000804:	f7ff fedc 	bl	80005c0 <ConsoleInitialize>
  ConsoleWr(development, "https://github.com/infrapale/STM32F746_SMS_RFM_Gateway", 1);
 8000808:	2201      	movs	r2, #1
 800080a:	4919      	ldr	r1, [pc, #100]	; (8000870 <main+0x8c>)
 800080c:	2032      	movs	r0, #50	; 0x32
 800080e:	f7ff feed 	bl	80005ec <ConsoleWr>
  ConsoleWrDec(development, "Elaman tarkoitus on ", 42 ,".", 1);
 8000812:	2301      	movs	r3, #1
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <main+0x90>)
 8000818:	222a      	movs	r2, #42	; 0x2a
 800081a:	4917      	ldr	r1, [pc, #92]	; (8000878 <main+0x94>)
 800081c:	2032      	movs	r0, #50	; 0x32
 800081e:	f7ff ff43 	bl	80006a8 <ConsoleWrDec>

  ConsoleRdLn(pdata, 10 );
 8000822:	210a      	movs	r1, #10
 8000824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000826:	f7ff ffa5 	bl	8000774 <ConsoleRdLn>
  ConsoleWr(development, pdata, 1);
 800082a:	2201      	movs	r2, #1
 800082c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800082e:	2032      	movs	r0, #50	; 0x32
 8000830:	f7ff fedc 	bl	80005ec <ConsoleWr>

  uart_status = ConsoleRdChar( pdata );
 8000834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000836:	f7ff ff87 	bl	8000748 <ConsoleRdChar>
 800083a:	4603      	mov	r3, r0
 800083c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (uart_status == HAL_OK) {
 8000840:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000844:	2b00      	cmp	r3, #0
 8000846:	d105      	bne.n	8000854 <main+0x70>
      ConsoleWrChar(development, cbuf[0]);
 8000848:	783b      	ldrb	r3, [r7, #0]
 800084a:	4619      	mov	r1, r3
 800084c:	2032      	movs	r0, #50	; 0x32
 800084e:	f7ff fef5 	bl	800063c <ConsoleWrChar>
 8000852:	e009      	b.n	8000868 <main+0x84>
  }
  else {
	  ConsoleWrDec(development, "HAL status", uart_status ,"!", 1);
 8000854:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000858:	b29a      	uxth	r2, r3
 800085a:	2301      	movs	r3, #1
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <main+0x98>)
 8000860:	4907      	ldr	r1, [pc, #28]	; (8000880 <main+0x9c>)
 8000862:	2032      	movs	r0, #50	; 0x32
 8000864:	f7ff ff20 	bl	80006a8 <ConsoleWrDec>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000868:	e7fe      	b.n	8000868 <main+0x84>
 800086a:	bf00      	nop
 800086c:	200000a4 	.word	0x200000a4
 8000870:	08004240 	.word	0x08004240
 8000874:	08004278 	.word	0x08004278
 8000878:	0800427c 	.word	0x0800427c
 800087c:	08004294 	.word	0x08004294
 8000880:	08004298 	.word	0x08004298

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b0b4      	sub	sp, #208	; 0xd0
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800088e:	2230      	movs	r2, #48	; 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f003 f8b8 	bl	8003a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	2284      	movs	r2, #132	; 0x84
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 f8a9 	bl	8003a08 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008b6:	f000 ff91 	bl	80017dc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b37      	ldr	r3, [pc, #220]	; (8000998 <SystemClock_Config+0x114>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a36      	ldr	r2, [pc, #216]	; (8000998 <SystemClock_Config+0x114>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b34      	ldr	r3, [pc, #208]	; (8000998 <SystemClock_Config+0x114>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008d2:	4b32      	ldr	r3, [pc, #200]	; (800099c <SystemClock_Config+0x118>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008da:	4a30      	ldr	r2, [pc, #192]	; (800099c <SystemClock_Config+0x118>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	4b2e      	ldr	r3, [pc, #184]	; (800099c <SystemClock_Config+0x118>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ee:	2301      	movs	r3, #1
 80008f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fc:	2302      	movs	r3, #2
 80008fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000906:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800090a:	2304      	movs	r3, #4
 800090c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000910:	2348      	movs	r3, #72	; 0x48
 8000912:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000916:	2302      	movs	r3, #2
 8000918:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800091c:	2303      	movs	r3, #3
 800091e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000926:	4618      	mov	r0, r3
 8000928:	f000 ff68 	bl	80017fc <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000932:	f000 f97b 	bl	8000c2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	230f      	movs	r3, #15
 8000938:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093c:	2302      	movs	r3, #2
 800093e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000956:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800095a:	2102      	movs	r1, #2
 800095c:	4618      	mov	r0, r3
 800095e:	f001 f9f1 	bl	8001d44 <HAL_RCC_ClockConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000968:	f000 f960 	bl	8000c2c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <SystemClock_Config+0x11c>)
 800096e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000970:	2300      	movs	r3, #0
 8000972:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000974:	2300      	movs	r3, #0
 8000976:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4618      	mov	r0, r3
 8000980:	f001 fbd8 	bl	8002134 <HAL_RCCEx_PeriphCLKConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800098a:	f000 f94f 	bl	8000c2c <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	37d0      	adds	r7, #208	; 0xd0
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000
 80009a0:	00200100 	.word	0x00200100

080009a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009aa:	4a15      	ldr	r2, [pc, #84]	; (8000a00 <MX_USART3_UART_Init+0x5c>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009e8:	f001 ff92 	bl	8002910 <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009f2:	f000 f91b 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000a4 	.word	0x200000a4
 8000a00:	40004800 	.word	0x40004800

08000a04 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a12:	2206      	movs	r2, #6
 8000a14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a18:	2202      	movs	r2, #2
 8000a1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a24:	2202      	movs	r2, #2
 8000a26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a48:	f000 fd7f 	bl	800154a <HAL_PCD_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a52:	f000 f8eb 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000124 	.word	0x20000124

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08c      	sub	sp, #48	; 0x30
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	4b67      	ldr	r3, [pc, #412]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a66      	ldr	r2, [pc, #408]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b64      	ldr	r3, [pc, #400]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	61bb      	str	r3, [r7, #24]
 8000a8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	4b61      	ldr	r3, [pc, #388]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a60      	ldr	r2, [pc, #384]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b5e      	ldr	r3, [pc, #376]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b5b      	ldr	r3, [pc, #364]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a5a      	ldr	r2, [pc, #360]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b58      	ldr	r3, [pc, #352]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b55      	ldr	r3, [pc, #340]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a54      	ldr	r2, [pc, #336]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b52      	ldr	r3, [pc, #328]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad6:	4b4f      	ldr	r3, [pc, #316]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a4e      	ldr	r2, [pc, #312]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b4c      	ldr	r3, [pc, #304]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0308 	and.w	r3, r3, #8
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aee:	4b49      	ldr	r3, [pc, #292]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a48      	ldr	r2, [pc, #288]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b46      	ldr	r3, [pc, #280]	; (8000c14 <MX_GPIO_Init+0x1b4>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b0c:	4842      	ldr	r0, [pc, #264]	; (8000c18 <MX_GPIO_Init+0x1b8>)
 8000b0e:	f000 fd03 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2140      	movs	r1, #64	; 0x40
 8000b16:	4841      	ldr	r0, [pc, #260]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000b18:	f000 fcfe 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b22:	4b3f      	ldr	r3, [pc, #252]	; (8000c20 <MX_GPIO_Init+0x1c0>)
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	483c      	ldr	r0, [pc, #240]	; (8000c24 <MX_GPIO_Init+0x1c4>)
 8000b32:	f000 fb47 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b36:	2332      	movs	r3, #50	; 0x32
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b46:	230b      	movs	r3, #11
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4834      	ldr	r0, [pc, #208]	; (8000c24 <MX_GPIO_Init+0x1c4>)
 8000b52:	f000 fb37 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b56:	2386      	movs	r3, #134	; 0x86
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b66:	230b      	movs	r3, #11
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	482d      	ldr	r0, [pc, #180]	; (8000c28 <MX_GPIO_Init+0x1c8>)
 8000b72:	f000 fb27 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b76:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4822      	ldr	r0, [pc, #136]	; (8000c18 <MX_GPIO_Init+0x1b8>)
 8000b90:	f000 fb18 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba6:	230b      	movs	r3, #11
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4819      	ldr	r0, [pc, #100]	; (8000c18 <MX_GPIO_Init+0x1b8>)
 8000bb2:	f000 fb07 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bb6:	2340      	movs	r3, #64	; 0x40
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000bce:	f000 faf9 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000be6:	f000 faed 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfc:	230b      	movs	r3, #11
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_GPIO_Init+0x1bc>)
 8000c08:	f000 fadc 	bl	80011c4 <HAL_GPIO_Init>

}
 8000c0c:	bf00      	nop
 8000c0e:	3730      	adds	r7, #48	; 0x30
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020400 	.word	0x40020400
 8000c1c:	40021800 	.word	0x40021800
 8000c20:	10110000 	.word	0x10110000
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40020000 	.word	0x40020000

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <Error_Handler+0x6>

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_MspInit+0x44>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <HAL_MspInit+0x44>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_MspInit+0x44>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_MspInit+0x44>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_MspInit+0x44>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MspInit+0x44>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <HAL_UART_MspInit+0x7c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d128      	bne.n	8000cf0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_UART_MspInit+0x80>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <HAL_UART_MspInit+0x80>)
 8000ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_UART_MspInit+0x80>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_UART_MspInit+0x80>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <HAL_UART_MspInit+0x80>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_UART_MspInit+0x80>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_UART_MspInit+0x84>)
 8000cec:	f000 fa6a 	bl	80011c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40004800 	.word	0x40004800
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020c00 	.word	0x40020c00

08000d04 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d24:	d141      	bne.n	8000daa <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <HAL_PCD_MspInit+0xb0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a22      	ldr	r2, [pc, #136]	; (8000db4 <HAL_PCD_MspInit+0xb0>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <HAL_PCD_MspInit+0xb0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d3e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d50:	230a      	movs	r3, #10
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4817      	ldr	r0, [pc, #92]	; (8000db8 <HAL_PCD_MspInit+0xb4>)
 8000d5c:	f000 fa32 	bl	80011c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4810      	ldr	r0, [pc, #64]	; (8000db8 <HAL_PCD_MspInit+0xb4>)
 8000d76:	f000 fa25 	bl	80011c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_PCD_MspInit+0xb0>)
 8000d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7e:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <HAL_PCD_MspInit+0xb0>)
 8000d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d84:	6353      	str	r3, [r2, #52]	; 0x34
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_PCD_MspInit+0xb0>)
 8000d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_PCD_MspInit+0xb0>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_PCD_MspInit+0xb0>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_PCD_MspInit+0xb0>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	; 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <NMI_Handler+0x4>

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 f8b4 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f002 fdb8 	bl	80039b4 <__errno>
 8000e44:	4602      	mov	r2, r0
 8000e46:	230c      	movs	r3, #12
 8000e48:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20050000 	.word	0x20050000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	2000008c 	.word	0x2000008c
 8000e78:	20000530 	.word	0x20000530

08000e7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <SystemInit+0x28>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <SystemInit+0x28>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <SystemInit+0x28>)
 8000e92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e96:	609a      	str	r2, [r3, #8]
#endif
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000eac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eae:	e003      	b.n	8000eb8 <LoopCopyDataInit>

08000eb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000eb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000eb6:	3104      	adds	r1, #4

08000eb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ebc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ebe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ec0:	d3f6      	bcc.n	8000eb0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ec4:	e002      	b.n	8000ecc <LoopFillZerobss>

08000ec6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ec6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ec8:	f842 3b04 	str.w	r3, [r2], #4

08000ecc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ece:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ed0:	d3f9      	bcc.n	8000ec6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ed2:	f7ff ffd3 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f002 fd73 	bl	80039c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eda:	f7ff fc83 	bl	80007e4 <main>
  bx  lr    
 8000ede:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ee0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000ee4:	08004304 	.word	0x08004304
  ldr  r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000eec:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000ef0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000ef4:	20000530 	.word	0x20000530

08000ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC_IRQHandler>

08000efa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efe:	2003      	movs	r0, #3
 8000f00:	f000 f92c 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f000 f805 	bl	8000f14 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f0a:	f7ff fe93 	bl	8000c34 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x54>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x58>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f939 	bl	80011aa <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00e      	b.n	8000f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d80a      	bhi.n	8000f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f000 f90f 	bl	8001172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <HAL_InitTick+0x5c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e000      	b.n	8000f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000004 	.word	0x20000004

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000528 	.word	0x20000528

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000528 	.word	0x20000528

08000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff ffee 	bl	8000f9c <HAL_GetTick>
 8000fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fcc:	d005      	beq.n	8000fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_Delay+0x40>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fda:	bf00      	nop
 8000fdc:	f7ff ffde 	bl	8000f9c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8f7      	bhi.n	8000fdc <HAL_Delay+0x28>
  {
  }
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <__NVIC_SetPriorityGrouping+0x40>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001014:	4013      	ands	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	4313      	orrs	r3, r2
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <__NVIC_SetPriorityGrouping+0x40>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00
 800103c:	05fa0000 	.word	0x05fa0000

08001040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <__NVIC_GetPriorityGrouping+0x18>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	f003 0307 	and.w	r3, r3, #7
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f7ff ff8e 	bl	800105c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff47 	bl	8000ff8 <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff5c 	bl	8001040 <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ff8e 	bl	80010b0 <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff5d 	bl	800105c <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffb0 	bl	8001118 <SysTick_Config>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	e175      	b.n	80014d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	f040 8164 	bne.w	80014ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d00b      	beq.n	8001222 <HAL_GPIO_Init+0x5e>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d007      	beq.n	8001222 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001216:	2b11      	cmp	r3, #17
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b12      	cmp	r3, #18
 8001220:	d130      	bne.n	8001284 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	f003 0201 	and.w	r2, r3, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x100>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b12      	cmp	r3, #18
 80012c2:	d123      	bne.n	800130c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	08da      	lsrs	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3208      	adds	r2, #8
 80012cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	08da      	lsrs	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3208      	adds	r2, #8
 8001306:	69b9      	ldr	r1, [r7, #24]
 8001308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0203 	and.w	r2, r3, #3
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80be 	beq.w	80014ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b65      	ldr	r3, [pc, #404]	; (80014e4 <HAL_GPIO_Init+0x320>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a64      	ldr	r2, [pc, #400]	; (80014e4 <HAL_GPIO_Init+0x320>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b62      	ldr	r3, [pc, #392]	; (80014e4 <HAL_GPIO_Init+0x320>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001366:	4a60      	ldr	r2, [pc, #384]	; (80014e8 <HAL_GPIO_Init+0x324>)
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a57      	ldr	r2, [pc, #348]	; (80014ec <HAL_GPIO_Init+0x328>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d037      	beq.n	8001402 <HAL_GPIO_Init+0x23e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a56      	ldr	r2, [pc, #344]	; (80014f0 <HAL_GPIO_Init+0x32c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d031      	beq.n	80013fe <HAL_GPIO_Init+0x23a>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a55      	ldr	r2, [pc, #340]	; (80014f4 <HAL_GPIO_Init+0x330>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d02b      	beq.n	80013fa <HAL_GPIO_Init+0x236>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a54      	ldr	r2, [pc, #336]	; (80014f8 <HAL_GPIO_Init+0x334>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d025      	beq.n	80013f6 <HAL_GPIO_Init+0x232>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a53      	ldr	r2, [pc, #332]	; (80014fc <HAL_GPIO_Init+0x338>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01f      	beq.n	80013f2 <HAL_GPIO_Init+0x22e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a52      	ldr	r2, [pc, #328]	; (8001500 <HAL_GPIO_Init+0x33c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d019      	beq.n	80013ee <HAL_GPIO_Init+0x22a>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a51      	ldr	r2, [pc, #324]	; (8001504 <HAL_GPIO_Init+0x340>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0x226>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a50      	ldr	r2, [pc, #320]	; (8001508 <HAL_GPIO_Init+0x344>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00d      	beq.n	80013e6 <HAL_GPIO_Init+0x222>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4f      	ldr	r2, [pc, #316]	; (800150c <HAL_GPIO_Init+0x348>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_GPIO_Init+0x21e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4e      	ldr	r2, [pc, #312]	; (8001510 <HAL_GPIO_Init+0x34c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_GPIO_Init+0x21a>
 80013da:	2309      	movs	r3, #9
 80013dc:	e012      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013de:	230a      	movs	r3, #10
 80013e0:	e010      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013e2:	2308      	movs	r3, #8
 80013e4:	e00e      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013e6:	2307      	movs	r3, #7
 80013e8:	e00c      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013ea:	2306      	movs	r3, #6
 80013ec:	e00a      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e008      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x240>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x240>
 8001402:	2300      	movs	r3, #0
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001414:	4934      	ldr	r1, [pc, #208]	; (80014e8 <HAL_GPIO_Init+0x324>)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001422:	4b3c      	ldr	r3, [pc, #240]	; (8001514 <HAL_GPIO_Init+0x350>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001446:	4a33      	ldr	r2, [pc, #204]	; (8001514 <HAL_GPIO_Init+0x350>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800144c:	4b31      	ldr	r3, [pc, #196]	; (8001514 <HAL_GPIO_Init+0x350>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001470:	4a28      	ldr	r2, [pc, #160]	; (8001514 <HAL_GPIO_Init+0x350>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <HAL_GPIO_Init+0x350>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800149a:	4a1e      	ldr	r2, [pc, #120]	; (8001514 <HAL_GPIO_Init+0x350>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_GPIO_Init+0x350>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c4:	4a13      	ldr	r2, [pc, #76]	; (8001514 <HAL_GPIO_Init+0x350>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	f67f ae86 	bls.w	80011e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014d8:	bf00      	nop
 80014da:	3724      	adds	r7, #36	; 0x24
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40013800 	.word	0x40013800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020c00 	.word	0x40020c00
 80014fc:	40021000 	.word	0x40021000
 8001500:	40021400 	.word	0x40021400
 8001504:	40021800 	.word	0x40021800
 8001508:	40021c00 	.word	0x40021c00
 800150c:	40022000 	.word	0x40022000
 8001510:	40022400 	.word	0x40022400
 8001514:	40013c00 	.word	0x40013c00

08001518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
 8001524:	4613      	mov	r3, r2
 8001526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001528:	787b      	ldrb	r3, [r7, #1]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800152e:	887a      	ldrh	r2, [r7, #2]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001534:	e003      	b.n	800153e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001536:	887b      	ldrh	r3, [r7, #2]
 8001538:	041a      	lsls	r2, r3, #16
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	619a      	str	r2, [r3, #24]
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800154a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154c:	b08f      	sub	sp, #60	; 0x3c
 800154e:	af0a      	add	r7, sp, #40	; 0x28
 8001550:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e116      	b.n	800178a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d106      	bne.n	800157c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fbc4 	bl	8000d04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2203      	movs	r2, #3
 8001580:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f001 ffb2 	bl	8003504 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	687e      	ldr	r6, [r7, #4]
 80015a8:	466d      	mov	r5, sp
 80015aa:	f106 0410 	add.w	r4, r6, #16
 80015ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80015be:	1d33      	adds	r3, r6, #4
 80015c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c2:	6838      	ldr	r0, [r7, #0]
 80015c4:	f001 ff46 	bl	8003454 <USB_CoreInit>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d005      	beq.n	80015da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2202      	movs	r2, #2
 80015d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e0d7      	b.n	800178a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 ffa0 	bl	8003526 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	e04a      	b.n	8001682 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	333d      	adds	r3, #61	; 0x3d
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	333c      	adds	r3, #60	; 0x3c
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	b298      	uxth	r0, r3
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	3342      	adds	r3, #66	; 0x42
 8001628:	4602      	mov	r2, r0
 800162a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	333f      	adds	r3, #63	; 0x3f
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001640:	7bfa      	ldrb	r2, [r7, #15]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	3344      	adds	r3, #68	; 0x44
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	3348      	adds	r3, #72	; 0x48
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	1a9b      	subs	r3, r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	3350      	adds	r3, #80	; 0x50
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	3301      	adds	r3, #1
 8001680:	73fb      	strb	r3, [r7, #15]
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	d3af      	bcc.n	80015ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	e044      	b.n	800171c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	1a9b      	subs	r3, r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	440b      	add	r3, r1
 80016a0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	1a9b      	subs	r3, r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	1a9b      	subs	r3, r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016d4:	7bfa      	ldrb	r2, [r7, #15]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	1a9b      	subs	r3, r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016ea:	7bfa      	ldrb	r2, [r7, #15]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	1a9b      	subs	r3, r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	1a9b      	subs	r3, r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	3301      	adds	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	429a      	cmp	r2, r3
 8001724:	d3b5      	bcc.n	8001692 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	687e      	ldr	r6, [r7, #4]
 800172e:	466d      	mov	r5, sp
 8001730:	f106 0410 	add.w	r4, r6, #16
 8001734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800173a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800173c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001740:	e885 0003 	stmia.w	r5, {r0, r1}
 8001744:	1d33      	adds	r3, r6, #4
 8001746:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001748:	6838      	ldr	r0, [r7, #0]
 800174a:	f001 ff17 	bl	800357c <USB_DevInit>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e014      	b.n	800178a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	2b01      	cmp	r3, #1
 8001776:	d102      	bne.n	800177e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f80b 	bl	8001794 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f002 f8c9 	bl	800391a <USB_DevDisconnect>

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001794 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_PCDEx_ActivateLPM+0x44>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	10000003 	.word	0x10000003

080017dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40007000 	.word	0x40007000

080017fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e291      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8087 	beq.w	800192e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001820:	4b96      	ldr	r3, [pc, #600]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b04      	cmp	r3, #4
 800182a:	d00c      	beq.n	8001846 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800182c:	4b93      	ldr	r3, [pc, #588]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d112      	bne.n	800185e <HAL_RCC_OscConfig+0x62>
 8001838:	4b90      	ldr	r3, [pc, #576]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001844:	d10b      	bne.n	800185e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001846:	4b8d      	ldr	r3, [pc, #564]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d06c      	beq.n	800192c <HAL_RCC_OscConfig+0x130>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d168      	bne.n	800192c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e26b      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x7a>
 8001868:	4b84      	ldr	r3, [pc, #528]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a83      	ldr	r2, [pc, #524]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 800186e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e02e      	b.n	80018d4 <HAL_RCC_OscConfig+0xd8>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0x9c>
 800187e:	4b7f      	ldr	r3, [pc, #508]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a7e      	ldr	r2, [pc, #504]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b7c      	ldr	r3, [pc, #496]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a7b      	ldr	r2, [pc, #492]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e01d      	b.n	80018d4 <HAL_RCC_OscConfig+0xd8>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0xc0>
 80018a2:	4b76      	ldr	r3, [pc, #472]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a75      	ldr	r2, [pc, #468]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b73      	ldr	r3, [pc, #460]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a72      	ldr	r2, [pc, #456]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0xd8>
 80018bc:	4b6f      	ldr	r3, [pc, #444]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a6e      	ldr	r2, [pc, #440]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 80018c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b6c      	ldr	r3, [pc, #432]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a6b      	ldr	r2, [pc, #428]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 80018ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d013      	beq.n	8001904 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff fb5e 	bl	8000f9c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff fb5a 	bl	8000f9c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e21f      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0xe8>
 8001902:	e014      	b.n	800192e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff fb4a 	bl	8000f9c <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff fb46 	bl	8000f9c <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e20b      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191e:	4b57      	ldr	r3, [pc, #348]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x110>
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d069      	beq.n	8001a0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193a:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00b      	beq.n	800195e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001946:	4b4d      	ldr	r3, [pc, #308]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b08      	cmp	r3, #8
 8001950:	d11c      	bne.n	800198c <HAL_RCC_OscConfig+0x190>
 8001952:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d116      	bne.n	800198c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195e:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <HAL_RCC_OscConfig+0x17a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d001      	beq.n	8001976 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e1df      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001976:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	493d      	ldr	r1, [pc, #244]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	e040      	b.n	8001a0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d023      	beq.n	80019dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001994:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a38      	ldr	r2, [pc, #224]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a0:	f7ff fafc 	bl	8000f9c <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a8:	f7ff faf8 	bl	8000f9c <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e1bd      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ba:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c6:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4929      	ldr	r1, [pc, #164]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
 80019da:	e018      	b.n	8001a0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019dc:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 80019e2:	f023 0301 	bic.w	r3, r3, #1
 80019e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff fad8 	bl	8000f9c <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f0:	f7ff fad4 	bl	8000f9c <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e199      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d038      	beq.n	8001a8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d019      	beq.n	8001a56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a26:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fab5 	bl	8000f9c <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a36:	f7ff fab1 	bl	8000f9c <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e176      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x23a>
 8001a54:	e01a      	b.n	8001a8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a5a:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <HAL_RCC_OscConfig+0x280>)
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff fa9b 	bl	8000f9c <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6a:	f7ff fa97 	bl	8000f9c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d903      	bls.n	8001a80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e15c      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>
 8001a7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	4b91      	ldr	r3, [pc, #580]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ee      	bne.n	8001a6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80a4 	beq.w	8001be2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9a:	4b8b      	ldr	r3, [pc, #556]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10d      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b88      	ldr	r3, [pc, #544]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a87      	ldr	r2, [pc, #540]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab2:	4b85      	ldr	r3, [pc, #532]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac2:	4b82      	ldr	r3, [pc, #520]	; (8001ccc <HAL_RCC_OscConfig+0x4d0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d118      	bne.n	8001b00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ace:	4b7f      	ldr	r3, [pc, #508]	; (8001ccc <HAL_RCC_OscConfig+0x4d0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a7e      	ldr	r2, [pc, #504]	; (8001ccc <HAL_RCC_OscConfig+0x4d0>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ada:	f7ff fa5f 	bl	8000f9c <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7ff fa5b 	bl	8000f9c <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b64      	cmp	r3, #100	; 0x64
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e120      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af4:	4b75      	ldr	r3, [pc, #468]	; (8001ccc <HAL_RCC_OscConfig+0x4d0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x31a>
 8001b08:	4b6f      	ldr	r3, [pc, #444]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	4a6e      	ldr	r2, [pc, #440]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6713      	str	r3, [r2, #112]	; 0x70
 8001b14:	e02d      	b.n	8001b72 <HAL_RCC_OscConfig+0x376>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x33c>
 8001b1e:	4b6a      	ldr	r3, [pc, #424]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	4a69      	ldr	r2, [pc, #420]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2a:	4b67      	ldr	r3, [pc, #412]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2e:	4a66      	ldr	r2, [pc, #408]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b30:	f023 0304 	bic.w	r3, r3, #4
 8001b34:	6713      	str	r3, [r2, #112]	; 0x70
 8001b36:	e01c      	b.n	8001b72 <HAL_RCC_OscConfig+0x376>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d10c      	bne.n	8001b5a <HAL_RCC_OscConfig+0x35e>
 8001b40:	4b61      	ldr	r3, [pc, #388]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	4a60      	ldr	r2, [pc, #384]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4c:	4b5e      	ldr	r3, [pc, #376]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b50:	4a5d      	ldr	r2, [pc, #372]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6713      	str	r3, [r2, #112]	; 0x70
 8001b58:	e00b      	b.n	8001b72 <HAL_RCC_OscConfig+0x376>
 8001b5a:	4b5b      	ldr	r3, [pc, #364]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	4a5a      	ldr	r2, [pc, #360]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6713      	str	r3, [r2, #112]	; 0x70
 8001b66:	4b58      	ldr	r3, [pc, #352]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	4a57      	ldr	r2, [pc, #348]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d015      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fa0f 	bl	8000f9c <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff fa0b 	bl	8000f9c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e0ce      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b98:	4b4b      	ldr	r3, [pc, #300]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ee      	beq.n	8001b82 <HAL_RCC_OscConfig+0x386>
 8001ba4:	e014      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f9f9 	bl	8000f9c <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7ff f9f5 	bl	8000f9c <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e0b8      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc4:	4b40      	ldr	r3, [pc, #256]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1ee      	bne.n	8001bae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d105      	bne.n	8001be2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd6:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a3b      	ldr	r2, [pc, #236]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80a4 	beq.w	8001d34 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bec:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d06b      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d149      	bne.n	8001c94 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a30      	ldr	r2, [pc, #192]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f9c6 	bl	8000f9c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c14:	f7ff f9c2 	bl	8000f9c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e087      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c26:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69da      	ldr	r2, [r3, #28]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	019b      	lsls	r3, r3, #6
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	085b      	lsrs	r3, r3, #1
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	041b      	lsls	r3, r3, #16
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	061b      	lsls	r3, r3, #24
 8001c56:	4313      	orrs	r3, r2
 8001c58:	4a1b      	ldr	r2, [pc, #108]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001c5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c5e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c60:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7ff f996 	bl	8000f9c <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff f992 	bl	8000f9c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e057      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x478>
 8001c92:	e04f      	b.n	8001d34 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f97c 	bl	8000f9c <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7ff f978 	bl	8000f9c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e03d      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cba:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_RCC_OscConfig+0x4cc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x4ac>
 8001cc6:	e035      	b.n	8001d34 <HAL_RCC_OscConfig+0x538>
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_RCC_OscConfig+0x544>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d028      	beq.n	8001d30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d121      	bne.n	8001d30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d11a      	bne.n	8001d30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d00:	4013      	ands	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d111      	bne.n	8001d30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d16:	085b      	lsrs	r3, r3, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d107      	bne.n	8001d30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0d0      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b6a      	ldr	r3, [pc, #424]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d910      	bls.n	8001d8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b67      	ldr	r3, [pc, #412]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 020f 	bic.w	r2, r3, #15
 8001d72:	4965      	ldr	r1, [pc, #404]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b63      	ldr	r3, [pc, #396]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0b8      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d020      	beq.n	8001dda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001da4:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4a58      	ldr	r2, [pc, #352]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001daa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dbc:	4b53      	ldr	r3, [pc, #332]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4a52      	ldr	r2, [pc, #328]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001dc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc8:	4b50      	ldr	r3, [pc, #320]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	494d      	ldr	r1, [pc, #308]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d040      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	4b47      	ldr	r3, [pc, #284]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d115      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e07f      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e06:	4b41      	ldr	r3, [pc, #260]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e073      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e16:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e06b      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e26:	4b39      	ldr	r3, [pc, #228]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f023 0203 	bic.w	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4936      	ldr	r1, [pc, #216]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e38:	f7ff f8b0 	bl	8000f9c <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e40:	f7ff f8ac 	bl	8000f9c <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e053      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 020c 	and.w	r2, r3, #12
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d1eb      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e68:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d210      	bcs.n	8001e98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 020f 	bic.w	r2, r3, #15
 8001e7e:	4922      	ldr	r1, [pc, #136]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e032      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea4:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4916      	ldr	r1, [pc, #88]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d009      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	490e      	ldr	r1, [pc, #56]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ed6:	f000 f821 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 8001eda:	4601      	mov	r1, r0
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_RCC_ClockConfig+0x1cc>)
 8001ee8:	5cd3      	ldrb	r3, [r2, r3]
 8001eea:	fa21 f303 	lsr.w	r3, r1, r3
 8001eee:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <HAL_RCC_ClockConfig+0x1d0>)
 8001ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_RCC_ClockConfig+0x1d4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff f80c 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023c00 	.word	0x40023c00
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	080042a8 	.word	0x080042a8
 8001f14:	20000000 	.word	0x20000000
 8001f18:	20000004 	.word	0x20000004

08001f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f32:	4b63      	ldr	r3, [pc, #396]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d007      	beq.n	8001f4e <HAL_RCC_GetSysClockFreq+0x32>
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d008      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x38>
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 80b4 	bne.w	80020b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f48:	4b5e      	ldr	r3, [pc, #376]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f4a:	60bb      	str	r3, [r7, #8]
      break;
 8001f4c:	e0b3      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f4e:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f50:	60bb      	str	r3, [r7, #8]
      break;
 8001f52:	e0b0      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f54:	4b5a      	ldr	r3, [pc, #360]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f5c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f5e:	4b58      	ldr	r3, [pc, #352]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d04a      	beq.n	8002000 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f6a:	4b55      	ldr	r3, [pc, #340]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	099b      	lsrs	r3, r3, #6
 8001f70:	f04f 0400 	mov.w	r4, #0
 8001f74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	ea03 0501 	and.w	r5, r3, r1
 8001f80:	ea04 0602 	and.w	r6, r4, r2
 8001f84:	4629      	mov	r1, r5
 8001f86:	4632      	mov	r2, r6
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	f04f 0400 	mov.w	r4, #0
 8001f90:	0154      	lsls	r4, r2, #5
 8001f92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f96:	014b      	lsls	r3, r1, #5
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4622      	mov	r2, r4
 8001f9c:	1b49      	subs	r1, r1, r5
 8001f9e:	eb62 0206 	sbc.w	r2, r2, r6
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	f04f 0400 	mov.w	r4, #0
 8001faa:	0194      	lsls	r4, r2, #6
 8001fac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fb0:	018b      	lsls	r3, r1, #6
 8001fb2:	1a5b      	subs	r3, r3, r1
 8001fb4:	eb64 0402 	sbc.w	r4, r4, r2
 8001fb8:	f04f 0100 	mov.w	r1, #0
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	00e2      	lsls	r2, r4, #3
 8001fc2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fc6:	00d9      	lsls	r1, r3, #3
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4614      	mov	r4, r2
 8001fcc:	195b      	adds	r3, r3, r5
 8001fce:	eb44 0406 	adc.w	r4, r4, r6
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	0262      	lsls	r2, r4, #9
 8001fdc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001fe0:	0259      	lsls	r1, r3, #9
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4614      	mov	r4, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	4621      	mov	r1, r4
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f04f 0400 	mov.w	r4, #0
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	f7fe f964 	bl	80002c0 <__aeabi_uldivmod>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	460c      	mov	r4, r1
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	e049      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002000:	4b2f      	ldr	r3, [pc, #188]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	099b      	lsrs	r3, r3, #6
 8002006:	f04f 0400 	mov.w	r4, #0
 800200a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	ea03 0501 	and.w	r5, r3, r1
 8002016:	ea04 0602 	and.w	r6, r4, r2
 800201a:	4629      	mov	r1, r5
 800201c:	4632      	mov	r2, r6
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	f04f 0400 	mov.w	r4, #0
 8002026:	0154      	lsls	r4, r2, #5
 8002028:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800202c:	014b      	lsls	r3, r1, #5
 800202e:	4619      	mov	r1, r3
 8002030:	4622      	mov	r2, r4
 8002032:	1b49      	subs	r1, r1, r5
 8002034:	eb62 0206 	sbc.w	r2, r2, r6
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	f04f 0400 	mov.w	r4, #0
 8002040:	0194      	lsls	r4, r2, #6
 8002042:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002046:	018b      	lsls	r3, r1, #6
 8002048:	1a5b      	subs	r3, r3, r1
 800204a:	eb64 0402 	sbc.w	r4, r4, r2
 800204e:	f04f 0100 	mov.w	r1, #0
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	00e2      	lsls	r2, r4, #3
 8002058:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800205c:	00d9      	lsls	r1, r3, #3
 800205e:	460b      	mov	r3, r1
 8002060:	4614      	mov	r4, r2
 8002062:	195b      	adds	r3, r3, r5
 8002064:	eb44 0406 	adc.w	r4, r4, r6
 8002068:	f04f 0100 	mov.w	r1, #0
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	02a2      	lsls	r2, r4, #10
 8002072:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002076:	0299      	lsls	r1, r3, #10
 8002078:	460b      	mov	r3, r1
 800207a:	4614      	mov	r4, r2
 800207c:	4618      	mov	r0, r3
 800207e:	4621      	mov	r1, r4
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f04f 0400 	mov.w	r4, #0
 8002086:	461a      	mov	r2, r3
 8002088:	4623      	mov	r3, r4
 800208a:	f7fe f919 	bl	80002c0 <__aeabi_uldivmod>
 800208e:	4603      	mov	r3, r0
 8002090:	460c      	mov	r4, r1
 8002092:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	3301      	adds	r3, #1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ac:	60bb      	str	r3, [r7, #8]
      break;
 80020ae:	e002      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020b2:	60bb      	str	r3, [r7, #8]
      break;
 80020b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b6:	68bb      	ldr	r3, [r7, #8]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c0:	40023800 	.word	0x40023800
 80020c4:	00f42400 	.word	0x00f42400
 80020c8:	007a1200 	.word	0x007a1200

080020cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000000 	.word	0x20000000

080020e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020e8:	f7ff fff0 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 80020ec:	4601      	mov	r1, r0
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	0a9b      	lsrs	r3, r3, #10
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4a03      	ldr	r2, [pc, #12]	; (8002108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020fa:	5cd3      	ldrb	r3, [r2, r3]
 80020fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40023800 	.word	0x40023800
 8002108:	080042b8 	.word	0x080042b8

0800210c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002110:	f7ff ffdc 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 8002114:	4601      	mov	r1, r0
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	0b5b      	lsrs	r3, r3, #13
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	4a03      	ldr	r2, [pc, #12]	; (8002130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40023800 	.word	0x40023800
 8002130:	080042b8 	.word	0x080042b8

08002134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d012      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800215c:	4b69      	ldr	r3, [pc, #420]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	4a68      	ldr	r2, [pc, #416]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002162:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002166:	6093      	str	r3, [r2, #8]
 8002168:	4b66      	ldr	r3, [pc, #408]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002170:	4964      	ldr	r1, [pc, #400]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800217e:	2301      	movs	r3, #1
 8002180:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d017      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800218e:	4b5d      	ldr	r3, [pc, #372]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	4959      	ldr	r1, [pc, #356]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021ac:	d101      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80021ba:	2301      	movs	r3, #1
 80021bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d017      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021ca:	4b4e      	ldr	r3, [pc, #312]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	494a      	ldr	r1, [pc, #296]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e8:	d101      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80021ea:	2301      	movs	r3, #1
 80021ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80021f6:	2301      	movs	r3, #1
 80021f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002206:	2301      	movs	r3, #1
 8002208:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 808b 	beq.w	800232e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	4a39      	ldr	r2, [pc, #228]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002222:	6413      	str	r3, [r2, #64]	; 0x40
 8002224:	4b37      	ldr	r3, [pc, #220]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002230:	4b35      	ldr	r3, [pc, #212]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a34      	ldr	r2, [pc, #208]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800223c:	f7fe feae 	bl	8000f9c <HAL_GetTick>
 8002240:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002244:	f7fe feaa 	bl	8000f9c <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e355      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002256:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002262:	4b28      	ldr	r3, [pc, #160]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d035      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	429a      	cmp	r2, r3
 800227e:	d02e      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002280:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002288:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800228a:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228e:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002294:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	4a1a      	ldr	r2, [pc, #104]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80022a2:	4a18      	ldr	r2, [pc, #96]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d114      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7fe fe72 	bl	8000f9c <HAL_GetTick>
 80022b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ba:	e00a      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022bc:	f7fe fe6e 	bl	8000f9c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e317      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0ee      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022ea:	d111      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80022fa:	400b      	ands	r3, r1
 80022fc:	4901      	ldr	r1, [pc, #4]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	608b      	str	r3, [r1, #8]
 8002302:	e00b      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002304:	40023800 	.word	0x40023800
 8002308:	40007000 	.word	0x40007000
 800230c:	0ffffcff 	.word	0x0ffffcff
 8002310:	4bb0      	ldr	r3, [pc, #704]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4aaf      	ldr	r2, [pc, #700]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002316:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800231a:	6093      	str	r3, [r2, #8]
 800231c:	4bad      	ldr	r3, [pc, #692]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800231e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002328:	49aa      	ldr	r1, [pc, #680]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800232a:	4313      	orrs	r3, r2
 800232c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	d010      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800233a:	4ba6      	ldr	r3, [pc, #664]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800233c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002340:	4aa4      	ldr	r2, [pc, #656]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002346:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800234a:	4ba2      	ldr	r3, [pc, #648]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800234c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002354:	499f      	ldr	r1, [pc, #636]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002368:	4b9a      	ldr	r3, [pc, #616]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002376:	4997      	ldr	r1, [pc, #604]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800238a:	4b92      	ldr	r3, [pc, #584]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002398:	498e      	ldr	r1, [pc, #568]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ac:	4b89      	ldr	r3, [pc, #548]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ba:	4986      	ldr	r1, [pc, #536]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023ce:	4b81      	ldr	r3, [pc, #516]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	497d      	ldr	r1, [pc, #500]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023f0:	4b78      	ldr	r3, [pc, #480]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	f023 0203 	bic.w	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	4975      	ldr	r1, [pc, #468]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002412:	4b70      	ldr	r3, [pc, #448]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002418:	f023 020c 	bic.w	r2, r3, #12
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002420:	496c      	ldr	r1, [pc, #432]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002434:	4b67      	ldr	r3, [pc, #412]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002442:	4964      	ldr	r1, [pc, #400]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002456:	4b5f      	ldr	r3, [pc, #380]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002464:	495b      	ldr	r1, [pc, #364]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002478:	4b56      	ldr	r3, [pc, #344]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002486:	4953      	ldr	r1, [pc, #332]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800249a:	4b4e      	ldr	r3, [pc, #312]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	494a      	ldr	r1, [pc, #296]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80024bc:	4b45      	ldr	r3, [pc, #276]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	4942      	ldr	r1, [pc, #264]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80024de:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ec:	4939      	ldr	r1, [pc, #228]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002500:	4b34      	ldr	r3, [pc, #208]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002506:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800250e:	4931      	ldr	r1, [pc, #196]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d011      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002522:	4b2c      	ldr	r3, [pc, #176]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002530:	4928      	ldr	r1, [pc, #160]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800253c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002540:	d101      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002542:	2301      	movs	r3, #1
 8002544:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002552:	2301      	movs	r3, #1
 8002554:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002562:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002568:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002570:	4918      	ldr	r1, [pc, #96]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00b      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002594:	490f      	ldr	r1, [pc, #60]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d005      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025aa:	f040 80d8 	bne.w	800275e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a08      	ldr	r2, [pc, #32]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ba:	f7fe fcef 	bl	8000f9c <HAL_GetTick>
 80025be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025c0:	e00a      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025c2:	f7fe fceb 	bl	8000f9c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b64      	cmp	r3, #100	; 0x64
 80025ce:	d903      	bls.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e196      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80025d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025d8:	4b6c      	ldr	r3, [pc, #432]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1ee      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d021      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d11d      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025f8:	4b64      	ldr	r3, [pc, #400]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80025fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025fe:	0c1b      	lsrs	r3, r3, #16
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002606:	4b61      	ldr	r3, [pc, #388]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800260c:	0e1b      	lsrs	r3, r3, #24
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	019a      	lsls	r2, r3, #6
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	431a      	orrs	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	061b      	lsls	r3, r3, #24
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	071b      	lsls	r3, r3, #28
 800262c:	4957      	ldr	r1, [pc, #348]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d004      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002652:	2b00      	cmp	r3, #0
 8002654:	d02e      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800265e:	d129      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002660:	4b4a      	ldr	r3, [pc, #296]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002666:	0c1b      	lsrs	r3, r3, #16
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800266e:	4b47      	ldr	r3, [pc, #284]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002674:	0f1b      	lsrs	r3, r3, #28
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	019a      	lsls	r2, r3, #6
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	041b      	lsls	r3, r3, #16
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	061b      	lsls	r3, r3, #24
 800268e:	431a      	orrs	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	071b      	lsls	r3, r3, #28
 8002694:	493d      	ldr	r1, [pc, #244]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800269c:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800269e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a2:	f023 021f 	bic.w	r2, r3, #31
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	3b01      	subs	r3, #1
 80026ac:	4937      	ldr	r1, [pc, #220]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01d      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026c0:	4b32      	ldr	r3, [pc, #200]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80026c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c6:	0e1b      	lsrs	r3, r3, #24
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026ce:	4b2f      	ldr	r3, [pc, #188]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80026d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d4:	0f1b      	lsrs	r3, r3, #28
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	019a      	lsls	r2, r3, #6
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	041b      	lsls	r3, r3, #16
 80026e8:	431a      	orrs	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	431a      	orrs	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	071b      	lsls	r3, r3, #28
 80026f4:	4925      	ldr	r1, [pc, #148]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d011      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	019a      	lsls	r2, r3, #6
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	041b      	lsls	r3, r3, #16
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	061b      	lsls	r3, r3, #24
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	071b      	lsls	r3, r3, #28
 8002724:	4919      	ldr	r1, [pc, #100]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800272c:	4b17      	ldr	r3, [pc, #92]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a16      	ldr	r2, [pc, #88]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002738:	f7fe fc30 	bl	8000f9c <HAL_GetTick>
 800273c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002740:	f7fe fc2c 	bl	8000f9c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e0d7      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b01      	cmp	r3, #1
 8002762:	f040 80cd 	bne.w	8002900 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a08      	ldr	r2, [pc, #32]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800276c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002772:	f7fe fc13 	bl	8000f9c <HAL_GetTick>
 8002776:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800277a:	f7fe fc0f 	bl	8000f9c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b64      	cmp	r3, #100	; 0x64
 8002786:	d903      	bls.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e0ba      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800278c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002790:	4b5e      	ldr	r3, [pc, #376]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800279c:	d0ed      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d02e      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d12a      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027c6:	4b51      	ldr	r3, [pc, #324]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027d4:	4b4d      	ldr	r3, [pc, #308]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	0f1b      	lsrs	r3, r3, #28
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	019a      	lsls	r2, r3, #6
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	041b      	lsls	r3, r3, #16
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	061b      	lsls	r3, r3, #24
 80027f4:	431a      	orrs	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	071b      	lsls	r3, r3, #28
 80027fa:	4944      	ldr	r1, [pc, #272]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002802:	4b42      	ldr	r3, [pc, #264]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002808:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	3b01      	subs	r3, #1
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	493d      	ldr	r1, [pc, #244]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d022      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800282c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002830:	d11d      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002832:	4b36      	ldr	r3, [pc, #216]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002838:	0e1b      	lsrs	r3, r3, #24
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002840:	4b32      	ldr	r3, [pc, #200]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002846:	0f1b      	lsrs	r3, r3, #28
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	019a      	lsls	r2, r3, #6
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	041b      	lsls	r3, r3, #16
 800285a:	431a      	orrs	r2, r3
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	061b      	lsls	r3, r3, #24
 8002860:	431a      	orrs	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	071b      	lsls	r3, r3, #28
 8002866:	4929      	ldr	r1, [pc, #164]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d028      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	0e1b      	lsrs	r3, r3, #24
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002888:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	0c1b      	lsrs	r3, r3, #16
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	019a      	lsls	r2, r3, #6
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	041b      	lsls	r3, r3, #16
 80028a0:	431a      	orrs	r2, r3
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	061b      	lsls	r3, r3, #24
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	071b      	lsls	r3, r3, #28
 80028ae:	4917      	ldr	r1, [pc, #92]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80028b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	4911      	ldr	r1, [pc, #68]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0e      	ldr	r2, [pc, #56]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80028d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d8:	f7fe fb60 	bl	8000f9c <HAL_GetTick>
 80028dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028e0:	f7fe fb5c 	bl	8000f9c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e007      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028fe:	d1ef      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800

08002910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e040      	b.n	80029a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002926:	2b00      	cmp	r3, #0
 8002928:	d106      	bne.n	8002938 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fe f9a2 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2224      	movs	r2, #36	; 0x24
 800293c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f98a 	bl	8002c68 <UART_SetConfig>
 8002954:	4603      	mov	r3, r0
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e022      	b.n	80029a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fc28 	bl	80031bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800297a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800298a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fcaf 	bl	8003300 <UART_CheckIdleState>
 80029a2:	4603      	mov	r3, r0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	d17f      	bne.n	8002ac4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_UART_Transmit+0x24>
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e078      	b.n	8002ac6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Transmit+0x36>
 80029de:	2302      	movs	r3, #2
 80029e0:	e071      	b.n	8002ac6 <HAL_UART_Transmit+0x11a>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2221      	movs	r2, #33	; 0x21
 80029f4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80029f6:	f7fe fad1 	bl	8000f9c <HAL_GetTick>
 80029fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	88fa      	ldrh	r2, [r7, #6]
 8002a00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	88fa      	ldrh	r2, [r7, #6]
 8002a08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a14:	d108      	bne.n	8002a28 <HAL_UART_Transmit+0x7c>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d104      	bne.n	8002a28 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	e003      	b.n	8002a30 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002a38:	e02c      	b.n	8002a94 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2200      	movs	r2, #0
 8002a42:	2180      	movs	r1, #128	; 0x80
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 fc8a 	bl	800335e <UART_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e038      	b.n	8002ac6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10b      	bne.n	8002a72 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	61bb      	str	r3, [r7, #24]
 8002a70:	e007      	b.n	8002a82 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1cc      	bne.n	8002a3a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2140      	movs	r1, #64	; 0x40
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fc57 	bl	800335e <UART_WaitOnFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e005      	b.n	8002ac6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e000      	b.n	8002ac6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
  }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3720      	adds	r7, #32
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b08a      	sub	sp, #40	; 0x28
 8002ad2:	af02      	add	r7, sp, #8
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	603b      	str	r3, [r7, #0]
 8002ada:	4613      	mov	r3, r2
 8002adc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	f040 80ba 	bne.w	8002c5c <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HAL_UART_Receive+0x26>
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0b2      	b.n	8002c5e <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_UART_Receive+0x38>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e0ab      	b.n	8002c5e <HAL_UART_Receive+0x190>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2222      	movs	r2, #34	; 0x22
 8002b18:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002b1a:	f7fe fa3f 	bl	8000f9c <HAL_GetTick>
 8002b1e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	88fa      	ldrh	r2, [r7, #6]
 8002b24:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	88fa      	ldrh	r2, [r7, #6]
 8002b2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b38:	d10e      	bne.n	8002b58 <HAL_UART_Receive+0x8a>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d105      	bne.n	8002b4e <HAL_UART_Receive+0x80>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002b48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b4c:	e02d      	b.n	8002baa <HAL_UART_Receive+0xdc>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	22ff      	movs	r2, #255	; 0xff
 8002b52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b56:	e028      	b.n	8002baa <HAL_UART_Receive+0xdc>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10d      	bne.n	8002b7c <HAL_UART_Receive+0xae>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d104      	bne.n	8002b72 <HAL_UART_Receive+0xa4>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	22ff      	movs	r2, #255	; 0xff
 8002b6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b70:	e01b      	b.n	8002baa <HAL_UART_Receive+0xdc>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	227f      	movs	r2, #127	; 0x7f
 8002b76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b7a:	e016      	b.n	8002baa <HAL_UART_Receive+0xdc>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b84:	d10d      	bne.n	8002ba2 <HAL_UART_Receive+0xd4>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d104      	bne.n	8002b98 <HAL_UART_Receive+0xca>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	227f      	movs	r2, #127	; 0x7f
 8002b92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b96:	e008      	b.n	8002baa <HAL_UART_Receive+0xdc>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	223f      	movs	r2, #63	; 0x3f
 8002b9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ba0:	e003      	b.n	8002baa <HAL_UART_Receive+0xdc>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002bb0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bba:	d108      	bne.n	8002bce <HAL_UART_Receive+0x100>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d104      	bne.n	8002bce <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	61bb      	str	r3, [r7, #24]
 8002bcc:	e003      	b.n	8002bd6 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002bde:	e032      	b.n	8002c46 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2200      	movs	r2, #0
 8002be8:	2120      	movs	r1, #32
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 fbb7 	bl	800335e <UART_WaitOnFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e031      	b.n	8002c5e <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10c      	bne.n	8002c1a <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	8a7b      	ldrh	r3, [r7, #18]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	3302      	adds	r3, #2
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	e00c      	b.n	8002c34 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	8a7b      	ldrh	r3, [r7, #18]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	4013      	ands	r3, r2
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3301      	adds	r3, #1
 8002c32:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1c6      	bne.n	8002be0 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2220      	movs	r2, #32
 8002c56:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	e000      	b.n	8002c5e <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
  }
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3720      	adds	r7, #32
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4bb1      	ldr	r3, [pc, #708]	; (8002f5c <UART_SetConfig+0x2f4>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	6939      	ldr	r1, [r7, #16]
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a9f      	ldr	r2, [pc, #636]	; (8002f60 <UART_SetConfig+0x2f8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d121      	bne.n	8002d2c <UART_SetConfig+0xc4>
 8002ce8:	4b9e      	ldr	r3, [pc, #632]	; (8002f64 <UART_SetConfig+0x2fc>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d816      	bhi.n	8002d24 <UART_SetConfig+0xbc>
 8002cf6:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <UART_SetConfig+0x94>)
 8002cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfc:	08002d0d 	.word	0x08002d0d
 8002d00:	08002d19 	.word	0x08002d19
 8002d04:	08002d13 	.word	0x08002d13
 8002d08:	08002d1f 	.word	0x08002d1f
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	77fb      	strb	r3, [r7, #31]
 8002d10:	e151      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002d12:	2302      	movs	r3, #2
 8002d14:	77fb      	strb	r3, [r7, #31]
 8002d16:	e14e      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002d18:	2304      	movs	r3, #4
 8002d1a:	77fb      	strb	r3, [r7, #31]
 8002d1c:	e14b      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002d1e:	2308      	movs	r3, #8
 8002d20:	77fb      	strb	r3, [r7, #31]
 8002d22:	e148      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002d24:	2310      	movs	r3, #16
 8002d26:	77fb      	strb	r3, [r7, #31]
 8002d28:	bf00      	nop
 8002d2a:	e144      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a8d      	ldr	r2, [pc, #564]	; (8002f68 <UART_SetConfig+0x300>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d134      	bne.n	8002da0 <UART_SetConfig+0x138>
 8002d36:	4b8b      	ldr	r3, [pc, #556]	; (8002f64 <UART_SetConfig+0x2fc>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	2b0c      	cmp	r3, #12
 8002d42:	d829      	bhi.n	8002d98 <UART_SetConfig+0x130>
 8002d44:	a201      	add	r2, pc, #4	; (adr r2, 8002d4c <UART_SetConfig+0xe4>)
 8002d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4a:	bf00      	nop
 8002d4c:	08002d81 	.word	0x08002d81
 8002d50:	08002d99 	.word	0x08002d99
 8002d54:	08002d99 	.word	0x08002d99
 8002d58:	08002d99 	.word	0x08002d99
 8002d5c:	08002d8d 	.word	0x08002d8d
 8002d60:	08002d99 	.word	0x08002d99
 8002d64:	08002d99 	.word	0x08002d99
 8002d68:	08002d99 	.word	0x08002d99
 8002d6c:	08002d87 	.word	0x08002d87
 8002d70:	08002d99 	.word	0x08002d99
 8002d74:	08002d99 	.word	0x08002d99
 8002d78:	08002d99 	.word	0x08002d99
 8002d7c:	08002d93 	.word	0x08002d93
 8002d80:	2300      	movs	r3, #0
 8002d82:	77fb      	strb	r3, [r7, #31]
 8002d84:	e117      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002d86:	2302      	movs	r3, #2
 8002d88:	77fb      	strb	r3, [r7, #31]
 8002d8a:	e114      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	77fb      	strb	r3, [r7, #31]
 8002d90:	e111      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002d92:	2308      	movs	r3, #8
 8002d94:	77fb      	strb	r3, [r7, #31]
 8002d96:	e10e      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002d98:	2310      	movs	r3, #16
 8002d9a:	77fb      	strb	r3, [r7, #31]
 8002d9c:	bf00      	nop
 8002d9e:	e10a      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a71      	ldr	r2, [pc, #452]	; (8002f6c <UART_SetConfig+0x304>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d120      	bne.n	8002dec <UART_SetConfig+0x184>
 8002daa:	4b6e      	ldr	r3, [pc, #440]	; (8002f64 <UART_SetConfig+0x2fc>)
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	d00f      	beq.n	8002dd8 <UART_SetConfig+0x170>
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d802      	bhi.n	8002dc2 <UART_SetConfig+0x15a>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <UART_SetConfig+0x164>
 8002dc0:	e010      	b.n	8002de4 <UART_SetConfig+0x17c>
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	d005      	beq.n	8002dd2 <UART_SetConfig+0x16a>
 8002dc6:	2b30      	cmp	r3, #48	; 0x30
 8002dc8:	d009      	beq.n	8002dde <UART_SetConfig+0x176>
 8002dca:	e00b      	b.n	8002de4 <UART_SetConfig+0x17c>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	77fb      	strb	r3, [r7, #31]
 8002dd0:	e0f1      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	77fb      	strb	r3, [r7, #31]
 8002dd6:	e0ee      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002dd8:	2304      	movs	r3, #4
 8002dda:	77fb      	strb	r3, [r7, #31]
 8002ddc:	e0eb      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002dde:	2308      	movs	r3, #8
 8002de0:	77fb      	strb	r3, [r7, #31]
 8002de2:	e0e8      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002de4:	2310      	movs	r3, #16
 8002de6:	77fb      	strb	r3, [r7, #31]
 8002de8:	bf00      	nop
 8002dea:	e0e4      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a5f      	ldr	r2, [pc, #380]	; (8002f70 <UART_SetConfig+0x308>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d120      	bne.n	8002e38 <UART_SetConfig+0x1d0>
 8002df6:	4b5b      	ldr	r3, [pc, #364]	; (8002f64 <UART_SetConfig+0x2fc>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e00:	2b40      	cmp	r3, #64	; 0x40
 8002e02:	d00f      	beq.n	8002e24 <UART_SetConfig+0x1bc>
 8002e04:	2b40      	cmp	r3, #64	; 0x40
 8002e06:	d802      	bhi.n	8002e0e <UART_SetConfig+0x1a6>
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <UART_SetConfig+0x1b0>
 8002e0c:	e010      	b.n	8002e30 <UART_SetConfig+0x1c8>
 8002e0e:	2b80      	cmp	r3, #128	; 0x80
 8002e10:	d005      	beq.n	8002e1e <UART_SetConfig+0x1b6>
 8002e12:	2bc0      	cmp	r3, #192	; 0xc0
 8002e14:	d009      	beq.n	8002e2a <UART_SetConfig+0x1c2>
 8002e16:	e00b      	b.n	8002e30 <UART_SetConfig+0x1c8>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	77fb      	strb	r3, [r7, #31]
 8002e1c:	e0cb      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	77fb      	strb	r3, [r7, #31]
 8002e22:	e0c8      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002e24:	2304      	movs	r3, #4
 8002e26:	77fb      	strb	r3, [r7, #31]
 8002e28:	e0c5      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	77fb      	strb	r3, [r7, #31]
 8002e2e:	e0c2      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002e30:	2310      	movs	r3, #16
 8002e32:	77fb      	strb	r3, [r7, #31]
 8002e34:	bf00      	nop
 8002e36:	e0be      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a4d      	ldr	r2, [pc, #308]	; (8002f74 <UART_SetConfig+0x30c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d124      	bne.n	8002e8c <UART_SetConfig+0x224>
 8002e42:	4b48      	ldr	r3, [pc, #288]	; (8002f64 <UART_SetConfig+0x2fc>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e50:	d012      	beq.n	8002e78 <UART_SetConfig+0x210>
 8002e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e56:	d802      	bhi.n	8002e5e <UART_SetConfig+0x1f6>
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <UART_SetConfig+0x204>
 8002e5c:	e012      	b.n	8002e84 <UART_SetConfig+0x21c>
 8002e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e62:	d006      	beq.n	8002e72 <UART_SetConfig+0x20a>
 8002e64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e68:	d009      	beq.n	8002e7e <UART_SetConfig+0x216>
 8002e6a:	e00b      	b.n	8002e84 <UART_SetConfig+0x21c>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	77fb      	strb	r3, [r7, #31]
 8002e70:	e0a1      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002e72:	2302      	movs	r3, #2
 8002e74:	77fb      	strb	r3, [r7, #31]
 8002e76:	e09e      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	77fb      	strb	r3, [r7, #31]
 8002e7c:	e09b      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002e7e:	2308      	movs	r3, #8
 8002e80:	77fb      	strb	r3, [r7, #31]
 8002e82:	e098      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002e84:	2310      	movs	r3, #16
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	bf00      	nop
 8002e8a:	e094      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a39      	ldr	r2, [pc, #228]	; (8002f78 <UART_SetConfig+0x310>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d124      	bne.n	8002ee0 <UART_SetConfig+0x278>
 8002e96:	4b33      	ldr	r3, [pc, #204]	; (8002f64 <UART_SetConfig+0x2fc>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea4:	d012      	beq.n	8002ecc <UART_SetConfig+0x264>
 8002ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eaa:	d802      	bhi.n	8002eb2 <UART_SetConfig+0x24a>
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <UART_SetConfig+0x258>
 8002eb0:	e012      	b.n	8002ed8 <UART_SetConfig+0x270>
 8002eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eb6:	d006      	beq.n	8002ec6 <UART_SetConfig+0x25e>
 8002eb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ebc:	d009      	beq.n	8002ed2 <UART_SetConfig+0x26a>
 8002ebe:	e00b      	b.n	8002ed8 <UART_SetConfig+0x270>
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	e077      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	77fb      	strb	r3, [r7, #31]
 8002eca:	e074      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	e071      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	77fb      	strb	r3, [r7, #31]
 8002ed6:	e06e      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002ed8:	2310      	movs	r3, #16
 8002eda:	77fb      	strb	r3, [r7, #31]
 8002edc:	bf00      	nop
 8002ede:	e06a      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a25      	ldr	r2, [pc, #148]	; (8002f7c <UART_SetConfig+0x314>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d124      	bne.n	8002f34 <UART_SetConfig+0x2cc>
 8002eea:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <UART_SetConfig+0x2fc>)
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef8:	d012      	beq.n	8002f20 <UART_SetConfig+0x2b8>
 8002efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efe:	d802      	bhi.n	8002f06 <UART_SetConfig+0x29e>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <UART_SetConfig+0x2ac>
 8002f04:	e012      	b.n	8002f2c <UART_SetConfig+0x2c4>
 8002f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f0a:	d006      	beq.n	8002f1a <UART_SetConfig+0x2b2>
 8002f0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f10:	d009      	beq.n	8002f26 <UART_SetConfig+0x2be>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x2c4>
 8002f14:	2300      	movs	r3, #0
 8002f16:	77fb      	strb	r3, [r7, #31]
 8002f18:	e04d      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	77fb      	strb	r3, [r7, #31]
 8002f1e:	e04a      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002f20:	2304      	movs	r3, #4
 8002f22:	77fb      	strb	r3, [r7, #31]
 8002f24:	e047      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002f26:	2308      	movs	r3, #8
 8002f28:	77fb      	strb	r3, [r7, #31]
 8002f2a:	e044      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	77fb      	strb	r3, [r7, #31]
 8002f30:	bf00      	nop
 8002f32:	e040      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a11      	ldr	r2, [pc, #68]	; (8002f80 <UART_SetConfig+0x318>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d139      	bne.n	8002fb2 <UART_SetConfig+0x34a>
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <UART_SetConfig+0x2fc>)
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f4c:	d027      	beq.n	8002f9e <UART_SetConfig+0x336>
 8002f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f52:	d817      	bhi.n	8002f84 <UART_SetConfig+0x31c>
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01c      	beq.n	8002f92 <UART_SetConfig+0x32a>
 8002f58:	e027      	b.n	8002faa <UART_SetConfig+0x342>
 8002f5a:	bf00      	nop
 8002f5c:	efff69f3 	.word	0xefff69f3
 8002f60:	40011000 	.word	0x40011000
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40004400 	.word	0x40004400
 8002f6c:	40004800 	.word	0x40004800
 8002f70:	40004c00 	.word	0x40004c00
 8002f74:	40005000 	.word	0x40005000
 8002f78:	40011400 	.word	0x40011400
 8002f7c:	40007800 	.word	0x40007800
 8002f80:	40007c00 	.word	0x40007c00
 8002f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f88:	d006      	beq.n	8002f98 <UART_SetConfig+0x330>
 8002f8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f8e:	d009      	beq.n	8002fa4 <UART_SetConfig+0x33c>
 8002f90:	e00b      	b.n	8002faa <UART_SetConfig+0x342>
 8002f92:	2300      	movs	r3, #0
 8002f94:	77fb      	strb	r3, [r7, #31]
 8002f96:	e00e      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	77fb      	strb	r3, [r7, #31]
 8002f9c:	e00b      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002f9e:	2304      	movs	r3, #4
 8002fa0:	77fb      	strb	r3, [r7, #31]
 8002fa2:	e008      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002fa4:	2308      	movs	r3, #8
 8002fa6:	77fb      	strb	r3, [r7, #31]
 8002fa8:	e005      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002faa:	2310      	movs	r3, #16
 8002fac:	77fb      	strb	r3, [r7, #31]
 8002fae:	bf00      	nop
 8002fb0:	e001      	b.n	8002fb6 <UART_SetConfig+0x34e>
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fbe:	d17f      	bne.n	80030c0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002fc0:	7ffb      	ldrb	r3, [r7, #31]
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d85c      	bhi.n	8003080 <UART_SetConfig+0x418>
 8002fc6:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <UART_SetConfig+0x364>)
 8002fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fcc:	08002ff1 	.word	0x08002ff1
 8002fd0:	08003011 	.word	0x08003011
 8002fd4:	08003031 	.word	0x08003031
 8002fd8:	08003081 	.word	0x08003081
 8002fdc:	08003049 	.word	0x08003049
 8002fe0:	08003081 	.word	0x08003081
 8002fe4:	08003081 	.word	0x08003081
 8002fe8:	08003081 	.word	0x08003081
 8002fec:	08003069 	.word	0x08003069
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff0:	f7ff f878 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 8002ff4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	005a      	lsls	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	085b      	lsrs	r3, r3, #1
 8003000:	441a      	add	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	b29b      	uxth	r3, r3
 800300c:	61bb      	str	r3, [r7, #24]
        break;
 800300e:	e03a      	b.n	8003086 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003010:	f7ff f87c 	bl	800210c <HAL_RCC_GetPCLK2Freq>
 8003014:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	005a      	lsls	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	441a      	add	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	b29b      	uxth	r3, r3
 800302c:	61bb      	str	r3, [r7, #24]
        break;
 800302e:	e02a      	b.n	8003086 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	085a      	lsrs	r2, r3, #1
 8003036:	4b5f      	ldr	r3, [pc, #380]	; (80031b4 <UART_SetConfig+0x54c>)
 8003038:	4413      	add	r3, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6852      	ldr	r2, [r2, #4]
 800303e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003042:	b29b      	uxth	r3, r3
 8003044:	61bb      	str	r3, [r7, #24]
        break;
 8003046:	e01e      	b.n	8003086 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003048:	f7fe ff68 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 800304c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	005a      	lsls	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	441a      	add	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003062:	b29b      	uxth	r3, r3
 8003064:	61bb      	str	r3, [r7, #24]
        break;
 8003066:	e00e      	b.n	8003086 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	085b      	lsrs	r3, r3, #1
 800306e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	fbb2 f3f3 	udiv	r3, r2, r3
 800307a:	b29b      	uxth	r3, r3
 800307c:	61bb      	str	r3, [r7, #24]
        break;
 800307e:	e002      	b.n	8003086 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	75fb      	strb	r3, [r7, #23]
        break;
 8003084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	2b0f      	cmp	r3, #15
 800308a:	d916      	bls.n	80030ba <UART_SetConfig+0x452>
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003092:	d212      	bcs.n	80030ba <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	b29b      	uxth	r3, r3
 8003098:	f023 030f 	bic.w	r3, r3, #15
 800309c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	897b      	ldrh	r3, [r7, #10]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	897a      	ldrh	r2, [r7, #10]
 80030b6:	60da      	str	r2, [r3, #12]
 80030b8:	e070      	b.n	800319c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
 80030be:	e06d      	b.n	800319c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80030c0:	7ffb      	ldrb	r3, [r7, #31]
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d859      	bhi.n	800317a <UART_SetConfig+0x512>
 80030c6:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <UART_SetConfig+0x464>)
 80030c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030cc:	080030f1 	.word	0x080030f1
 80030d0:	0800310f 	.word	0x0800310f
 80030d4:	0800312d 	.word	0x0800312d
 80030d8:	0800317b 	.word	0x0800317b
 80030dc:	08003145 	.word	0x08003145
 80030e0:	0800317b 	.word	0x0800317b
 80030e4:	0800317b 	.word	0x0800317b
 80030e8:	0800317b 	.word	0x0800317b
 80030ec:	08003163 	.word	0x08003163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f0:	f7fe fff8 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80030f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	085a      	lsrs	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	441a      	add	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	b29b      	uxth	r3, r3
 800310a:	61bb      	str	r3, [r7, #24]
        break;
 800310c:	e038      	b.n	8003180 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800310e:	f7fe fffd 	bl	800210c <HAL_RCC_GetPCLK2Freq>
 8003112:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	085a      	lsrs	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	441a      	add	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	fbb2 f3f3 	udiv	r3, r2, r3
 8003126:	b29b      	uxth	r3, r3
 8003128:	61bb      	str	r3, [r7, #24]
        break;
 800312a:	e029      	b.n	8003180 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	085a      	lsrs	r2, r3, #1
 8003132:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <UART_SetConfig+0x550>)
 8003134:	4413      	add	r3, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6852      	ldr	r2, [r2, #4]
 800313a:	fbb3 f3f2 	udiv	r3, r3, r2
 800313e:	b29b      	uxth	r3, r3
 8003140:	61bb      	str	r3, [r7, #24]
        break;
 8003142:	e01d      	b.n	8003180 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003144:	f7fe feea 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 8003148:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	085a      	lsrs	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	441a      	add	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	fbb2 f3f3 	udiv	r3, r2, r3
 800315c:	b29b      	uxth	r3, r3
 800315e:	61bb      	str	r3, [r7, #24]
        break;
 8003160:	e00e      	b.n	8003180 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	085b      	lsrs	r3, r3, #1
 8003168:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	b29b      	uxth	r3, r3
 8003176:	61bb      	str	r3, [r7, #24]
        break;
 8003178:	e002      	b.n	8003180 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	75fb      	strb	r3, [r7, #23]
        break;
 800317e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b0f      	cmp	r3, #15
 8003184:	d908      	bls.n	8003198 <UART_SetConfig+0x530>
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318c:	d204      	bcs.n	8003198 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	e001      	b.n	800319c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3720      	adds	r7, #32
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	01e84800 	.word	0x01e84800
 80031b8:	00f42400 	.word	0x00f42400

080031bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01a      	beq.n	80032d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ba:	d10a      	bne.n	80032d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]
  }
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af02      	add	r7, sp, #8
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800330e:	f7fd fe45 	bl	8000f9c <HAL_GetTick>
 8003312:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b08      	cmp	r3, #8
 8003320:	d10e      	bne.n	8003340 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003322:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f814 	bl	800335e <UART_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e00a      	b.n	8003356 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800336e:	e05d      	b.n	800342c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003376:	d059      	beq.n	800342c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003378:	f7fd fe10 	bl	8000f9c <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	429a      	cmp	r2, r3
 8003386:	d302      	bcc.n	800338e <UART_WaitOnFlagUntilTimeout+0x30>
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d11b      	bne.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800339c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e042      	b.n	800344c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d02b      	beq.n	800342c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e2:	d123      	bne.n	800342c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ec:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e00f      	b.n	800344c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	4013      	ands	r3, r2
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	bf0c      	ite	eq
 800343c:	2301      	moveq	r3, #1
 800343e:	2300      	movne	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	429a      	cmp	r2, r3
 8003448:	d092      	beq.n	8003370 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003454:	b084      	sub	sp, #16
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	f107 001c 	add.w	r0, r7, #28
 8003462:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	2b01      	cmp	r3, #1
 800346a:	d120      	bne.n	80034ae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	4b20      	ldr	r3, [pc, #128]	; (8003500 <USB_CoreInit+0xac>)
 800347e:	4013      	ands	r3, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003492:	2b01      	cmp	r3, #1
 8003494:	d105      	bne.n	80034a2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fa52 	bl	800394c <USB_CoreReset>
 80034a8:	4603      	mov	r3, r0
 80034aa:	73fb      	strb	r3, [r7, #15]
 80034ac:	e010      	b.n	80034d0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fa46 	bl	800394c <USB_CoreReset>
 80034c0:	4603      	mov	r3, r0
 80034c2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d10b      	bne.n	80034ee <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f043 0206 	orr.w	r2, r3, #6
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f043 0220 	orr.w	r2, r3, #32
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034fa:	b004      	add	sp, #16
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	ffbdffbf 	.word	0xffbdffbf

08003504 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 0201 	bic.w	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d106      	bne.n	8003552 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]
 8003550:	e00b      	b.n	800356a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d106      	bne.n	8003566 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60da      	str	r2, [r3, #12]
 8003564:	e001      	b.n	800356a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e003      	b.n	8003572 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800356a:	2032      	movs	r0, #50	; 0x32
 800356c:	f7fd fd22 	bl	8000fb4 <HAL_Delay>

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800357c:	b084      	sub	sp, #16
 800357e:	b580      	push	{r7, lr}
 8003580:	b086      	sub	sp, #24
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800358a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	e009      	b.n	80035b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	3340      	adds	r3, #64	; 0x40
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	2200      	movs	r2, #0
 80035a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	3301      	adds	r3, #1
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	2b0e      	cmp	r3, #14
 80035b4:	d9f2      	bls.n	800359c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80035b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d11c      	bne.n	80035f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ca:	f043 0302 	orr.w	r3, r3, #2
 80035ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e005      	b.n	8003602 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003608:	461a      	mov	r2, r3
 800360a:	2300      	movs	r3, #0
 800360c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003614:	4619      	mov	r1, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361c:	461a      	mov	r2, r3
 800361e:	680b      	ldr	r3, [r1, #0]
 8003620:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003624:	2b01      	cmp	r3, #1
 8003626:	d10c      	bne.n	8003642 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d104      	bne.n	8003638 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800362e:	2100      	movs	r1, #0
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f959 	bl	80038e8 <USB_SetDevSpeed>
 8003636:	e018      	b.n	800366a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003638:	2101      	movs	r1, #1
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f954 	bl	80038e8 <USB_SetDevSpeed>
 8003640:	e013      	b.n	800366a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	2b03      	cmp	r3, #3
 8003646:	d10c      	bne.n	8003662 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d104      	bne.n	8003658 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800364e:	2100      	movs	r1, #0
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f949 	bl	80038e8 <USB_SetDevSpeed>
 8003656:	e008      	b.n	800366a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003658:	2101      	movs	r1, #1
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f944 	bl	80038e8 <USB_SetDevSpeed>
 8003660:	e003      	b.n	800366a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003662:	2103      	movs	r1, #3
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f93f 	bl	80038e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800366a:	2110      	movs	r1, #16
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f8f3 	bl	8003858 <USB_FlushTxFifo>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f911 	bl	80038a4 <USB_FlushRxFifo>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003692:	461a      	mov	r2, r3
 8003694:	2300      	movs	r3, #0
 8003696:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369e:	461a      	mov	r2, r3
 80036a0:	2300      	movs	r3, #0
 80036a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036aa:	461a      	mov	r2, r3
 80036ac:	2300      	movs	r3, #0
 80036ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	e043      	b.n	800373e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036cc:	d118      	bne.n	8003700 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10a      	bne.n	80036ea <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e0:	461a      	mov	r2, r3
 80036e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	e013      	b.n	8003712 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f6:	461a      	mov	r2, r3
 80036f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	e008      	b.n	8003712 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370c:	461a      	mov	r2, r3
 800370e:	2300      	movs	r3, #0
 8003710:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371e:	461a      	mov	r2, r3
 8003720:	2300      	movs	r3, #0
 8003722:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003730:	461a      	mov	r2, r3
 8003732:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003736:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	3301      	adds	r3, #1
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	429a      	cmp	r2, r3
 8003744:	d3b7      	bcc.n	80036b6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	e043      	b.n	80037d4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800375e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003762:	d118      	bne.n	8003796 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4413      	add	r3, r2
 8003772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003776:	461a      	mov	r2, r3
 8003778:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e013      	b.n	80037a8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378c:	461a      	mov	r2, r3
 800378e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	e008      	b.n	80037a8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a2:	461a      	mov	r2, r3
 80037a4:	2300      	movs	r3, #0
 80037a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b4:	461a      	mov	r2, r3
 80037b6:	2300      	movs	r3, #0
 80037b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c6:	461a      	mov	r2, r3
 80037c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	3301      	adds	r3, #1
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d3b7      	bcc.n	800374c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80037fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	2b00      	cmp	r3, #0
 8003802:	d105      	bne.n	8003810 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f043 0210 	orr.w	r2, r3, #16
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699a      	ldr	r2, [r3, #24]
 8003814:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <USB_DevInit+0x2d4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800381c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f043 0208 	orr.w	r2, r3, #8
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800382e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d105      	bne.n	8003840 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699a      	ldr	r2, [r3, #24]
 8003838:	4b06      	ldr	r3, [pc, #24]	; (8003854 <USB_DevInit+0x2d8>)
 800383a:	4313      	orrs	r3, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003840:	7dfb      	ldrb	r3, [r7, #23]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800384c:	b004      	add	sp, #16
 800384e:	4770      	bx	lr
 8003850:	803c3800 	.word	0x803c3800
 8003854:	40000004 	.word	0x40000004

08003858 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	019b      	lsls	r3, r3, #6
 800386a:	f043 0220 	orr.w	r2, r3, #32
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3301      	adds	r3, #1
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4a09      	ldr	r2, [pc, #36]	; (80038a0 <USB_FlushTxFifo+0x48>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e006      	b.n	8003892 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b20      	cmp	r3, #32
 800388e:	d0f0      	beq.n	8003872 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	00030d40 	.word	0x00030d40

080038a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2210      	movs	r2, #16
 80038b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3301      	adds	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <USB_FlushRxFifo+0x40>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e006      	b.n	80038d6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b10      	cmp	r3, #16
 80038d2:	d0f0      	beq.n	80038b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	00030d40 	.word	0x00030d40

080038e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	68f9      	ldr	r1, [r7, #12]
 8003904:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003908:	4313      	orrs	r3, r2
 800390a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003934:	f043 0302 	orr.w	r3, r3, #2
 8003938:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800393a:	2003      	movs	r0, #3
 800393c:	f7fd fb3a 	bl	8000fb4 <HAL_Delay>

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3301      	adds	r3, #1
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a13      	ldr	r2, [pc, #76]	; (80039b0 <USB_CoreReset+0x64>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d901      	bls.n	800396a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e01b      	b.n	80039a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	daf2      	bge.n	8003958 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3301      	adds	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4a09      	ldr	r2, [pc, #36]	; (80039b0 <USB_CoreReset+0x64>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e006      	b.n	80039a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d0f0      	beq.n	8003982 <USB_CoreReset+0x36>

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	00030d40 	.word	0x00030d40

080039b4 <__errno>:
 80039b4:	4b01      	ldr	r3, [pc, #4]	; (80039bc <__errno+0x8>)
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	2000000c 	.word	0x2000000c

080039c0 <__libc_init_array>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	4e0d      	ldr	r6, [pc, #52]	; (80039f8 <__libc_init_array+0x38>)
 80039c4:	4c0d      	ldr	r4, [pc, #52]	; (80039fc <__libc_init_array+0x3c>)
 80039c6:	1ba4      	subs	r4, r4, r6
 80039c8:	10a4      	asrs	r4, r4, #2
 80039ca:	2500      	movs	r5, #0
 80039cc:	42a5      	cmp	r5, r4
 80039ce:	d109      	bne.n	80039e4 <__libc_init_array+0x24>
 80039d0:	4e0b      	ldr	r6, [pc, #44]	; (8003a00 <__libc_init_array+0x40>)
 80039d2:	4c0c      	ldr	r4, [pc, #48]	; (8003a04 <__libc_init_array+0x44>)
 80039d4:	f000 fc26 	bl	8004224 <_init>
 80039d8:	1ba4      	subs	r4, r4, r6
 80039da:	10a4      	asrs	r4, r4, #2
 80039dc:	2500      	movs	r5, #0
 80039de:	42a5      	cmp	r5, r4
 80039e0:	d105      	bne.n	80039ee <__libc_init_array+0x2e>
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
 80039e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039e8:	4798      	blx	r3
 80039ea:	3501      	adds	r5, #1
 80039ec:	e7ee      	b.n	80039cc <__libc_init_array+0xc>
 80039ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039f2:	4798      	blx	r3
 80039f4:	3501      	adds	r5, #1
 80039f6:	e7f2      	b.n	80039de <__libc_init_array+0x1e>
 80039f8:	080042fc 	.word	0x080042fc
 80039fc:	080042fc 	.word	0x080042fc
 8003a00:	080042fc 	.word	0x080042fc
 8003a04:	08004300 	.word	0x08004300

08003a08 <memset>:
 8003a08:	4402      	add	r2, r0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d100      	bne.n	8003a12 <memset+0xa>
 8003a10:	4770      	bx	lr
 8003a12:	f803 1b01 	strb.w	r1, [r3], #1
 8003a16:	e7f9      	b.n	8003a0c <memset+0x4>

08003a18 <siprintf>:
 8003a18:	b40e      	push	{r1, r2, r3}
 8003a1a:	b500      	push	{lr}
 8003a1c:	b09c      	sub	sp, #112	; 0x70
 8003a1e:	ab1d      	add	r3, sp, #116	; 0x74
 8003a20:	9002      	str	r0, [sp, #8]
 8003a22:	9006      	str	r0, [sp, #24]
 8003a24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a28:	4809      	ldr	r0, [pc, #36]	; (8003a50 <siprintf+0x38>)
 8003a2a:	9107      	str	r1, [sp, #28]
 8003a2c:	9104      	str	r1, [sp, #16]
 8003a2e:	4909      	ldr	r1, [pc, #36]	; (8003a54 <siprintf+0x3c>)
 8003a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a34:	9105      	str	r1, [sp, #20]
 8003a36:	6800      	ldr	r0, [r0, #0]
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	a902      	add	r1, sp, #8
 8003a3c:	f000 f866 	bl	8003b0c <_svfiprintf_r>
 8003a40:	9b02      	ldr	r3, [sp, #8]
 8003a42:	2200      	movs	r2, #0
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	b01c      	add	sp, #112	; 0x70
 8003a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a4c:	b003      	add	sp, #12
 8003a4e:	4770      	bx	lr
 8003a50:	2000000c 	.word	0x2000000c
 8003a54:	ffff0208 	.word	0xffff0208

08003a58 <__ssputs_r>:
 8003a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a5c:	688e      	ldr	r6, [r1, #8]
 8003a5e:	429e      	cmp	r6, r3
 8003a60:	4682      	mov	sl, r0
 8003a62:	460c      	mov	r4, r1
 8003a64:	4690      	mov	r8, r2
 8003a66:	4699      	mov	r9, r3
 8003a68:	d837      	bhi.n	8003ada <__ssputs_r+0x82>
 8003a6a:	898a      	ldrh	r2, [r1, #12]
 8003a6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a70:	d031      	beq.n	8003ad6 <__ssputs_r+0x7e>
 8003a72:	6825      	ldr	r5, [r4, #0]
 8003a74:	6909      	ldr	r1, [r1, #16]
 8003a76:	1a6f      	subs	r7, r5, r1
 8003a78:	6965      	ldr	r5, [r4, #20]
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a80:	fb95 f5f3 	sdiv	r5, r5, r3
 8003a84:	f109 0301 	add.w	r3, r9, #1
 8003a88:	443b      	add	r3, r7
 8003a8a:	429d      	cmp	r5, r3
 8003a8c:	bf38      	it	cc
 8003a8e:	461d      	movcc	r5, r3
 8003a90:	0553      	lsls	r3, r2, #21
 8003a92:	d530      	bpl.n	8003af6 <__ssputs_r+0x9e>
 8003a94:	4629      	mov	r1, r5
 8003a96:	f000 fb2b 	bl	80040f0 <_malloc_r>
 8003a9a:	4606      	mov	r6, r0
 8003a9c:	b950      	cbnz	r0, 8003ab4 <__ssputs_r+0x5c>
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	f8ca 3000 	str.w	r3, [sl]
 8003aa4:	89a3      	ldrh	r3, [r4, #12]
 8003aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aaa:	81a3      	strh	r3, [r4, #12]
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab4:	463a      	mov	r2, r7
 8003ab6:	6921      	ldr	r1, [r4, #16]
 8003ab8:	f000 faa8 	bl	800400c <memcpy>
 8003abc:	89a3      	ldrh	r3, [r4, #12]
 8003abe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac6:	81a3      	strh	r3, [r4, #12]
 8003ac8:	6126      	str	r6, [r4, #16]
 8003aca:	6165      	str	r5, [r4, #20]
 8003acc:	443e      	add	r6, r7
 8003ace:	1bed      	subs	r5, r5, r7
 8003ad0:	6026      	str	r6, [r4, #0]
 8003ad2:	60a5      	str	r5, [r4, #8]
 8003ad4:	464e      	mov	r6, r9
 8003ad6:	454e      	cmp	r6, r9
 8003ad8:	d900      	bls.n	8003adc <__ssputs_r+0x84>
 8003ada:	464e      	mov	r6, r9
 8003adc:	4632      	mov	r2, r6
 8003ade:	4641      	mov	r1, r8
 8003ae0:	6820      	ldr	r0, [r4, #0]
 8003ae2:	f000 fa9e 	bl	8004022 <memmove>
 8003ae6:	68a3      	ldr	r3, [r4, #8]
 8003ae8:	1b9b      	subs	r3, r3, r6
 8003aea:	60a3      	str	r3, [r4, #8]
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	441e      	add	r6, r3
 8003af0:	6026      	str	r6, [r4, #0]
 8003af2:	2000      	movs	r0, #0
 8003af4:	e7dc      	b.n	8003ab0 <__ssputs_r+0x58>
 8003af6:	462a      	mov	r2, r5
 8003af8:	f000 fb54 	bl	80041a4 <_realloc_r>
 8003afc:	4606      	mov	r6, r0
 8003afe:	2800      	cmp	r0, #0
 8003b00:	d1e2      	bne.n	8003ac8 <__ssputs_r+0x70>
 8003b02:	6921      	ldr	r1, [r4, #16]
 8003b04:	4650      	mov	r0, sl
 8003b06:	f000 faa5 	bl	8004054 <_free_r>
 8003b0a:	e7c8      	b.n	8003a9e <__ssputs_r+0x46>

08003b0c <_svfiprintf_r>:
 8003b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b10:	461d      	mov	r5, r3
 8003b12:	898b      	ldrh	r3, [r1, #12]
 8003b14:	061f      	lsls	r7, r3, #24
 8003b16:	b09d      	sub	sp, #116	; 0x74
 8003b18:	4680      	mov	r8, r0
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	4616      	mov	r6, r2
 8003b1e:	d50f      	bpl.n	8003b40 <_svfiprintf_r+0x34>
 8003b20:	690b      	ldr	r3, [r1, #16]
 8003b22:	b96b      	cbnz	r3, 8003b40 <_svfiprintf_r+0x34>
 8003b24:	2140      	movs	r1, #64	; 0x40
 8003b26:	f000 fae3 	bl	80040f0 <_malloc_r>
 8003b2a:	6020      	str	r0, [r4, #0]
 8003b2c:	6120      	str	r0, [r4, #16]
 8003b2e:	b928      	cbnz	r0, 8003b3c <_svfiprintf_r+0x30>
 8003b30:	230c      	movs	r3, #12
 8003b32:	f8c8 3000 	str.w	r3, [r8]
 8003b36:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3a:	e0c8      	b.n	8003cce <_svfiprintf_r+0x1c2>
 8003b3c:	2340      	movs	r3, #64	; 0x40
 8003b3e:	6163      	str	r3, [r4, #20]
 8003b40:	2300      	movs	r3, #0
 8003b42:	9309      	str	r3, [sp, #36]	; 0x24
 8003b44:	2320      	movs	r3, #32
 8003b46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b4a:	2330      	movs	r3, #48	; 0x30
 8003b4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b50:	9503      	str	r5, [sp, #12]
 8003b52:	f04f 0b01 	mov.w	fp, #1
 8003b56:	4637      	mov	r7, r6
 8003b58:	463d      	mov	r5, r7
 8003b5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b5e:	b10b      	cbz	r3, 8003b64 <_svfiprintf_r+0x58>
 8003b60:	2b25      	cmp	r3, #37	; 0x25
 8003b62:	d13e      	bne.n	8003be2 <_svfiprintf_r+0xd6>
 8003b64:	ebb7 0a06 	subs.w	sl, r7, r6
 8003b68:	d00b      	beq.n	8003b82 <_svfiprintf_r+0x76>
 8003b6a:	4653      	mov	r3, sl
 8003b6c:	4632      	mov	r2, r6
 8003b6e:	4621      	mov	r1, r4
 8003b70:	4640      	mov	r0, r8
 8003b72:	f7ff ff71 	bl	8003a58 <__ssputs_r>
 8003b76:	3001      	adds	r0, #1
 8003b78:	f000 80a4 	beq.w	8003cc4 <_svfiprintf_r+0x1b8>
 8003b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b7e:	4453      	add	r3, sl
 8003b80:	9309      	str	r3, [sp, #36]	; 0x24
 8003b82:	783b      	ldrb	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 809d 	beq.w	8003cc4 <_svfiprintf_r+0x1b8>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b94:	9304      	str	r3, [sp, #16]
 8003b96:	9307      	str	r3, [sp, #28]
 8003b98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b9c:	931a      	str	r3, [sp, #104]	; 0x68
 8003b9e:	462f      	mov	r7, r5
 8003ba0:	2205      	movs	r2, #5
 8003ba2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003ba6:	4850      	ldr	r0, [pc, #320]	; (8003ce8 <_svfiprintf_r+0x1dc>)
 8003ba8:	f7fc fb3a 	bl	8000220 <memchr>
 8003bac:	9b04      	ldr	r3, [sp, #16]
 8003bae:	b9d0      	cbnz	r0, 8003be6 <_svfiprintf_r+0xda>
 8003bb0:	06d9      	lsls	r1, r3, #27
 8003bb2:	bf44      	itt	mi
 8003bb4:	2220      	movmi	r2, #32
 8003bb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bba:	071a      	lsls	r2, r3, #28
 8003bbc:	bf44      	itt	mi
 8003bbe:	222b      	movmi	r2, #43	; 0x2b
 8003bc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bc4:	782a      	ldrb	r2, [r5, #0]
 8003bc6:	2a2a      	cmp	r2, #42	; 0x2a
 8003bc8:	d015      	beq.n	8003bf6 <_svfiprintf_r+0xea>
 8003bca:	9a07      	ldr	r2, [sp, #28]
 8003bcc:	462f      	mov	r7, r5
 8003bce:	2000      	movs	r0, #0
 8003bd0:	250a      	movs	r5, #10
 8003bd2:	4639      	mov	r1, r7
 8003bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bd8:	3b30      	subs	r3, #48	; 0x30
 8003bda:	2b09      	cmp	r3, #9
 8003bdc:	d94d      	bls.n	8003c7a <_svfiprintf_r+0x16e>
 8003bde:	b1b8      	cbz	r0, 8003c10 <_svfiprintf_r+0x104>
 8003be0:	e00f      	b.n	8003c02 <_svfiprintf_r+0xf6>
 8003be2:	462f      	mov	r7, r5
 8003be4:	e7b8      	b.n	8003b58 <_svfiprintf_r+0x4c>
 8003be6:	4a40      	ldr	r2, [pc, #256]	; (8003ce8 <_svfiprintf_r+0x1dc>)
 8003be8:	1a80      	subs	r0, r0, r2
 8003bea:	fa0b f000 	lsl.w	r0, fp, r0
 8003bee:	4318      	orrs	r0, r3
 8003bf0:	9004      	str	r0, [sp, #16]
 8003bf2:	463d      	mov	r5, r7
 8003bf4:	e7d3      	b.n	8003b9e <_svfiprintf_r+0x92>
 8003bf6:	9a03      	ldr	r2, [sp, #12]
 8003bf8:	1d11      	adds	r1, r2, #4
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	9103      	str	r1, [sp, #12]
 8003bfe:	2a00      	cmp	r2, #0
 8003c00:	db01      	blt.n	8003c06 <_svfiprintf_r+0xfa>
 8003c02:	9207      	str	r2, [sp, #28]
 8003c04:	e004      	b.n	8003c10 <_svfiprintf_r+0x104>
 8003c06:	4252      	negs	r2, r2
 8003c08:	f043 0302 	orr.w	r3, r3, #2
 8003c0c:	9207      	str	r2, [sp, #28]
 8003c0e:	9304      	str	r3, [sp, #16]
 8003c10:	783b      	ldrb	r3, [r7, #0]
 8003c12:	2b2e      	cmp	r3, #46	; 0x2e
 8003c14:	d10c      	bne.n	8003c30 <_svfiprintf_r+0x124>
 8003c16:	787b      	ldrb	r3, [r7, #1]
 8003c18:	2b2a      	cmp	r3, #42	; 0x2a
 8003c1a:	d133      	bne.n	8003c84 <_svfiprintf_r+0x178>
 8003c1c:	9b03      	ldr	r3, [sp, #12]
 8003c1e:	1d1a      	adds	r2, r3, #4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	9203      	str	r2, [sp, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bfb8      	it	lt
 8003c28:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c2c:	3702      	adds	r7, #2
 8003c2e:	9305      	str	r3, [sp, #20]
 8003c30:	4d2e      	ldr	r5, [pc, #184]	; (8003cec <_svfiprintf_r+0x1e0>)
 8003c32:	7839      	ldrb	r1, [r7, #0]
 8003c34:	2203      	movs	r2, #3
 8003c36:	4628      	mov	r0, r5
 8003c38:	f7fc faf2 	bl	8000220 <memchr>
 8003c3c:	b138      	cbz	r0, 8003c4e <_svfiprintf_r+0x142>
 8003c3e:	2340      	movs	r3, #64	; 0x40
 8003c40:	1b40      	subs	r0, r0, r5
 8003c42:	fa03 f000 	lsl.w	r0, r3, r0
 8003c46:	9b04      	ldr	r3, [sp, #16]
 8003c48:	4303      	orrs	r3, r0
 8003c4a:	3701      	adds	r7, #1
 8003c4c:	9304      	str	r3, [sp, #16]
 8003c4e:	7839      	ldrb	r1, [r7, #0]
 8003c50:	4827      	ldr	r0, [pc, #156]	; (8003cf0 <_svfiprintf_r+0x1e4>)
 8003c52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c56:	2206      	movs	r2, #6
 8003c58:	1c7e      	adds	r6, r7, #1
 8003c5a:	f7fc fae1 	bl	8000220 <memchr>
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d038      	beq.n	8003cd4 <_svfiprintf_r+0x1c8>
 8003c62:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <_svfiprintf_r+0x1e8>)
 8003c64:	bb13      	cbnz	r3, 8003cac <_svfiprintf_r+0x1a0>
 8003c66:	9b03      	ldr	r3, [sp, #12]
 8003c68:	3307      	adds	r3, #7
 8003c6a:	f023 0307 	bic.w	r3, r3, #7
 8003c6e:	3308      	adds	r3, #8
 8003c70:	9303      	str	r3, [sp, #12]
 8003c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c74:	444b      	add	r3, r9
 8003c76:	9309      	str	r3, [sp, #36]	; 0x24
 8003c78:	e76d      	b.n	8003b56 <_svfiprintf_r+0x4a>
 8003c7a:	fb05 3202 	mla	r2, r5, r2, r3
 8003c7e:	2001      	movs	r0, #1
 8003c80:	460f      	mov	r7, r1
 8003c82:	e7a6      	b.n	8003bd2 <_svfiprintf_r+0xc6>
 8003c84:	2300      	movs	r3, #0
 8003c86:	3701      	adds	r7, #1
 8003c88:	9305      	str	r3, [sp, #20]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	250a      	movs	r5, #10
 8003c8e:	4638      	mov	r0, r7
 8003c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c94:	3a30      	subs	r2, #48	; 0x30
 8003c96:	2a09      	cmp	r2, #9
 8003c98:	d903      	bls.n	8003ca2 <_svfiprintf_r+0x196>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0c8      	beq.n	8003c30 <_svfiprintf_r+0x124>
 8003c9e:	9105      	str	r1, [sp, #20]
 8003ca0:	e7c6      	b.n	8003c30 <_svfiprintf_r+0x124>
 8003ca2:	fb05 2101 	mla	r1, r5, r1, r2
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	4607      	mov	r7, r0
 8003caa:	e7f0      	b.n	8003c8e <_svfiprintf_r+0x182>
 8003cac:	ab03      	add	r3, sp, #12
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	4622      	mov	r2, r4
 8003cb2:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <_svfiprintf_r+0x1ec>)
 8003cb4:	a904      	add	r1, sp, #16
 8003cb6:	4640      	mov	r0, r8
 8003cb8:	f3af 8000 	nop.w
 8003cbc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003cc0:	4681      	mov	r9, r0
 8003cc2:	d1d6      	bne.n	8003c72 <_svfiprintf_r+0x166>
 8003cc4:	89a3      	ldrh	r3, [r4, #12]
 8003cc6:	065b      	lsls	r3, r3, #25
 8003cc8:	f53f af35 	bmi.w	8003b36 <_svfiprintf_r+0x2a>
 8003ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cce:	b01d      	add	sp, #116	; 0x74
 8003cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd4:	ab03      	add	r3, sp, #12
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	4622      	mov	r2, r4
 8003cda:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <_svfiprintf_r+0x1ec>)
 8003cdc:	a904      	add	r1, sp, #16
 8003cde:	4640      	mov	r0, r8
 8003ce0:	f000 f882 	bl	8003de8 <_printf_i>
 8003ce4:	e7ea      	b.n	8003cbc <_svfiprintf_r+0x1b0>
 8003ce6:	bf00      	nop
 8003ce8:	080042c0 	.word	0x080042c0
 8003cec:	080042c6 	.word	0x080042c6
 8003cf0:	080042ca 	.word	0x080042ca
 8003cf4:	00000000 	.word	0x00000000
 8003cf8:	08003a59 	.word	0x08003a59

08003cfc <_printf_common>:
 8003cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d00:	4691      	mov	r9, r2
 8003d02:	461f      	mov	r7, r3
 8003d04:	688a      	ldr	r2, [r1, #8]
 8003d06:	690b      	ldr	r3, [r1, #16]
 8003d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	bfb8      	it	lt
 8003d10:	4613      	movlt	r3, r2
 8003d12:	f8c9 3000 	str.w	r3, [r9]
 8003d16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d1a:	4606      	mov	r6, r0
 8003d1c:	460c      	mov	r4, r1
 8003d1e:	b112      	cbz	r2, 8003d26 <_printf_common+0x2a>
 8003d20:	3301      	adds	r3, #1
 8003d22:	f8c9 3000 	str.w	r3, [r9]
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	0699      	lsls	r1, r3, #26
 8003d2a:	bf42      	ittt	mi
 8003d2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d30:	3302      	addmi	r3, #2
 8003d32:	f8c9 3000 	strmi.w	r3, [r9]
 8003d36:	6825      	ldr	r5, [r4, #0]
 8003d38:	f015 0506 	ands.w	r5, r5, #6
 8003d3c:	d107      	bne.n	8003d4e <_printf_common+0x52>
 8003d3e:	f104 0a19 	add.w	sl, r4, #25
 8003d42:	68e3      	ldr	r3, [r4, #12]
 8003d44:	f8d9 2000 	ldr.w	r2, [r9]
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	42ab      	cmp	r3, r5
 8003d4c:	dc28      	bgt.n	8003da0 <_printf_common+0xa4>
 8003d4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d52:	6822      	ldr	r2, [r4, #0]
 8003d54:	3300      	adds	r3, #0
 8003d56:	bf18      	it	ne
 8003d58:	2301      	movne	r3, #1
 8003d5a:	0692      	lsls	r2, r2, #26
 8003d5c:	d42d      	bmi.n	8003dba <_printf_common+0xbe>
 8003d5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d62:	4639      	mov	r1, r7
 8003d64:	4630      	mov	r0, r6
 8003d66:	47c0      	blx	r8
 8003d68:	3001      	adds	r0, #1
 8003d6a:	d020      	beq.n	8003dae <_printf_common+0xb2>
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	68e5      	ldr	r5, [r4, #12]
 8003d70:	f8d9 2000 	ldr.w	r2, [r9]
 8003d74:	f003 0306 	and.w	r3, r3, #6
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	bf08      	it	eq
 8003d7c:	1aad      	subeq	r5, r5, r2
 8003d7e:	68a3      	ldr	r3, [r4, #8]
 8003d80:	6922      	ldr	r2, [r4, #16]
 8003d82:	bf0c      	ite	eq
 8003d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d88:	2500      	movne	r5, #0
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	bfc4      	itt	gt
 8003d8e:	1a9b      	subgt	r3, r3, r2
 8003d90:	18ed      	addgt	r5, r5, r3
 8003d92:	f04f 0900 	mov.w	r9, #0
 8003d96:	341a      	adds	r4, #26
 8003d98:	454d      	cmp	r5, r9
 8003d9a:	d11a      	bne.n	8003dd2 <_printf_common+0xd6>
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	e008      	b.n	8003db2 <_printf_common+0xb6>
 8003da0:	2301      	movs	r3, #1
 8003da2:	4652      	mov	r2, sl
 8003da4:	4639      	mov	r1, r7
 8003da6:	4630      	mov	r0, r6
 8003da8:	47c0      	blx	r8
 8003daa:	3001      	adds	r0, #1
 8003dac:	d103      	bne.n	8003db6 <_printf_common+0xba>
 8003dae:	f04f 30ff 	mov.w	r0, #4294967295
 8003db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db6:	3501      	adds	r5, #1
 8003db8:	e7c3      	b.n	8003d42 <_printf_common+0x46>
 8003dba:	18e1      	adds	r1, r4, r3
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	2030      	movs	r0, #48	; 0x30
 8003dc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dc4:	4422      	add	r2, r4
 8003dc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dce:	3302      	adds	r3, #2
 8003dd0:	e7c5      	b.n	8003d5e <_printf_common+0x62>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4622      	mov	r2, r4
 8003dd6:	4639      	mov	r1, r7
 8003dd8:	4630      	mov	r0, r6
 8003dda:	47c0      	blx	r8
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d0e6      	beq.n	8003dae <_printf_common+0xb2>
 8003de0:	f109 0901 	add.w	r9, r9, #1
 8003de4:	e7d8      	b.n	8003d98 <_printf_common+0x9c>
	...

08003de8 <_printf_i>:
 8003de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003dec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003df0:	460c      	mov	r4, r1
 8003df2:	7e09      	ldrb	r1, [r1, #24]
 8003df4:	b085      	sub	sp, #20
 8003df6:	296e      	cmp	r1, #110	; 0x6e
 8003df8:	4617      	mov	r7, r2
 8003dfa:	4606      	mov	r6, r0
 8003dfc:	4698      	mov	r8, r3
 8003dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e00:	f000 80b3 	beq.w	8003f6a <_printf_i+0x182>
 8003e04:	d822      	bhi.n	8003e4c <_printf_i+0x64>
 8003e06:	2963      	cmp	r1, #99	; 0x63
 8003e08:	d036      	beq.n	8003e78 <_printf_i+0x90>
 8003e0a:	d80a      	bhi.n	8003e22 <_printf_i+0x3a>
 8003e0c:	2900      	cmp	r1, #0
 8003e0e:	f000 80b9 	beq.w	8003f84 <_printf_i+0x19c>
 8003e12:	2958      	cmp	r1, #88	; 0x58
 8003e14:	f000 8083 	beq.w	8003f1e <_printf_i+0x136>
 8003e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003e20:	e032      	b.n	8003e88 <_printf_i+0xa0>
 8003e22:	2964      	cmp	r1, #100	; 0x64
 8003e24:	d001      	beq.n	8003e2a <_printf_i+0x42>
 8003e26:	2969      	cmp	r1, #105	; 0x69
 8003e28:	d1f6      	bne.n	8003e18 <_printf_i+0x30>
 8003e2a:	6820      	ldr	r0, [r4, #0]
 8003e2c:	6813      	ldr	r3, [r2, #0]
 8003e2e:	0605      	lsls	r5, r0, #24
 8003e30:	f103 0104 	add.w	r1, r3, #4
 8003e34:	d52a      	bpl.n	8003e8c <_printf_i+0xa4>
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6011      	str	r1, [r2, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	da03      	bge.n	8003e46 <_printf_i+0x5e>
 8003e3e:	222d      	movs	r2, #45	; 0x2d
 8003e40:	425b      	negs	r3, r3
 8003e42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003e46:	486f      	ldr	r0, [pc, #444]	; (8004004 <_printf_i+0x21c>)
 8003e48:	220a      	movs	r2, #10
 8003e4a:	e039      	b.n	8003ec0 <_printf_i+0xd8>
 8003e4c:	2973      	cmp	r1, #115	; 0x73
 8003e4e:	f000 809d 	beq.w	8003f8c <_printf_i+0x1a4>
 8003e52:	d808      	bhi.n	8003e66 <_printf_i+0x7e>
 8003e54:	296f      	cmp	r1, #111	; 0x6f
 8003e56:	d020      	beq.n	8003e9a <_printf_i+0xb2>
 8003e58:	2970      	cmp	r1, #112	; 0x70
 8003e5a:	d1dd      	bne.n	8003e18 <_printf_i+0x30>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	f043 0320 	orr.w	r3, r3, #32
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	e003      	b.n	8003e6e <_printf_i+0x86>
 8003e66:	2975      	cmp	r1, #117	; 0x75
 8003e68:	d017      	beq.n	8003e9a <_printf_i+0xb2>
 8003e6a:	2978      	cmp	r1, #120	; 0x78
 8003e6c:	d1d4      	bne.n	8003e18 <_printf_i+0x30>
 8003e6e:	2378      	movs	r3, #120	; 0x78
 8003e70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e74:	4864      	ldr	r0, [pc, #400]	; (8004008 <_printf_i+0x220>)
 8003e76:	e055      	b.n	8003f24 <_printf_i+0x13c>
 8003e78:	6813      	ldr	r3, [r2, #0]
 8003e7a:	1d19      	adds	r1, r3, #4
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6011      	str	r1, [r2, #0]
 8003e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e08c      	b.n	8003fa6 <_printf_i+0x1be>
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6011      	str	r1, [r2, #0]
 8003e90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e94:	bf18      	it	ne
 8003e96:	b21b      	sxthne	r3, r3
 8003e98:	e7cf      	b.n	8003e3a <_printf_i+0x52>
 8003e9a:	6813      	ldr	r3, [r2, #0]
 8003e9c:	6825      	ldr	r5, [r4, #0]
 8003e9e:	1d18      	adds	r0, r3, #4
 8003ea0:	6010      	str	r0, [r2, #0]
 8003ea2:	0628      	lsls	r0, r5, #24
 8003ea4:	d501      	bpl.n	8003eaa <_printf_i+0xc2>
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	e002      	b.n	8003eb0 <_printf_i+0xc8>
 8003eaa:	0668      	lsls	r0, r5, #25
 8003eac:	d5fb      	bpl.n	8003ea6 <_printf_i+0xbe>
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	4854      	ldr	r0, [pc, #336]	; (8004004 <_printf_i+0x21c>)
 8003eb2:	296f      	cmp	r1, #111	; 0x6f
 8003eb4:	bf14      	ite	ne
 8003eb6:	220a      	movne	r2, #10
 8003eb8:	2208      	moveq	r2, #8
 8003eba:	2100      	movs	r1, #0
 8003ebc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ec0:	6865      	ldr	r5, [r4, #4]
 8003ec2:	60a5      	str	r5, [r4, #8]
 8003ec4:	2d00      	cmp	r5, #0
 8003ec6:	f2c0 8095 	blt.w	8003ff4 <_printf_i+0x20c>
 8003eca:	6821      	ldr	r1, [r4, #0]
 8003ecc:	f021 0104 	bic.w	r1, r1, #4
 8003ed0:	6021      	str	r1, [r4, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d13d      	bne.n	8003f52 <_printf_i+0x16a>
 8003ed6:	2d00      	cmp	r5, #0
 8003ed8:	f040 808e 	bne.w	8003ff8 <_printf_i+0x210>
 8003edc:	4665      	mov	r5, ip
 8003ede:	2a08      	cmp	r2, #8
 8003ee0:	d10b      	bne.n	8003efa <_printf_i+0x112>
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	07db      	lsls	r3, r3, #31
 8003ee6:	d508      	bpl.n	8003efa <_printf_i+0x112>
 8003ee8:	6923      	ldr	r3, [r4, #16]
 8003eea:	6862      	ldr	r2, [r4, #4]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	bfde      	ittt	le
 8003ef0:	2330      	movle	r3, #48	; 0x30
 8003ef2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ef6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003efa:	ebac 0305 	sub.w	r3, ip, r5
 8003efe:	6123      	str	r3, [r4, #16]
 8003f00:	f8cd 8000 	str.w	r8, [sp]
 8003f04:	463b      	mov	r3, r7
 8003f06:	aa03      	add	r2, sp, #12
 8003f08:	4621      	mov	r1, r4
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f7ff fef6 	bl	8003cfc <_printf_common>
 8003f10:	3001      	adds	r0, #1
 8003f12:	d14d      	bne.n	8003fb0 <_printf_i+0x1c8>
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	b005      	add	sp, #20
 8003f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f1e:	4839      	ldr	r0, [pc, #228]	; (8004004 <_printf_i+0x21c>)
 8003f20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003f24:	6813      	ldr	r3, [r2, #0]
 8003f26:	6821      	ldr	r1, [r4, #0]
 8003f28:	1d1d      	adds	r5, r3, #4
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6015      	str	r5, [r2, #0]
 8003f2e:	060a      	lsls	r2, r1, #24
 8003f30:	d50b      	bpl.n	8003f4a <_printf_i+0x162>
 8003f32:	07ca      	lsls	r2, r1, #31
 8003f34:	bf44      	itt	mi
 8003f36:	f041 0120 	orrmi.w	r1, r1, #32
 8003f3a:	6021      	strmi	r1, [r4, #0]
 8003f3c:	b91b      	cbnz	r3, 8003f46 <_printf_i+0x15e>
 8003f3e:	6822      	ldr	r2, [r4, #0]
 8003f40:	f022 0220 	bic.w	r2, r2, #32
 8003f44:	6022      	str	r2, [r4, #0]
 8003f46:	2210      	movs	r2, #16
 8003f48:	e7b7      	b.n	8003eba <_printf_i+0xd2>
 8003f4a:	064d      	lsls	r5, r1, #25
 8003f4c:	bf48      	it	mi
 8003f4e:	b29b      	uxthmi	r3, r3
 8003f50:	e7ef      	b.n	8003f32 <_printf_i+0x14a>
 8003f52:	4665      	mov	r5, ip
 8003f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f58:	fb02 3311 	mls	r3, r2, r1, r3
 8003f5c:	5cc3      	ldrb	r3, [r0, r3]
 8003f5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f62:	460b      	mov	r3, r1
 8003f64:	2900      	cmp	r1, #0
 8003f66:	d1f5      	bne.n	8003f54 <_printf_i+0x16c>
 8003f68:	e7b9      	b.n	8003ede <_printf_i+0xf6>
 8003f6a:	6813      	ldr	r3, [r2, #0]
 8003f6c:	6825      	ldr	r5, [r4, #0]
 8003f6e:	6961      	ldr	r1, [r4, #20]
 8003f70:	1d18      	adds	r0, r3, #4
 8003f72:	6010      	str	r0, [r2, #0]
 8003f74:	0628      	lsls	r0, r5, #24
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	d501      	bpl.n	8003f7e <_printf_i+0x196>
 8003f7a:	6019      	str	r1, [r3, #0]
 8003f7c:	e002      	b.n	8003f84 <_printf_i+0x19c>
 8003f7e:	066a      	lsls	r2, r5, #25
 8003f80:	d5fb      	bpl.n	8003f7a <_printf_i+0x192>
 8003f82:	8019      	strh	r1, [r3, #0]
 8003f84:	2300      	movs	r3, #0
 8003f86:	6123      	str	r3, [r4, #16]
 8003f88:	4665      	mov	r5, ip
 8003f8a:	e7b9      	b.n	8003f00 <_printf_i+0x118>
 8003f8c:	6813      	ldr	r3, [r2, #0]
 8003f8e:	1d19      	adds	r1, r3, #4
 8003f90:	6011      	str	r1, [r2, #0]
 8003f92:	681d      	ldr	r5, [r3, #0]
 8003f94:	6862      	ldr	r2, [r4, #4]
 8003f96:	2100      	movs	r1, #0
 8003f98:	4628      	mov	r0, r5
 8003f9a:	f7fc f941 	bl	8000220 <memchr>
 8003f9e:	b108      	cbz	r0, 8003fa4 <_printf_i+0x1bc>
 8003fa0:	1b40      	subs	r0, r0, r5
 8003fa2:	6060      	str	r0, [r4, #4]
 8003fa4:	6863      	ldr	r3, [r4, #4]
 8003fa6:	6123      	str	r3, [r4, #16]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fae:	e7a7      	b.n	8003f00 <_printf_i+0x118>
 8003fb0:	6923      	ldr	r3, [r4, #16]
 8003fb2:	462a      	mov	r2, r5
 8003fb4:	4639      	mov	r1, r7
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	47c0      	blx	r8
 8003fba:	3001      	adds	r0, #1
 8003fbc:	d0aa      	beq.n	8003f14 <_printf_i+0x12c>
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	079b      	lsls	r3, r3, #30
 8003fc2:	d413      	bmi.n	8003fec <_printf_i+0x204>
 8003fc4:	68e0      	ldr	r0, [r4, #12]
 8003fc6:	9b03      	ldr	r3, [sp, #12]
 8003fc8:	4298      	cmp	r0, r3
 8003fca:	bfb8      	it	lt
 8003fcc:	4618      	movlt	r0, r3
 8003fce:	e7a3      	b.n	8003f18 <_printf_i+0x130>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	464a      	mov	r2, r9
 8003fd4:	4639      	mov	r1, r7
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	47c0      	blx	r8
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d09a      	beq.n	8003f14 <_printf_i+0x12c>
 8003fde:	3501      	adds	r5, #1
 8003fe0:	68e3      	ldr	r3, [r4, #12]
 8003fe2:	9a03      	ldr	r2, [sp, #12]
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	42ab      	cmp	r3, r5
 8003fe8:	dcf2      	bgt.n	8003fd0 <_printf_i+0x1e8>
 8003fea:	e7eb      	b.n	8003fc4 <_printf_i+0x1dc>
 8003fec:	2500      	movs	r5, #0
 8003fee:	f104 0919 	add.w	r9, r4, #25
 8003ff2:	e7f5      	b.n	8003fe0 <_printf_i+0x1f8>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1ac      	bne.n	8003f52 <_printf_i+0x16a>
 8003ff8:	7803      	ldrb	r3, [r0, #0]
 8003ffa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ffe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004002:	e76c      	b.n	8003ede <_printf_i+0xf6>
 8004004:	080042d1 	.word	0x080042d1
 8004008:	080042e2 	.word	0x080042e2

0800400c <memcpy>:
 800400c:	b510      	push	{r4, lr}
 800400e:	1e43      	subs	r3, r0, #1
 8004010:	440a      	add	r2, r1
 8004012:	4291      	cmp	r1, r2
 8004014:	d100      	bne.n	8004018 <memcpy+0xc>
 8004016:	bd10      	pop	{r4, pc}
 8004018:	f811 4b01 	ldrb.w	r4, [r1], #1
 800401c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004020:	e7f7      	b.n	8004012 <memcpy+0x6>

08004022 <memmove>:
 8004022:	4288      	cmp	r0, r1
 8004024:	b510      	push	{r4, lr}
 8004026:	eb01 0302 	add.w	r3, r1, r2
 800402a:	d807      	bhi.n	800403c <memmove+0x1a>
 800402c:	1e42      	subs	r2, r0, #1
 800402e:	4299      	cmp	r1, r3
 8004030:	d00a      	beq.n	8004048 <memmove+0x26>
 8004032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004036:	f802 4f01 	strb.w	r4, [r2, #1]!
 800403a:	e7f8      	b.n	800402e <memmove+0xc>
 800403c:	4283      	cmp	r3, r0
 800403e:	d9f5      	bls.n	800402c <memmove+0xa>
 8004040:	1881      	adds	r1, r0, r2
 8004042:	1ad2      	subs	r2, r2, r3
 8004044:	42d3      	cmn	r3, r2
 8004046:	d100      	bne.n	800404a <memmove+0x28>
 8004048:	bd10      	pop	{r4, pc}
 800404a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800404e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004052:	e7f7      	b.n	8004044 <memmove+0x22>

08004054 <_free_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4605      	mov	r5, r0
 8004058:	2900      	cmp	r1, #0
 800405a:	d045      	beq.n	80040e8 <_free_r+0x94>
 800405c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004060:	1f0c      	subs	r4, r1, #4
 8004062:	2b00      	cmp	r3, #0
 8004064:	bfb8      	it	lt
 8004066:	18e4      	addlt	r4, r4, r3
 8004068:	f000 f8d2 	bl	8004210 <__malloc_lock>
 800406c:	4a1f      	ldr	r2, [pc, #124]	; (80040ec <_free_r+0x98>)
 800406e:	6813      	ldr	r3, [r2, #0]
 8004070:	4610      	mov	r0, r2
 8004072:	b933      	cbnz	r3, 8004082 <_free_r+0x2e>
 8004074:	6063      	str	r3, [r4, #4]
 8004076:	6014      	str	r4, [r2, #0]
 8004078:	4628      	mov	r0, r5
 800407a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800407e:	f000 b8c8 	b.w	8004212 <__malloc_unlock>
 8004082:	42a3      	cmp	r3, r4
 8004084:	d90c      	bls.n	80040a0 <_free_r+0x4c>
 8004086:	6821      	ldr	r1, [r4, #0]
 8004088:	1862      	adds	r2, r4, r1
 800408a:	4293      	cmp	r3, r2
 800408c:	bf04      	itt	eq
 800408e:	681a      	ldreq	r2, [r3, #0]
 8004090:	685b      	ldreq	r3, [r3, #4]
 8004092:	6063      	str	r3, [r4, #4]
 8004094:	bf04      	itt	eq
 8004096:	1852      	addeq	r2, r2, r1
 8004098:	6022      	streq	r2, [r4, #0]
 800409a:	6004      	str	r4, [r0, #0]
 800409c:	e7ec      	b.n	8004078 <_free_r+0x24>
 800409e:	4613      	mov	r3, r2
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	b10a      	cbz	r2, 80040a8 <_free_r+0x54>
 80040a4:	42a2      	cmp	r2, r4
 80040a6:	d9fa      	bls.n	800409e <_free_r+0x4a>
 80040a8:	6819      	ldr	r1, [r3, #0]
 80040aa:	1858      	adds	r0, r3, r1
 80040ac:	42a0      	cmp	r0, r4
 80040ae:	d10b      	bne.n	80040c8 <_free_r+0x74>
 80040b0:	6820      	ldr	r0, [r4, #0]
 80040b2:	4401      	add	r1, r0
 80040b4:	1858      	adds	r0, r3, r1
 80040b6:	4282      	cmp	r2, r0
 80040b8:	6019      	str	r1, [r3, #0]
 80040ba:	d1dd      	bne.n	8004078 <_free_r+0x24>
 80040bc:	6810      	ldr	r0, [r2, #0]
 80040be:	6852      	ldr	r2, [r2, #4]
 80040c0:	605a      	str	r2, [r3, #4]
 80040c2:	4401      	add	r1, r0
 80040c4:	6019      	str	r1, [r3, #0]
 80040c6:	e7d7      	b.n	8004078 <_free_r+0x24>
 80040c8:	d902      	bls.n	80040d0 <_free_r+0x7c>
 80040ca:	230c      	movs	r3, #12
 80040cc:	602b      	str	r3, [r5, #0]
 80040ce:	e7d3      	b.n	8004078 <_free_r+0x24>
 80040d0:	6820      	ldr	r0, [r4, #0]
 80040d2:	1821      	adds	r1, r4, r0
 80040d4:	428a      	cmp	r2, r1
 80040d6:	bf04      	itt	eq
 80040d8:	6811      	ldreq	r1, [r2, #0]
 80040da:	6852      	ldreq	r2, [r2, #4]
 80040dc:	6062      	str	r2, [r4, #4]
 80040de:	bf04      	itt	eq
 80040e0:	1809      	addeq	r1, r1, r0
 80040e2:	6021      	streq	r1, [r4, #0]
 80040e4:	605c      	str	r4, [r3, #4]
 80040e6:	e7c7      	b.n	8004078 <_free_r+0x24>
 80040e8:	bd38      	pop	{r3, r4, r5, pc}
 80040ea:	bf00      	nop
 80040ec:	20000090 	.word	0x20000090

080040f0 <_malloc_r>:
 80040f0:	b570      	push	{r4, r5, r6, lr}
 80040f2:	1ccd      	adds	r5, r1, #3
 80040f4:	f025 0503 	bic.w	r5, r5, #3
 80040f8:	3508      	adds	r5, #8
 80040fa:	2d0c      	cmp	r5, #12
 80040fc:	bf38      	it	cc
 80040fe:	250c      	movcc	r5, #12
 8004100:	2d00      	cmp	r5, #0
 8004102:	4606      	mov	r6, r0
 8004104:	db01      	blt.n	800410a <_malloc_r+0x1a>
 8004106:	42a9      	cmp	r1, r5
 8004108:	d903      	bls.n	8004112 <_malloc_r+0x22>
 800410a:	230c      	movs	r3, #12
 800410c:	6033      	str	r3, [r6, #0]
 800410e:	2000      	movs	r0, #0
 8004110:	bd70      	pop	{r4, r5, r6, pc}
 8004112:	f000 f87d 	bl	8004210 <__malloc_lock>
 8004116:	4a21      	ldr	r2, [pc, #132]	; (800419c <_malloc_r+0xac>)
 8004118:	6814      	ldr	r4, [r2, #0]
 800411a:	4621      	mov	r1, r4
 800411c:	b991      	cbnz	r1, 8004144 <_malloc_r+0x54>
 800411e:	4c20      	ldr	r4, [pc, #128]	; (80041a0 <_malloc_r+0xb0>)
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	b91b      	cbnz	r3, 800412c <_malloc_r+0x3c>
 8004124:	4630      	mov	r0, r6
 8004126:	f000 f863 	bl	80041f0 <_sbrk_r>
 800412a:	6020      	str	r0, [r4, #0]
 800412c:	4629      	mov	r1, r5
 800412e:	4630      	mov	r0, r6
 8004130:	f000 f85e 	bl	80041f0 <_sbrk_r>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d124      	bne.n	8004182 <_malloc_r+0x92>
 8004138:	230c      	movs	r3, #12
 800413a:	6033      	str	r3, [r6, #0]
 800413c:	4630      	mov	r0, r6
 800413e:	f000 f868 	bl	8004212 <__malloc_unlock>
 8004142:	e7e4      	b.n	800410e <_malloc_r+0x1e>
 8004144:	680b      	ldr	r3, [r1, #0]
 8004146:	1b5b      	subs	r3, r3, r5
 8004148:	d418      	bmi.n	800417c <_malloc_r+0x8c>
 800414a:	2b0b      	cmp	r3, #11
 800414c:	d90f      	bls.n	800416e <_malloc_r+0x7e>
 800414e:	600b      	str	r3, [r1, #0]
 8004150:	50cd      	str	r5, [r1, r3]
 8004152:	18cc      	adds	r4, r1, r3
 8004154:	4630      	mov	r0, r6
 8004156:	f000 f85c 	bl	8004212 <__malloc_unlock>
 800415a:	f104 000b 	add.w	r0, r4, #11
 800415e:	1d23      	adds	r3, r4, #4
 8004160:	f020 0007 	bic.w	r0, r0, #7
 8004164:	1ac3      	subs	r3, r0, r3
 8004166:	d0d3      	beq.n	8004110 <_malloc_r+0x20>
 8004168:	425a      	negs	r2, r3
 800416a:	50e2      	str	r2, [r4, r3]
 800416c:	e7d0      	b.n	8004110 <_malloc_r+0x20>
 800416e:	428c      	cmp	r4, r1
 8004170:	684b      	ldr	r3, [r1, #4]
 8004172:	bf16      	itet	ne
 8004174:	6063      	strne	r3, [r4, #4]
 8004176:	6013      	streq	r3, [r2, #0]
 8004178:	460c      	movne	r4, r1
 800417a:	e7eb      	b.n	8004154 <_malloc_r+0x64>
 800417c:	460c      	mov	r4, r1
 800417e:	6849      	ldr	r1, [r1, #4]
 8004180:	e7cc      	b.n	800411c <_malloc_r+0x2c>
 8004182:	1cc4      	adds	r4, r0, #3
 8004184:	f024 0403 	bic.w	r4, r4, #3
 8004188:	42a0      	cmp	r0, r4
 800418a:	d005      	beq.n	8004198 <_malloc_r+0xa8>
 800418c:	1a21      	subs	r1, r4, r0
 800418e:	4630      	mov	r0, r6
 8004190:	f000 f82e 	bl	80041f0 <_sbrk_r>
 8004194:	3001      	adds	r0, #1
 8004196:	d0cf      	beq.n	8004138 <_malloc_r+0x48>
 8004198:	6025      	str	r5, [r4, #0]
 800419a:	e7db      	b.n	8004154 <_malloc_r+0x64>
 800419c:	20000090 	.word	0x20000090
 80041a0:	20000094 	.word	0x20000094

080041a4 <_realloc_r>:
 80041a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a6:	4607      	mov	r7, r0
 80041a8:	4614      	mov	r4, r2
 80041aa:	460e      	mov	r6, r1
 80041ac:	b921      	cbnz	r1, 80041b8 <_realloc_r+0x14>
 80041ae:	4611      	mov	r1, r2
 80041b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80041b4:	f7ff bf9c 	b.w	80040f0 <_malloc_r>
 80041b8:	b922      	cbnz	r2, 80041c4 <_realloc_r+0x20>
 80041ba:	f7ff ff4b 	bl	8004054 <_free_r>
 80041be:	4625      	mov	r5, r4
 80041c0:	4628      	mov	r0, r5
 80041c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041c4:	f000 f826 	bl	8004214 <_malloc_usable_size_r>
 80041c8:	42a0      	cmp	r0, r4
 80041ca:	d20f      	bcs.n	80041ec <_realloc_r+0x48>
 80041cc:	4621      	mov	r1, r4
 80041ce:	4638      	mov	r0, r7
 80041d0:	f7ff ff8e 	bl	80040f0 <_malloc_r>
 80041d4:	4605      	mov	r5, r0
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d0f2      	beq.n	80041c0 <_realloc_r+0x1c>
 80041da:	4631      	mov	r1, r6
 80041dc:	4622      	mov	r2, r4
 80041de:	f7ff ff15 	bl	800400c <memcpy>
 80041e2:	4631      	mov	r1, r6
 80041e4:	4638      	mov	r0, r7
 80041e6:	f7ff ff35 	bl	8004054 <_free_r>
 80041ea:	e7e9      	b.n	80041c0 <_realloc_r+0x1c>
 80041ec:	4635      	mov	r5, r6
 80041ee:	e7e7      	b.n	80041c0 <_realloc_r+0x1c>

080041f0 <_sbrk_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4c06      	ldr	r4, [pc, #24]	; (800420c <_sbrk_r+0x1c>)
 80041f4:	2300      	movs	r3, #0
 80041f6:	4605      	mov	r5, r0
 80041f8:	4608      	mov	r0, r1
 80041fa:	6023      	str	r3, [r4, #0]
 80041fc:	f7fc fe08 	bl	8000e10 <_sbrk>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_sbrk_r+0x1a>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	b103      	cbz	r3, 800420a <_sbrk_r+0x1a>
 8004208:	602b      	str	r3, [r5, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	2000052c 	.word	0x2000052c

08004210 <__malloc_lock>:
 8004210:	4770      	bx	lr

08004212 <__malloc_unlock>:
 8004212:	4770      	bx	lr

08004214 <_malloc_usable_size_r>:
 8004214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004218:	1f18      	subs	r0, r3, #4
 800421a:	2b00      	cmp	r3, #0
 800421c:	bfbc      	itt	lt
 800421e:	580b      	ldrlt	r3, [r1, r0]
 8004220:	18c0      	addlt	r0, r0, r3
 8004222:	4770      	bx	lr

08004224 <_init>:
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	bf00      	nop
 8004228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422a:	bc08      	pop	{r3}
 800422c:	469e      	mov	lr, r3
 800422e:	4770      	bx	lr

08004230 <_fini>:
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004232:	bf00      	nop
 8004234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004236:	bc08      	pop	{r3}
 8004238:	469e      	mov	lr, r3
 800423a:	4770      	bx	lr
