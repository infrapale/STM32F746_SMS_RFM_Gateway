
STM32F746_SMS_RFM_Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08006fd4  08006fd4  00016fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007250  08007250  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007250  08007250  00017250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007258  08007258  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800725c  0800725c  0001725c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005730  20000010  08007270  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005740  08007270  00025740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f295  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039eb  00000000  00000000  0003f2d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017b8  00000000  00000000  00042cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001610  00000000  00000000  00044478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028450  00000000  00000000  00045a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000136f9  00000000  00000000  0006ded8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fad72  00000000  00000000  000815d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017c343  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063e4  00000000  00000000  0017c3c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006fbc 	.word	0x08006fbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08006fbc 	.word	0x08006fbc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <ConsoleWr>:
}
void ConsoleSetPriority(enum console_priority c_p){
	console.priority = 	c_p;
}

void ConsoleWr(enum console_priority c_priority, char *txt, uint8_t newline){
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	6039      	str	r1, [r7, #0]
 800052a:	71fb      	strb	r3, [r7, #7]
 800052c:	4613      	mov	r3, r2
 800052e:	71bb      	strb	r3, [r7, #6]
	//if (c_priority >= console.priority){
	if CONSOLE_PRIORITY_IS_OK(c_priority){
 8000530:	4b0e      	ldr	r3, [pc, #56]	; (800056c <ConsoleWr+0x4c>)
 8000532:	791b      	ldrb	r3, [r3, #4]
 8000534:	79fa      	ldrb	r2, [r7, #7]
 8000536:	429a      	cmp	r2, r3
 8000538:	d313      	bcc.n	8000562 <ConsoleWr+0x42>
		HAL_UART_Transmit(console.p_uart, (uint8_t*)txt, strlen(txt),HAL_MAX_DELAY);
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <ConsoleWr+0x4c>)
 800053c:	681c      	ldr	r4, [r3, #0]
 800053e:	6838      	ldr	r0, [r7, #0]
 8000540:	f7ff fe66 	bl	8000210 <strlen>
 8000544:	4603      	mov	r3, r0
 8000546:	b29a      	uxth	r2, r3
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
 800054c:	6839      	ldr	r1, [r7, #0]
 800054e:	4620      	mov	r0, r4
 8000550:	f002 fcf2 	bl	8002f38 <HAL_UART_Transmit>
		if (newline) {
 8000554:	79bb      	ldrb	r3, [r7, #6]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d003      	beq.n	8000562 <ConsoleWr+0x42>
			ConsoleNewline(c_priority);
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	4618      	mov	r0, r3
 800055e:	f000 f807 	bl	8000570 <ConsoleNewline>
		}
	}
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	bd90      	pop	{r4, r7, pc}
 800056a:	bf00      	nop
 800056c:	20004934 	.word	0x20004934

08000570 <ConsoleNewline>:
	if CONSOLE_PRIORITY_IS_OK(c_priority){
		HAL_UART_Transmit(console.p_uart, (char *) &c, 1,HAL_MAX_DELAY);
	}
}

void ConsoleNewline(enum console_priority c_priority){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	if (c_priority >= console.priority){
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <ConsoleNewline+0x2c>)
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	79fa      	ldrb	r2, [r7, #7]
 8000580:	429a      	cmp	r2, r3
 8000582:	d307      	bcc.n	8000594 <ConsoleNewline+0x24>
    	HAL_UART_Transmit(console.p_uart, (uint8_t*)newline_str, strlen( newline_str), HAL_MAX_DELAY);
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <ConsoleNewline+0x2c>)
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	f04f 33ff 	mov.w	r3, #4294967295
 800058c:	2202      	movs	r2, #2
 800058e:	4904      	ldr	r1, [pc, #16]	; (80005a0 <ConsoleNewline+0x30>)
 8000590:	f002 fcd2 	bl	8002f38 <HAL_UART_Transmit>
	}
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20004934 	.word	0x20004934
 80005a0:	080070c8 	.word	0x080070c8

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fcef 	bl	8000f8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f8c2 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f9c4 	bl	800093c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005b4:	f000 f94e 	bl	8000854 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b8:	f000 f992 	bl	80008e0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  msg_initialize();
 80005bc:	f000 fb08 	bl	8000bd0 <msg_initialize>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c0:	f003 fbfa 	bl	8003db8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of MsgHandlerSema */
  MsgHandlerSemaHandle = osSemaphoreNew(1, 1, &MsgHandlerSema_attributes);
 80005c4:	4a39      	ldr	r2, [pc, #228]	; (80006ac <main+0x108>)
 80005c6:	2101      	movs	r1, #1
 80005c8:	2001      	movs	r0, #1
 80005ca:	f003 fe0d 	bl	80041e8 <osSemaphoreNew>
 80005ce:	4602      	mov	r2, r0
 80005d0:	4b37      	ldr	r3, [pc, #220]	; (80006b0 <main+0x10c>)
 80005d2:	601a      	str	r2, [r3, #0]

  /* creation of SmsHandlerSema */
  SmsHandlerSemaHandle = osSemaphoreNew(1, 1, &SmsHandlerSema_attributes);
 80005d4:	4a37      	ldr	r2, [pc, #220]	; (80006b4 <main+0x110>)
 80005d6:	2101      	movs	r1, #1
 80005d8:	2001      	movs	r0, #1
 80005da:	f003 fe05 	bl	80041e8 <osSemaphoreNew>
 80005de:	4602      	mov	r2, r0
 80005e0:	4b35      	ldr	r3, [pc, #212]	; (80006b8 <main+0x114>)
 80005e2:	601a      	str	r2, [r3, #0]

  /* creation of RadioHandlerSema */
  RadioHandlerSemaHandle = osSemaphoreNew(1, 1, &RadioHandlerSema_attributes);
 80005e4:	4a35      	ldr	r2, [pc, #212]	; (80006bc <main+0x118>)
 80005e6:	2101      	movs	r1, #1
 80005e8:	2001      	movs	r0, #1
 80005ea:	f003 fdfd 	bl	80041e8 <osSemaphoreNew>
 80005ee:	4602      	mov	r2, r0
 80005f0:	4b33      	ldr	r3, [pc, #204]	; (80006c0 <main+0x11c>)
 80005f2:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerScanKeypad */
  TimerScanKeypadHandle = osTimerNew(CallbackScanKeypad, osTimerPeriodic, NULL, &TimerScanKeypad_attributes);
 80005f4:	4b33      	ldr	r3, [pc, #204]	; (80006c4 <main+0x120>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	2101      	movs	r1, #1
 80005fa:	4833      	ldr	r0, [pc, #204]	; (80006c8 <main+0x124>)
 80005fc:	f003 fd30 	bl	8004060 <osTimerNew>
 8000600:	4602      	mov	r2, r0
 8000602:	4b32      	ldr	r3, [pc, #200]	; (80006cc <main+0x128>)
 8000604:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SendRadioQueue */
  SendRadioQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &SendRadioQueue_attributes);
 8000606:	4a32      	ldr	r2, [pc, #200]	; (80006d0 <main+0x12c>)
 8000608:	2101      	movs	r1, #1
 800060a:	2010      	movs	r0, #16
 800060c:	f003 fe8a 	bl	8004324 <osMessageQueueNew>
 8000610:	4602      	mov	r2, r0
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <main+0x130>)
 8000614:	601a      	str	r2, [r3, #0]

  /* creation of Queue02 */
  Queue02Handle = osMessageQueueNew (16, sizeof(Data), &Queue02_attributes);
 8000616:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <main+0x134>)
 8000618:	2104      	movs	r1, #4
 800061a:	2010      	movs	r0, #16
 800061c:	f003 fe82 	bl	8004324 <osMessageQueueNew>
 8000620:	4602      	mov	r2, r0
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <main+0x138>)
 8000624:	601a      	str	r2, [r3, #0]

  /* creation of ReceiveRadioQueue */
  ReceiveRadioQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &ReceiveRadioQueue_attributes);
 8000626:	4a2e      	ldr	r2, [pc, #184]	; (80006e0 <main+0x13c>)
 8000628:	2101      	movs	r1, #1
 800062a:	2010      	movs	r0, #16
 800062c:	f003 fe7a 	bl	8004324 <osMessageQueueNew>
 8000630:	4602      	mov	r2, r0
 8000632:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <main+0x140>)
 8000634:	601a      	str	r2, [r3, #0]

  /* creation of SendSmsQueue */
  SendSmsQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &SendSmsQueue_attributes);
 8000636:	4a2c      	ldr	r2, [pc, #176]	; (80006e8 <main+0x144>)
 8000638:	2101      	movs	r1, #1
 800063a:	2010      	movs	r0, #16
 800063c:	f003 fe72 	bl	8004324 <osMessageQueueNew>
 8000640:	4602      	mov	r2, r0
 8000642:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <main+0x148>)
 8000644:	601a      	str	r2, [r3, #0]

  /* creation of ReceiveSmsQueue */
  ReceiveSmsQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &ReceiveSmsQueue_attributes);
 8000646:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <main+0x14c>)
 8000648:	2101      	movs	r1, #1
 800064a:	2010      	movs	r0, #16
 800064c:	f003 fe6a 	bl	8004324 <osMessageQueueNew>
 8000650:	4602      	mov	r2, r0
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <main+0x150>)
 8000654:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000656:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <main+0x154>)
 8000658:	2100      	movs	r1, #0
 800065a:	4828      	ldr	r0, [pc, #160]	; (80006fc <main+0x158>)
 800065c:	f003 fc16 	bl	8003e8c <osThreadNew>
 8000660:	4602      	mov	r2, r0
 8000662:	4b27      	ldr	r3, [pc, #156]	; (8000700 <main+0x15c>)
 8000664:	601a      	str	r2, [r3, #0]

  /* creation of SendRadio */
  SendRadioHandle = osThreadNew(StartSendRadio, NULL, &SendRadio_attributes);
 8000666:	4a27      	ldr	r2, [pc, #156]	; (8000704 <main+0x160>)
 8000668:	2100      	movs	r1, #0
 800066a:	4827      	ldr	r0, [pc, #156]	; (8000708 <main+0x164>)
 800066c:	f003 fc0e 	bl	8003e8c <osThreadNew>
 8000670:	4602      	mov	r2, r0
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <main+0x168>)
 8000674:	601a      	str	r2, [r3, #0]

  /* creation of ReceiveRadio */
  ReceiveRadioHandle = osThreadNew(StartReceiveRadio, NULL, &ReceiveRadio_attributes);
 8000676:	4a26      	ldr	r2, [pc, #152]	; (8000710 <main+0x16c>)
 8000678:	2100      	movs	r1, #0
 800067a:	4826      	ldr	r0, [pc, #152]	; (8000714 <main+0x170>)
 800067c:	f003 fc06 	bl	8003e8c <osThreadNew>
 8000680:	4602      	mov	r2, r0
 8000682:	4b25      	ldr	r3, [pc, #148]	; (8000718 <main+0x174>)
 8000684:	601a      	str	r2, [r3, #0]

  /* creation of SendSms */
  SendSmsHandle = osThreadNew(StartSendSms, NULL, &SendSms_attributes);
 8000686:	4a25      	ldr	r2, [pc, #148]	; (800071c <main+0x178>)
 8000688:	2100      	movs	r1, #0
 800068a:	4825      	ldr	r0, [pc, #148]	; (8000720 <main+0x17c>)
 800068c:	f003 fbfe 	bl	8003e8c <osThreadNew>
 8000690:	4602      	mov	r2, r0
 8000692:	4b24      	ldr	r3, [pc, #144]	; (8000724 <main+0x180>)
 8000694:	601a      	str	r2, [r3, #0]

  /* creation of ReceiveSms */
  ReceiveSmsHandle = osThreadNew(StartReceiveSms, NULL, &ReceiveSms_attributes);
 8000696:	4a24      	ldr	r2, [pc, #144]	; (8000728 <main+0x184>)
 8000698:	2100      	movs	r1, #0
 800069a:	4824      	ldr	r0, [pc, #144]	; (800072c <main+0x188>)
 800069c:	f003 fbf6 	bl	8003e8c <osThreadNew>
 80006a0:	4602      	mov	r2, r0
 80006a2:	4b23      	ldr	r3, [pc, #140]	; (8000730 <main+0x18c>)
 80006a4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006a6:	f003 fbbb 	bl	8003e20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <main+0x106>
 80006ac:	08007208 	.word	0x08007208
 80006b0:	20004de0 	.word	0x20004de0
 80006b4:	08007218 	.word	0x08007218
 80006b8:	20004dec 	.word	0x20004dec
 80006bc:	08007228 	.word	0x08007228
 80006c0:	20004df0 	.word	0x20004df0
 80006c4:	080071f8 	.word	0x080071f8
 80006c8:	08000b91 	.word	0x08000b91
 80006cc:	20004948 	.word	0x20004948
 80006d0:	08007180 	.word	0x08007180
 80006d4:	20004de4 	.word	0x20004de4
 80006d8:	08007198 	.word	0x08007198
 80006dc:	20004df4 	.word	0x20004df4
 80006e0:	080071b0 	.word	0x080071b0
 80006e4:	20004940 	.word	0x20004940
 80006e8:	080071c8 	.word	0x080071c8
 80006ec:	20004ddc 	.word	0x20004ddc
 80006f0:	080071e0 	.word	0x080071e0
 80006f4:	2000494c 	.word	0x2000494c
 80006f8:	080070cc 	.word	0x080070cc
 80006fc:	08000b09 	.word	0x08000b09
 8000700:	20004944 	.word	0x20004944
 8000704:	080070f0 	.word	0x080070f0
 8000708:	08000b29 	.word	0x08000b29
 800070c:	20004de8 	.word	0x20004de8
 8000710:	08007114 	.word	0x08007114
 8000714:	08000b39 	.word	0x08000b39
 8000718:	20004df8 	.word	0x20004df8
 800071c:	08007138 	.word	0x08007138
 8000720:	08000b57 	.word	0x08000b57
 8000724:	20004dd8 	.word	0x20004dd8
 8000728:	0800715c 	.word	0x0800715c
 800072c:	08000b69 	.word	0x08000b69
 8000730:	20004dd4 	.word	0x20004dd4

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b0b4      	sub	sp, #208	; 0xd0
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800073e:	2230      	movs	r2, #48	; 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f006 fc31 	bl	8006faa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2284      	movs	r2, #132	; 0x84
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f006 fc22 	bl	8006faa <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000766:	f001 f867 	bl	8001838 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b37      	ldr	r3, [pc, #220]	; (8000848 <SystemClock_Config+0x114>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a36      	ldr	r2, [pc, #216]	; (8000848 <SystemClock_Config+0x114>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b34      	ldr	r3, [pc, #208]	; (8000848 <SystemClock_Config+0x114>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000782:	4b32      	ldr	r3, [pc, #200]	; (800084c <SystemClock_Config+0x118>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800078a:	4a30      	ldr	r2, [pc, #192]	; (800084c <SystemClock_Config+0x118>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	4b2e      	ldr	r3, [pc, #184]	; (800084c <SystemClock_Config+0x118>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079e:	2301      	movs	r3, #1
 80007a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ba:	2304      	movs	r3, #4
 80007bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007c0:	2348      	movs	r3, #72	; 0x48
 80007c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007cc:	2303      	movs	r3, #3
 80007ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 f83e 	bl	8001858 <HAL_RCC_OscConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80007e2:	f000 f9f1 	bl	8000bc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	230f      	movs	r3, #15
 80007e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ec:	2302      	movs	r3, #2
 80007ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000806:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800080a:	2102      	movs	r1, #2
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fac7 	bl	8001da0 <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000818:	f000 f9d6 	bl	8000bc8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <SystemClock_Config+0x11c>)
 800081e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000820:	2300      	movs	r3, #0
 8000822:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000824:	2300      	movs	r3, #0
 8000826:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	4618      	mov	r0, r3
 8000830:	f001 fce0 	bl	80021f4 <HAL_RCCEx_PeriphCLKConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800083a:	f000 f9c5 	bl	8000bc8 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	37d0      	adds	r7, #208	; 0xd0
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000
 8000850:	00200100 	.word	0x00200100

08000854 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000858:	2101      	movs	r1, #1
 800085a:	481e      	ldr	r0, [pc, #120]	; (80008d4 <MX_USART3_UART_Init+0x80>)
 800085c:	f000 fe89 	bl	8001572 <HAL_GPIO_TogglePin>

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  SET_BIT(huart3.Instance->CR1, USART_CR1_RXNEIE);
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_USART3_UART_Init+0x84>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_USART3_UART_Init+0x84>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f042 0220 	orr.w	r2, r2, #32
 800086e:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_USART3_UART_Init+0x84>)
 8000872:	4a1a      	ldr	r2, [pc, #104]	; (80008dc <MX_USART3_UART_Init+0x88>)
 8000874:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_USART3_UART_Init+0x84>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_USART3_UART_Init+0x84>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_USART3_UART_Init+0x84>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_USART3_UART_Init+0x84>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART3_UART_Init+0x84>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_USART3_UART_Init+0x84>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART3_UART_Init+0x84>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_USART3_UART_Init+0x84>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART3_UART_Init+0x84>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ae:	480a      	ldr	r0, [pc, #40]	; (80008d8 <MX_USART3_UART_Init+0x84>)
 80008b0:	f002 faf4 	bl	8002e9c <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008ba:	f000 f985 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  //HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
  /* Disable the UART Parity Error Interrupt and RXNE interrupts */
  SET_BIT(huart3.Instance->CR1, USART_CR1_RXNEIE);
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART3_UART_Init+0x84>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <MX_USART3_UART_Init+0x84>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f042 0220 	orr.w	r2, r2, #32
 80008cc:	601a      	str	r2, [r3, #0]
  //SET_BIT(huart3.Instance->CR1, USART_CR1_PEIE);


  /* USER CODE END USART3_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40020400 	.word	0x40020400
 80008d8:	20004950 	.word	0x20004950
 80008dc:	40004800 	.word	0x40004800

080008e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ee:	2206      	movs	r2, #6
 80008f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000900:	2202      	movs	r2, #2
 8000902:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000906:	2201      	movs	r2, #1
 8000908:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000918:	2201      	movs	r2, #1
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000924:	f000 fe3f 	bl	80015a6 <HAL_PCD_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800092e:	f000 f94b 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200049d0 	.word	0x200049d0

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	4b67      	ldr	r3, [pc, #412]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a66      	ldr	r2, [pc, #408]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b64      	ldr	r3, [pc, #400]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	4b61      	ldr	r3, [pc, #388]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a60      	ldr	r2, [pc, #384]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 8000970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b5e      	ldr	r3, [pc, #376]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b5b      	ldr	r3, [pc, #364]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a5a      	ldr	r2, [pc, #360]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b58      	ldr	r3, [pc, #352]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	4b55      	ldr	r3, [pc, #340]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a54      	ldr	r2, [pc, #336]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b52      	ldr	r3, [pc, #328]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b2:	4b4f      	ldr	r3, [pc, #316]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a4e      	ldr	r2, [pc, #312]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b4c      	ldr	r3, [pc, #304]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ca:	4b49      	ldr	r3, [pc, #292]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a48      	ldr	r2, [pc, #288]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 80009d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b46      	ldr	r3, [pc, #280]	; (8000af0 <MX_GPIO_Init+0x1b4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009e8:	4842      	ldr	r0, [pc, #264]	; (8000af4 <MX_GPIO_Init+0x1b8>)
 80009ea:	f000 fda9 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	; 0x40
 80009f2:	4841      	ldr	r0, [pc, #260]	; (8000af8 <MX_GPIO_Init+0x1bc>)
 80009f4:	f000 fda4 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fe:	4b3f      	ldr	r3, [pc, #252]	; (8000afc <MX_GPIO_Init+0x1c0>)
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	483c      	ldr	r0, [pc, #240]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 8000a0e:	f000 fbed 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a12:	2332      	movs	r3, #50	; 0x32
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a22:	230b      	movs	r3, #11
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4834      	ldr	r0, [pc, #208]	; (8000b00 <MX_GPIO_Init+0x1c4>)
 8000a2e:	f000 fbdd 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a32:	2386      	movs	r3, #134	; 0x86
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a42:	230b      	movs	r3, #11
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482d      	ldr	r0, [pc, #180]	; (8000b04 <MX_GPIO_Init+0x1c8>)
 8000a4e:	f000 fbcd 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a52:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4822      	ldr	r0, [pc, #136]	; (8000af4 <MX_GPIO_Init+0x1b8>)
 8000a6c:	f000 fbbe 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a82:	230b      	movs	r3, #11
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4819      	ldr	r0, [pc, #100]	; (8000af4 <MX_GPIO_Init+0x1b8>)
 8000a8e:	f000 fbad 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a92:	2340      	movs	r3, #64	; 0x40
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4813      	ldr	r0, [pc, #76]	; (8000af8 <MX_GPIO_Init+0x1bc>)
 8000aaa:	f000 fb9f 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aae:	2380      	movs	r3, #128	; 0x80
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_GPIO_Init+0x1bc>)
 8000ac2:	f000 fb93 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ac6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad8:	230b      	movs	r3, #11
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_GPIO_Init+0x1bc>)
 8000ae4:	f000 fb82 	bl	80011ec <HAL_GPIO_Init>

}
 8000ae8:	bf00      	nop
 8000aea:	3730      	adds	r7, #48	; 0x30
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020400 	.word	0x40020400
 8000af8:	40021800 	.word	0x40021800
 8000afc:	10110000 	.word	0x10110000
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020000 	.word	0x40020000

08000b08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  osTimerStart(TimerScanKeypadHandle,100);
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <StartDefaultTask+0x1c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2164      	movs	r1, #100	; 0x64
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 fb26 	bl	8004168 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f003 fa5b 	bl	8003fd8 <osDelay>
 8000b22:	e7fb      	b.n	8000b1c <StartDefaultTask+0x14>
 8000b24:	20004948 	.word	0x20004948

08000b28 <StartSendRadio>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendRadio */
void StartSendRadio(void *argument)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendRadio */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b30:	2001      	movs	r0, #1
 8000b32:	f003 fa51 	bl	8003fd8 <osDelay>
 8000b36:	e7fb      	b.n	8000b30 <StartSendRadio+0x8>

08000b38 <StartReceiveRadio>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveRadio */
void StartReceiveRadio(void *argument)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b0a2      	sub	sp, #136	; 0x88
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveRadio */
  uint8_t  rx_buf[ MAX_MSG_LEN];
  memset(rx_buf,0x00,sizeof(rx_buf));
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	2280      	movs	r2, #128	; 0x80
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f006 fa2e 	bl	8006faa <memset>
  /* Infinite loop */
  for(;;)
  {

      osDelay(1);
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f003 fa42 	bl	8003fd8 <osDelay>
 8000b54:	e7fb      	b.n	8000b4e <StartReceiveRadio+0x16>

08000b56 <StartSendSms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendSms */
void StartSendSms(void *argument)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendSms */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f003 fa3a 	bl	8003fd8 <osDelay>
 8000b64:	e7fb      	b.n	8000b5e <StartSendSms+0x8>
	...

08000b68 <StartReceiveSms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveSms */
void StartReceiveSms(void *argument)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b0a2      	sub	sp, #136	; 0x88
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveSms */
    uint8_t  sms_in_buf[ MAX_MSG_LEN];
    //uint8_t  c;
    //HAL_StatusTypeDef uart_status;

    ConsoleWr(development, "StartReceiveSms", 1);
 8000b70:	2201      	movs	r2, #1
 8000b72:	4906      	ldr	r1, [pc, #24]	; (8000b8c <StartReceiveSms+0x24>)
 8000b74:	2032      	movs	r0, #50	; 0x32
 8000b76:	f7ff fcd3 	bl	8000520 <ConsoleWr>
	memset(sms_in_buf,0x00,sizeof(sms_in_buf));
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f006 fa11 	bl	8006faa <memset>


	/* Infinite loop */
	for(;;)
 8000b88:	e7fe      	b.n	8000b88 <StartReceiveSms+0x20>
 8000b8a:	bf00      	nop
 8000b8c:	080070a0 	.word	0x080070a0

08000b90 <CallbackScanKeypad>:
  /* USER CODE END StartReceiveSms */
}

/* CallbackScanKeypad function */
void CallbackScanKeypad(void *argument)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackScanKeypad */

  /* USER CODE END CallbackScanKeypad */
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d101      	bne.n	8000bba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bb6:	f000 f9f5 	bl	8000fa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40001400 	.word	0x40001400

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bce:	e7fe      	b.n	8000bce <Error_Handler+0x6>

08000bd0 <msg_initialize>:
#include <string.h>


one_msg_struct msg_repo[MAX_MSG_ROW];

void msg_initialize(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	memset(msg_repo, 0x00, sizeof(msg_repo));
 8000bd4:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4802      	ldr	r0, [pc, #8]	; (8000be4 <msg_initialize+0x14>)
 8000bdc:	f006 f9e5 	bl	8006faa <memset>
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20004dfc 	.word	0x20004dfc

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_MspInit+0x4c>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a10      	ldr	r2, [pc, #64]	; (8000c34 <HAL_MspInit+0x4c>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	210f      	movs	r1, #15
 8000c22:	f06f 0001 	mvn.w	r0, #1
 8000c26:	f000 fab7 	bl	8001198 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800

08000c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a1b      	ldr	r2, [pc, #108]	; (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d130      	bne.n	8000cbc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_UART_MspInit+0x90>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a1a      	ldr	r2, [pc, #104]	; (8000cc8 <HAL_UART_MspInit+0x90>)
 8000c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_UART_MspInit+0x90>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_UART_MspInit+0x90>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <HAL_UART_MspInit+0x90>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_UART_MspInit+0x90>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4809      	ldr	r0, [pc, #36]	; (8000ccc <HAL_UART_MspInit+0x94>)
 8000ca8:	f000 faa0 	bl	80011ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2105      	movs	r1, #5
 8000cb0:	2027      	movs	r0, #39	; 0x27
 8000cb2:	f000 fa71 	bl	8001198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cb6:	2027      	movs	r0, #39	; 0x27
 8000cb8:	f000 fa8a 	bl	80011d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	; 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40004800 	.word	0x40004800
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cf0:	d141      	bne.n	8000d76 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <HAL_PCD_MspInit+0xb0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a22      	ldr	r2, [pc, #136]	; (8000d80 <HAL_PCD_MspInit+0xb0>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <HAL_PCD_MspInit+0xb0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d0a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d1c:	230a      	movs	r3, #10
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4817      	ldr	r0, [pc, #92]	; (8000d84 <HAL_PCD_MspInit+0xb4>)
 8000d28:	f000 fa60 	bl	80011ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4810      	ldr	r0, [pc, #64]	; (8000d84 <HAL_PCD_MspInit+0xb4>)
 8000d42:	f000 fa53 	bl	80011ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_PCD_MspInit+0xb0>)
 8000d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4a:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <HAL_PCD_MspInit+0xb0>)
 8000d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d50:	6353      	str	r3, [r2, #52]	; 0x34
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_PCD_MspInit+0xb0>)
 8000d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_PCD_MspInit+0xb0>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <HAL_PCD_MspInit+0xb0>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_PCD_MspInit+0xb0>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	; 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000

08000d88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	; 0x30
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	2037      	movs	r0, #55	; 0x37
 8000d9e:	f000 f9fb 	bl	8001198 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000da2:	2037      	movs	r0, #55	; 0x37
 8000da4:	f000 fa14 	bl	80011d0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000da8:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <HAL_InitTick+0xa0>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <HAL_InitTick+0xa0>)
 8000dae:	f043 0320 	orr.w	r3, r3, #32
 8000db2:	6413      	str	r3, [r2, #64]	; 0x40
 8000db4:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <HAL_InitTick+0xa0>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	f003 0320 	and.w	r3, r3, #32
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dc0:	f107 0210 	add.w	r2, r7, #16
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 f9e0 	bl	8002190 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000dd0:	f001 f9b6 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ddc:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <HAL_InitTick+0xa4>)
 8000dde:	fba2 2303 	umull	r2, r3, r2, r3
 8000de2:	0c9b      	lsrs	r3, r3, #18
 8000de4:	3b01      	subs	r3, #1
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_InitTick+0xa8>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <HAL_InitTick+0xac>)
 8000dec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <HAL_InitTick+0xa8>)
 8000df0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000df4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000df6:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <HAL_InitTick+0xa8>)
 8000df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfa:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HAL_InitTick+0xa8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_InitTick+0xa8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000e08:	4809      	ldr	r0, [pc, #36]	; (8000e30 <HAL_InitTick+0xa8>)
 8000e0a:	f001 fde1 	bl	80029d0 <HAL_TIM_Base_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d104      	bne.n	8000e1e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000e14:	4806      	ldr	r0, [pc, #24]	; (8000e30 <HAL_InitTick+0xa8>)
 8000e16:	f001 fe11 	bl	8002a3c <HAL_TIM_Base_Start_IT>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3730      	adds	r7, #48	; 0x30
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	431bde83 	.word	0x431bde83
 8000e30:	200056bc 	.word	0x200056bc
 8000e34:	40001400 	.word	0x40001400

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <NMI_Handler+0x4>

08000e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  uint32_t isrflags   = READ_REG(huart3.Instance->ISR);
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <USART3_IRQHandler+0x8c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	60fb      	str	r3, [r7, #12]
  uint32_t cr1its     = READ_REG(huart3.Instance->CR1);
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <USART3_IRQHandler+0x8c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60bb      	str	r3, [r7, #8]
  uint32_t errorflags;
  uint8_t  rd_byte;

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	481d      	ldr	r0, [pc, #116]	; (8000ef4 <USART3_IRQHandler+0x90>)
 8000e7e:	f000 fb78 	bl	8001572 <HAL_GPIO_TogglePin>

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	f640 030f 	movw	r3, #2063	; 0x80f
 8000e88:	4013      	ands	r3, r2
 8000e8a:	607b      	str	r3, [r7, #4]
  if (errorflags == 0U)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d112      	bne.n	8000eb8 <USART3_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f003 0320 	and.w	r3, r3, #32
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00d      	beq.n	8000eb8 <USART3_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	f003 0320 	and.w	r3, r3, #32
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d008      	beq.n	8000eb8 <USART3_IRQHandler+0x54>
    {
      if (huart3.RxISR != NULL)
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <USART3_IRQHandler+0x8c>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d01c      	beq.n	8000ee8 <USART3_IRQHandler+0x84>
      {
        huart3.RxISR(&huart3);
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <USART3_IRQHandler+0x8c>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb2:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <USART3_IRQHandler+0x8c>)
 8000eb4:	4798      	blx	r3
      }
      return;
 8000eb6:	e017      	b.n	8000ee8 <USART3_IRQHandler+0x84>
  }
  else
  {
      //uart_handler_RxISR(&huart3);
	  //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  rd_byte =  (uint8_t) READ_REG(huart3.Instance->RDR);
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <USART3_IRQHandler+0x8c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebe:	70fb      	strb	r3, [r7, #3]
	  __HAL_UART_SEND_REQ(&huart3, UART_RXDATA_FLUSH_REQUEST);
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <USART3_IRQHandler+0x8c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	699a      	ldr	r2, [r3, #24]
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <USART3_IRQHandler+0x8c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0208 	orr.w	r2, r2, #8
 8000ece:	619a      	str	r2, [r3, #24]
      SET_BIT(huart3.Instance->CR1, USART_CR1_RXNEIE);
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <USART3_IRQHandler+0x8c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <USART3_IRQHandler+0x8c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0220 	orr.w	r2, r2, #32
 8000ede:	601a      	str	r2, [r3, #0]
	  HAL_UART_Init(&huart3);
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <USART3_IRQHandler+0x8c>)
 8000ee2:	f001 ffdb 	bl	8002e9c <HAL_UART_Init>
 8000ee6:	e000      	b.n	8000eea <USART3_IRQHandler+0x86>
      return;
 8000ee8:	bf00      	nop
  }
  /* USER CODE END USART3_IRQn 1 */
}
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20004950 	.word	0x20004950
 8000ef4:	40020400 	.word	0x40020400

08000ef8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <TIM7_IRQHandler+0x10>)
 8000efe:	f001 fdc7 	bl	8002a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200056bc 	.word	0x200056bc

08000f0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <SystemInit+0x28>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f16:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <SystemInit+0x28>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SystemInit+0x28>)
 8000f22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f26:	609a      	str	r2, [r3, #8]
#endif
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f3e:	e003      	b.n	8000f48 <LoopCopyDataInit>

08000f40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f46:	3104      	adds	r1, #4

08000f48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f48:	480b      	ldr	r0, [pc, #44]	; (8000f78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f50:	d3f6      	bcc.n	8000f40 <CopyDataInit>
  ldr  r2, =_sbss
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f54:	e002      	b.n	8000f5c <LoopFillZerobss>

08000f56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f58:	f842 3b04 	str.w	r3, [r2], #4

08000f5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f60:	d3f9      	bcc.n	8000f56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f62:	f7ff ffd3 	bl	8000f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f66:	f005 fff1 	bl	8006f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fb1b 	bl	80005a4 <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f70:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000f74:	08007260 	.word	0x08007260
  ldr  r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f7c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000f80:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000f84:	20005740 	.word	0x20005740

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>

08000f8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8e:	2003      	movs	r0, #3
 8000f90:	f000 f8f7 	bl	8001182 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f7ff fef7 	bl	8000d88 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f9a:	f7ff fe25 	bl	8000be8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x20>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	200056fc 	.word	0x200056fc

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	200056fc 	.word	0x200056fc

08000fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff ffee 	bl	8000fcc <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffc:	d005      	beq.n	800100a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_Delay+0x40>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800100a:	bf00      	nop
 800100c:	f7ff ffde 	bl	8000fcc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	429a      	cmp	r2, r3
 800101a:	d8f7      	bhi.n	800100c <HAL_Delay+0x28>
  {
  }
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000008 	.word	0x20000008

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <__NVIC_SetPriorityGrouping+0x40>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	4313      	orrs	r3, r2
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <__NVIC_SetPriorityGrouping+0x40>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00
 800106c:	05fa0000 	.word	0x05fa0000

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <__NVIC_EnableIRQ+0x38>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff4c 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011aa:	f7ff ff61 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	68b9      	ldr	r1, [r7, #8]
 80011b4:	6978      	ldr	r0, [r7, #20]
 80011b6:	f7ff ffb1 	bl	800111c <NVIC_EncodePriority>
 80011ba:	4602      	mov	r2, r0
 80011bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c0:	4611      	mov	r1, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff80 	bl	80010c8 <__NVIC_SetPriority>
}
 80011c8:	bf00      	nop
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff54 	bl	800108c <__NVIC_EnableIRQ>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
 800120a:	e175      	b.n	80014f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800120c:	2201      	movs	r2, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	429a      	cmp	r2, r3
 8001226:	f040 8164 	bne.w	80014f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d00b      	beq.n	800124a <HAL_GPIO_Init+0x5e>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800123e:	2b11      	cmp	r3, #17
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b12      	cmp	r3, #18
 8001248:	d130      	bne.n	80012ac <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 0201 	and.w	r2, r3, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x100>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b12      	cmp	r3, #18
 80012ea:	d123      	bne.n	8001334 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	08da      	lsrs	r2, r3, #3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3208      	adds	r2, #8
 80012f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	220f      	movs	r2, #15
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	08da      	lsrs	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3208      	adds	r2, #8
 800132e:	69b9      	ldr	r1, [r7, #24]
 8001330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0203 	and.w	r2, r3, #3
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80be 	beq.w	80014f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b65      	ldr	r3, [pc, #404]	; (800150c <HAL_GPIO_Init+0x320>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a64      	ldr	r2, [pc, #400]	; (800150c <HAL_GPIO_Init+0x320>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b62      	ldr	r3, [pc, #392]	; (800150c <HAL_GPIO_Init+0x320>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800138e:	4a60      	ldr	r2, [pc, #384]	; (8001510 <HAL_GPIO_Init+0x324>)
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a57      	ldr	r2, [pc, #348]	; (8001514 <HAL_GPIO_Init+0x328>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d037      	beq.n	800142a <HAL_GPIO_Init+0x23e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a56      	ldr	r2, [pc, #344]	; (8001518 <HAL_GPIO_Init+0x32c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d031      	beq.n	8001426 <HAL_GPIO_Init+0x23a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a55      	ldr	r2, [pc, #340]	; (800151c <HAL_GPIO_Init+0x330>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d02b      	beq.n	8001422 <HAL_GPIO_Init+0x236>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a54      	ldr	r2, [pc, #336]	; (8001520 <HAL_GPIO_Init+0x334>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d025      	beq.n	800141e <HAL_GPIO_Init+0x232>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a53      	ldr	r2, [pc, #332]	; (8001524 <HAL_GPIO_Init+0x338>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d01f      	beq.n	800141a <HAL_GPIO_Init+0x22e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a52      	ldr	r2, [pc, #328]	; (8001528 <HAL_GPIO_Init+0x33c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d019      	beq.n	8001416 <HAL_GPIO_Init+0x22a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a51      	ldr	r2, [pc, #324]	; (800152c <HAL_GPIO_Init+0x340>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x226>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a50      	ldr	r2, [pc, #320]	; (8001530 <HAL_GPIO_Init+0x344>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x222>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4f      	ldr	r2, [pc, #316]	; (8001534 <HAL_GPIO_Init+0x348>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x21e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4e      	ldr	r2, [pc, #312]	; (8001538 <HAL_GPIO_Init+0x34c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x21a>
 8001402:	2309      	movs	r3, #9
 8001404:	e012      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001406:	230a      	movs	r3, #10
 8001408:	e010      	b.n	800142c <HAL_GPIO_Init+0x240>
 800140a:	2308      	movs	r3, #8
 800140c:	e00e      	b.n	800142c <HAL_GPIO_Init+0x240>
 800140e:	2307      	movs	r3, #7
 8001410:	e00c      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001412:	2306      	movs	r3, #6
 8001414:	e00a      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001416:	2305      	movs	r3, #5
 8001418:	e008      	b.n	800142c <HAL_GPIO_Init+0x240>
 800141a:	2304      	movs	r3, #4
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x240>
 800141e:	2303      	movs	r3, #3
 8001420:	e004      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001422:	2302      	movs	r3, #2
 8001424:	e002      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_GPIO_Init+0x240>
 800142a:	2300      	movs	r3, #0
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	f002 0203 	and.w	r2, r2, #3
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	4093      	lsls	r3, r2
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800143c:	4934      	ldr	r1, [pc, #208]	; (8001510 <HAL_GPIO_Init+0x324>)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3302      	adds	r3, #2
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800144a:	4b3c      	ldr	r3, [pc, #240]	; (800153c <HAL_GPIO_Init+0x350>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800146e:	4a33      	ldr	r2, [pc, #204]	; (800153c <HAL_GPIO_Init+0x350>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001474:	4b31      	ldr	r3, [pc, #196]	; (800153c <HAL_GPIO_Init+0x350>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001498:	4a28      	ldr	r2, [pc, #160]	; (800153c <HAL_GPIO_Init+0x350>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149e:	4b27      	ldr	r3, [pc, #156]	; (800153c <HAL_GPIO_Init+0x350>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c2:	4a1e      	ldr	r2, [pc, #120]	; (800153c <HAL_GPIO_Init+0x350>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c8:	4b1c      	ldr	r3, [pc, #112]	; (800153c <HAL_GPIO_Init+0x350>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ec:	4a13      	ldr	r2, [pc, #76]	; (800153c <HAL_GPIO_Init+0x350>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3301      	adds	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	2b0f      	cmp	r3, #15
 80014fc:	f67f ae86 	bls.w	800120c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001500:	bf00      	nop
 8001502:	3724      	adds	r7, #36	; 0x24
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40023800 	.word	0x40023800
 8001510:	40013800 	.word	0x40013800
 8001514:	40020000 	.word	0x40020000
 8001518:	40020400 	.word	0x40020400
 800151c:	40020800 	.word	0x40020800
 8001520:	40020c00 	.word	0x40020c00
 8001524:	40021000 	.word	0x40021000
 8001528:	40021400 	.word	0x40021400
 800152c:	40021800 	.word	0x40021800
 8001530:	40021c00 	.word	0x40021c00
 8001534:	40022000 	.word	0x40022000
 8001538:	40022400 	.word	0x40022400
 800153c:	40013c00 	.word	0x40013c00

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800155c:	e003      	b.n	8001566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	619a      	str	r2, [r3, #24]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	460b      	mov	r3, r1
 800157c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695a      	ldr	r2, [r3, #20]
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d004      	beq.n	8001594 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	041a      	lsls	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001592:	e002      	b.n	800159a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001594:	887a      	ldrh	r2, [r7, #2]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a8:	b08f      	sub	sp, #60	; 0x3c
 80015aa:	af0a      	add	r7, sp, #40	; 0x28
 80015ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e116      	b.n	80017e6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d106      	bne.n	80015d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fb7c 	bl	8000cd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2203      	movs	r2, #3
 80015dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 f97e 	bl	80038f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	687e      	ldr	r6, [r7, #4]
 8001604:	466d      	mov	r5, sp
 8001606:	f106 0410 	add.w	r4, r6, #16
 800160a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800160e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001612:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001616:	e885 0003 	stmia.w	r5, {r0, r1}
 800161a:	1d33      	adds	r3, r6, #4
 800161c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800161e:	6838      	ldr	r0, [r7, #0]
 8001620:	f002 f912 	bl	8003848 <USB_CoreInit>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2202      	movs	r2, #2
 800162e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0d7      	b.n	80017e6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f002 f96c 	bl	800391a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e04a      	b.n	80016de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001648:	7bfa      	ldrb	r2, [r7, #15]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	333d      	adds	r3, #61	; 0x3d
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	1a9b      	subs	r3, r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	333c      	adds	r3, #60	; 0x3c
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001670:	7bfa      	ldrb	r2, [r7, #15]
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	b298      	uxth	r0, r3
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	3342      	adds	r3, #66	; 0x42
 8001684:	4602      	mov	r2, r0
 8001686:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001688:	7bfa      	ldrb	r2, [r7, #15]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	1a9b      	subs	r3, r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	333f      	adds	r3, #63	; 0x3f
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	3344      	adds	r3, #68	; 0x44
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016b0:	7bfa      	ldrb	r2, [r7, #15]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	3348      	adds	r3, #72	; 0x48
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	1a9b      	subs	r3, r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	3350      	adds	r3, #80	; 0x50
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	3301      	adds	r3, #1
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d3af      	bcc.n	8001648 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e044      	b.n	8001778 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001716:	7bfa      	ldrb	r2, [r7, #15]
 8001718:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800171a:	7bfa      	ldrb	r2, [r7, #15]
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	1a9b      	subs	r3, r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001730:	7bfa      	ldrb	r2, [r7, #15]
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001746:	7bfa      	ldrb	r2, [r7, #15]
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	1a9b      	subs	r3, r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800175c:	7bfa      	ldrb	r2, [r7, #15]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	1a9b      	subs	r3, r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	3301      	adds	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	429a      	cmp	r2, r3
 8001780:	d3b5      	bcc.n	80016ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	687e      	ldr	r6, [r7, #4]
 800178a:	466d      	mov	r5, sp
 800178c:	f106 0410 	add.w	r4, r6, #16
 8001790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001798:	e894 0003 	ldmia.w	r4, {r0, r1}
 800179c:	e885 0003 	stmia.w	r5, {r0, r1}
 80017a0:	1d33      	adds	r3, r6, #4
 80017a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017a4:	6838      	ldr	r0, [r7, #0]
 80017a6:	f002 f8e3 	bl	8003970 <USB_DevInit>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2202      	movs	r2, #2
 80017b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e014      	b.n	80017e6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d102      	bne.n	80017da <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f80b 	bl	80017f0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 fa95 	bl	8003d0e <USB_DevDisconnect>

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080017f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_PCDEx_ActivateLPM+0x44>)
 8001820:	4313      	orrs	r3, r2
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	10000003 	.word	0x10000003

08001838 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40007000 	.word	0x40007000

08001858 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e291      	b.n	8001d92 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 8087 	beq.w	800198a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800187c:	4b96      	ldr	r3, [pc, #600]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b04      	cmp	r3, #4
 8001886:	d00c      	beq.n	80018a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001888:	4b93      	ldr	r3, [pc, #588]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b08      	cmp	r3, #8
 8001892:	d112      	bne.n	80018ba <HAL_RCC_OscConfig+0x62>
 8001894:	4b90      	ldr	r3, [pc, #576]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018a0:	d10b      	bne.n	80018ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a2:	4b8d      	ldr	r3, [pc, #564]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d06c      	beq.n	8001988 <HAL_RCC_OscConfig+0x130>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d168      	bne.n	8001988 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e26b      	b.n	8001d92 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c2:	d106      	bne.n	80018d2 <HAL_RCC_OscConfig+0x7a>
 80018c4:	4b84      	ldr	r3, [pc, #528]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a83      	ldr	r2, [pc, #524]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 80018ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	e02e      	b.n	8001930 <HAL_RCC_OscConfig+0xd8>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x9c>
 80018da:	4b7f      	ldr	r3, [pc, #508]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a7e      	ldr	r2, [pc, #504]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 80018e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	4b7c      	ldr	r3, [pc, #496]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a7b      	ldr	r2, [pc, #492]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 80018ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e01d      	b.n	8001930 <HAL_RCC_OscConfig+0xd8>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0xc0>
 80018fe:	4b76      	ldr	r3, [pc, #472]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a75      	ldr	r2, [pc, #468]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b73      	ldr	r3, [pc, #460]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a72      	ldr	r2, [pc, #456]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0xd8>
 8001918:	4b6f      	ldr	r3, [pc, #444]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a6e      	ldr	r2, [pc, #440]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 800191e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b6c      	ldr	r3, [pc, #432]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a6b      	ldr	r2, [pc, #428]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 800192a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800192e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d013      	beq.n	8001960 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff fb48 	bl	8000fcc <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff fb44 	bl	8000fcc <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e21f      	b.n	8001d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4b61      	ldr	r3, [pc, #388]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0xe8>
 800195e:	e014      	b.n	800198a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff fb34 	bl	8000fcc <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff fb30 	bl	8000fcc <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e20b      	b.n	8001d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	4b57      	ldr	r3, [pc, #348]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x110>
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d069      	beq.n	8001a6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001996:	4b50      	ldr	r3, [pc, #320]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00b      	beq.n	80019ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a2:	4b4d      	ldr	r3, [pc, #308]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d11c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x190>
 80019ae:	4b4a      	ldr	r3, [pc, #296]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d116      	bne.n	80019e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <HAL_RCC_OscConfig+0x17a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e1df      	b.n	8001d92 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d2:	4b41      	ldr	r3, [pc, #260]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	493d      	ldr	r1, [pc, #244]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e6:	e040      	b.n	8001a6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d023      	beq.n	8001a38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f0:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a38      	ldr	r2, [pc, #224]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff fae6 	bl	8000fcc <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a04:	f7ff fae2 	bl	8000fcc <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e1bd      	b.n	8001d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4929      	ldr	r1, [pc, #164]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]
 8001a36:	e018      	b.n	8001a6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7ff fac2 	bl	8000fcc <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fabe 	bl	8000fcc <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e199      	b.n	8001d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d038      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d019      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a82:	4a15      	ldr	r2, [pc, #84]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fa9f 	bl	8000fcc <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a92:	f7ff fa9b 	bl	8000fcc <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e176      	b.n	8001d92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x23a>
 8001ab0:	e01a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <HAL_RCC_OscConfig+0x280>)
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abe:	f7ff fa85 	bl	8000fcc <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac4:	e00a      	b.n	8001adc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac6:	f7ff fa81 	bl	8000fcc <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d903      	bls.n	8001adc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e15c      	b.n	8001d92 <HAL_RCC_OscConfig+0x53a>
 8001ad8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001adc:	4b91      	ldr	r3, [pc, #580]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1ee      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80a4 	beq.w	8001c3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af6:	4b8b      	ldr	r3, [pc, #556]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10d      	bne.n	8001b1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a87      	ldr	r2, [pc, #540]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b85      	ldr	r3, [pc, #532]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b1e:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <HAL_RCC_OscConfig+0x4d0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d118      	bne.n	8001b5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b2a:	4b7f      	ldr	r3, [pc, #508]	; (8001d28 <HAL_RCC_OscConfig+0x4d0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a7e      	ldr	r2, [pc, #504]	; (8001d28 <HAL_RCC_OscConfig+0x4d0>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b36:	f7ff fa49 	bl	8000fcc <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3e:	f7ff fa45 	bl	8000fcc <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e120      	b.n	8001d92 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b50:	4b75      	ldr	r3, [pc, #468]	; (8001d28 <HAL_RCC_OscConfig+0x4d0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x31a>
 8001b64:	4b6f      	ldr	r3, [pc, #444]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b68:	4a6e      	ldr	r2, [pc, #440]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b70:	e02d      	b.n	8001bce <HAL_RCC_OscConfig+0x376>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x33c>
 8001b7a:	4b6a      	ldr	r3, [pc, #424]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	4a69      	ldr	r2, [pc, #420]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6713      	str	r3, [r2, #112]	; 0x70
 8001b86:	4b67      	ldr	r3, [pc, #412]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	4a66      	ldr	r2, [pc, #408]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	6713      	str	r3, [r2, #112]	; 0x70
 8001b92:	e01c      	b.n	8001bce <HAL_RCC_OscConfig+0x376>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d10c      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x35e>
 8001b9c:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba0:	4a60      	ldr	r2, [pc, #384]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba8:	4b5e      	ldr	r3, [pc, #376]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bac:	4a5d      	ldr	r2, [pc, #372]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb4:	e00b      	b.n	8001bce <HAL_RCC_OscConfig+0x376>
 8001bb6:	4b5b      	ldr	r3, [pc, #364]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bba:	4a5a      	ldr	r2, [pc, #360]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc2:	4b58      	ldr	r3, [pc, #352]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	4a57      	ldr	r2, [pc, #348]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001bc8:	f023 0304 	bic.w	r3, r3, #4
 8001bcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d015      	beq.n	8001c02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd6:	f7ff f9f9 	bl	8000fcc <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7ff f9f5 	bl	8000fcc <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0ce      	b.n	8001d92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf4:	4b4b      	ldr	r3, [pc, #300]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0ee      	beq.n	8001bde <HAL_RCC_OscConfig+0x386>
 8001c00:	e014      	b.n	8001c2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c02:	f7ff f9e3 	bl	8000fcc <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7ff f9df 	bl	8000fcc <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0b8      	b.n	8001d92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c20:	4b40      	ldr	r3, [pc, #256]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1ee      	bne.n	8001c0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d105      	bne.n	8001c3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c32:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a3b      	ldr	r2, [pc, #236]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 80a4 	beq.w	8001d90 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c48:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d06b      	beq.n	8001d2c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d149      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5c:	4b31      	ldr	r3, [pc, #196]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a30      	ldr	r2, [pc, #192]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff f9b0 	bl	8000fcc <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f9ac 	bl	8000fcc <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e087      	b.n	8001d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69da      	ldr	r2, [r3, #28]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	019b      	lsls	r3, r3, #6
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	085b      	lsrs	r3, r3, #1
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	041b      	lsls	r3, r3, #16
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	061b      	lsls	r3, r3, #24
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001cb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff f980 	bl	8000fcc <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd0:	f7ff f97c 	bl	8000fcc <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e057      	b.n	8001d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x478>
 8001cee:	e04f      	b.n	8001d90 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff f966 	bl	8000fcc <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d04:	f7ff f962 	bl	8000fcc <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e03d      	b.n	8001d92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d16:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x4ac>
 8001d22:	e035      	b.n	8001d90 <HAL_RCC_OscConfig+0x538>
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_RCC_OscConfig+0x544>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d028      	beq.n	8001d8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d121      	bne.n	8001d8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d11a      	bne.n	8001d8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d111      	bne.n	8001d8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	085b      	lsrs	r3, r3, #1
 8001d74:	3b01      	subs	r3, #1
 8001d76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800

08001da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0d0      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001db8:	4b6a      	ldr	r3, [pc, #424]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d910      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc6:	4b67      	ldr	r3, [pc, #412]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 020f 	bic.w	r2, r3, #15
 8001dce:	4965      	ldr	r1, [pc, #404]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd6:	4b63      	ldr	r3, [pc, #396]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0b8      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d020      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e00:	4b59      	ldr	r3, [pc, #356]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4a58      	ldr	r2, [pc, #352]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e18:	4b53      	ldr	r3, [pc, #332]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4a52      	ldr	r2, [pc, #328]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e24:	4b50      	ldr	r3, [pc, #320]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	494d      	ldr	r1, [pc, #308]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d040      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d115      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e07f      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d107      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e62:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e073      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e72:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e06b      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e82:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f023 0203 	bic.w	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4936      	ldr	r1, [pc, #216]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e94:	f7ff f89a 	bl	8000fcc <HAL_GetTick>
 8001e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9c:	f7ff f896 	bl	8000fcc <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e053      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb2:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 020c 	and.w	r2, r3, #12
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d1eb      	bne.n	8001e9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d210      	bcs.n	8001ef4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 020f 	bic.w	r2, r3, #15
 8001eda:	4922      	ldr	r1, [pc, #136]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e032      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d008      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4916      	ldr	r1, [pc, #88]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d009      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	490e      	ldr	r1, [pc, #56]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f32:	f000 f821 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8001f36:	4601      	mov	r1, r0
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_RCC_ClockConfig+0x1cc>)
 8001f44:	5cd3      	ldrb	r3, [r2, r3]
 8001f46:	fa21 f303 	lsr.w	r3, r1, r3
 8001f4a:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <HAL_RCC_ClockConfig+0x1d0>)
 8001f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_RCC_ClockConfig+0x1d4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe ff18 	bl	8000d88 <HAL_InitTick>

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	08007238 	.word	0x08007238
 8001f70:	20000000 	.word	0x20000000
 8001f74:	20000004 	.word	0x20000004

08001f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	2300      	movs	r3, #0
 8001f88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f8e:	4b63      	ldr	r3, [pc, #396]	; (800211c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d007      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x32>
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d008      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x38>
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 80b4 	bne.w	800210c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fa4:	4b5e      	ldr	r3, [pc, #376]	; (8002120 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001fa6:	60bb      	str	r3, [r7, #8]
      break;
 8001fa8:	e0b3      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001faa:	4b5e      	ldr	r3, [pc, #376]	; (8002124 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001fac:	60bb      	str	r3, [r7, #8]
      break;
 8001fae:	e0b0      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fb0:	4b5a      	ldr	r3, [pc, #360]	; (800211c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fb8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001fba:	4b58      	ldr	r3, [pc, #352]	; (800211c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d04a      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc6:	4b55      	ldr	r3, [pc, #340]	; (800211c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	099b      	lsrs	r3, r3, #6
 8001fcc:	f04f 0400 	mov.w	r4, #0
 8001fd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	ea03 0501 	and.w	r5, r3, r1
 8001fdc:	ea04 0602 	and.w	r6, r4, r2
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	4632      	mov	r2, r6
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	f04f 0400 	mov.w	r4, #0
 8001fec:	0154      	lsls	r4, r2, #5
 8001fee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ff2:	014b      	lsls	r3, r1, #5
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4622      	mov	r2, r4
 8001ff8:	1b49      	subs	r1, r1, r5
 8001ffa:	eb62 0206 	sbc.w	r2, r2, r6
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	f04f 0400 	mov.w	r4, #0
 8002006:	0194      	lsls	r4, r2, #6
 8002008:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800200c:	018b      	lsls	r3, r1, #6
 800200e:	1a5b      	subs	r3, r3, r1
 8002010:	eb64 0402 	sbc.w	r4, r4, r2
 8002014:	f04f 0100 	mov.w	r1, #0
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	00e2      	lsls	r2, r4, #3
 800201e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002022:	00d9      	lsls	r1, r3, #3
 8002024:	460b      	mov	r3, r1
 8002026:	4614      	mov	r4, r2
 8002028:	195b      	adds	r3, r3, r5
 800202a:	eb44 0406 	adc.w	r4, r4, r6
 800202e:	f04f 0100 	mov.w	r1, #0
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	0262      	lsls	r2, r4, #9
 8002038:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800203c:	0259      	lsls	r1, r3, #9
 800203e:	460b      	mov	r3, r1
 8002040:	4614      	mov	r4, r2
 8002042:	4618      	mov	r0, r3
 8002044:	4621      	mov	r1, r4
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f04f 0400 	mov.w	r4, #0
 800204c:	461a      	mov	r2, r3
 800204e:	4623      	mov	r3, r4
 8002050:	f7fe f8e6 	bl	8000220 <__aeabi_uldivmod>
 8002054:	4603      	mov	r3, r0
 8002056:	460c      	mov	r4, r1
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	e049      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800205c:	4b2f      	ldr	r3, [pc, #188]	; (800211c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	f04f 0400 	mov.w	r4, #0
 8002066:	f240 11ff 	movw	r1, #511	; 0x1ff
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	ea03 0501 	and.w	r5, r3, r1
 8002072:	ea04 0602 	and.w	r6, r4, r2
 8002076:	4629      	mov	r1, r5
 8002078:	4632      	mov	r2, r6
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	f04f 0400 	mov.w	r4, #0
 8002082:	0154      	lsls	r4, r2, #5
 8002084:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002088:	014b      	lsls	r3, r1, #5
 800208a:	4619      	mov	r1, r3
 800208c:	4622      	mov	r2, r4
 800208e:	1b49      	subs	r1, r1, r5
 8002090:	eb62 0206 	sbc.w	r2, r2, r6
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	f04f 0400 	mov.w	r4, #0
 800209c:	0194      	lsls	r4, r2, #6
 800209e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020a2:	018b      	lsls	r3, r1, #6
 80020a4:	1a5b      	subs	r3, r3, r1
 80020a6:	eb64 0402 	sbc.w	r4, r4, r2
 80020aa:	f04f 0100 	mov.w	r1, #0
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	00e2      	lsls	r2, r4, #3
 80020b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020b8:	00d9      	lsls	r1, r3, #3
 80020ba:	460b      	mov	r3, r1
 80020bc:	4614      	mov	r4, r2
 80020be:	195b      	adds	r3, r3, r5
 80020c0:	eb44 0406 	adc.w	r4, r4, r6
 80020c4:	f04f 0100 	mov.w	r1, #0
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	02a2      	lsls	r2, r4, #10
 80020ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020d2:	0299      	lsls	r1, r3, #10
 80020d4:	460b      	mov	r3, r1
 80020d6:	4614      	mov	r4, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	4621      	mov	r1, r4
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f04f 0400 	mov.w	r4, #0
 80020e2:	461a      	mov	r2, r3
 80020e4:	4623      	mov	r3, r4
 80020e6:	f7fe f89b 	bl	8000220 <__aeabi_uldivmod>
 80020ea:	4603      	mov	r3, r0
 80020ec:	460c      	mov	r4, r1
 80020ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	0c1b      	lsrs	r3, r3, #16
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	3301      	adds	r3, #1
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	60bb      	str	r3, [r7, #8]
      break;
 800210a:	e002      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800210e:	60bb      	str	r3, [r7, #8]
      break;
 8002110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002112:	68bb      	ldr	r3, [r7, #8]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211c:	40023800 	.word	0x40023800
 8002120:	00f42400 	.word	0x00f42400
 8002124:	007a1200 	.word	0x007a1200

08002128 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <HAL_RCC_GetHCLKFreq+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000000 	.word	0x20000000

08002140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002144:	f7ff fff0 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002148:	4601      	mov	r1, r0
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	0a9b      	lsrs	r3, r3, #10
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4a03      	ldr	r2, [pc, #12]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	fa21 f303 	lsr.w	r3, r1, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	08007248 	.word	0x08007248

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800216c:	f7ff ffdc 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002170:	4601      	mov	r1, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0b5b      	lsrs	r3, r3, #13
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4a03      	ldr	r2, [pc, #12]	; (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	08007248 	.word	0x08007248

08002190 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	220f      	movs	r2, #15
 800219e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_RCC_GetClockConfig+0x5c>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_RCC_GetClockConfig+0x5c>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <HAL_RCC_GetClockConfig+0x5c>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_RCC_GetClockConfig+0x5c>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	08db      	lsrs	r3, r3, #3
 80021ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <HAL_RCC_GetClockConfig+0x60>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 020f 	and.w	r2, r3, #15
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	601a      	str	r2, [r3, #0]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40023c00 	.word	0x40023c00

080021f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d012      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800221c:	4b69      	ldr	r3, [pc, #420]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a68      	ldr	r2, [pc, #416]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002222:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002226:	6093      	str	r3, [r2, #8]
 8002228:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002230:	4964      	ldr	r1, [pc, #400]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800223e:	2301      	movs	r3, #1
 8002240:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d017      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800224e:	4b5d      	ldr	r3, [pc, #372]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225c:	4959      	ldr	r1, [pc, #356]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800226c:	d101      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800226e:	2301      	movs	r3, #1
 8002270:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800227a:	2301      	movs	r3, #1
 800227c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d017      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800228a:	4b4e      	ldr	r3, [pc, #312]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800228c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002290:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	494a      	ldr	r1, [pc, #296]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a8:	d101      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80022aa:	2301      	movs	r3, #1
 80022ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80022b6:	2301      	movs	r3, #1
 80022b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 808b 	beq.w	80023ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	4b3a      	ldr	r3, [pc, #232]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	4a39      	ldr	r2, [pc, #228]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e2:	6413      	str	r3, [r2, #64]	; 0x40
 80022e4:	4b37      	ldr	r3, [pc, #220]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80022f0:	4b35      	ldr	r3, [pc, #212]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a34      	ldr	r2, [pc, #208]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022fc:	f7fe fe66 	bl	8000fcc <HAL_GetTick>
 8002300:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002304:	f7fe fe62 	bl	8000fcc <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e355      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002316:	4b2c      	ldr	r3, [pc, #176]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002322:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d035      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	429a      	cmp	r2, r3
 800233e:	d02e      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002340:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002348:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002360:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002362:	4a18      	ldr	r2, [pc, #96]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b01      	cmp	r3, #1
 8002372:	d114      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7fe fe2a 	bl	8000fcc <HAL_GetTick>
 8002378:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237a:	e00a      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800237c:	f7fe fe26 	bl	8000fcc <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	; 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e317      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0ee      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023aa:	d111      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023ba:	400b      	ands	r3, r1
 80023bc:	4901      	ldr	r1, [pc, #4]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
 80023c2:	e00b      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40007000 	.word	0x40007000
 80023cc:	0ffffcff 	.word	0x0ffffcff
 80023d0:	4bb0      	ldr	r3, [pc, #704]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4aaf      	ldr	r2, [pc, #700]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80023da:	6093      	str	r3, [r2, #8]
 80023dc:	4bad      	ldr	r3, [pc, #692]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e8:	49aa      	ldr	r1, [pc, #680]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d010      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80023fa:	4ba6      	ldr	r3, [pc, #664]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002400:	4aa4      	ldr	r2, [pc, #656]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002406:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800240a:	4ba2      	ldr	r3, [pc, #648]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800240c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002414:	499f      	ldr	r1, [pc, #636]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002428:	4b9a      	ldr	r3, [pc, #616]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002436:	4997      	ldr	r1, [pc, #604]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800244a:	4b92      	ldr	r3, [pc, #584]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800244c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002450:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002458:	498e      	ldr	r1, [pc, #568]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800246c:	4b89      	ldr	r3, [pc, #548]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800247a:	4986      	ldr	r1, [pc, #536]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800248e:	4b81      	ldr	r3, [pc, #516]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002494:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	497d      	ldr	r1, [pc, #500]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024b0:	4b78      	ldr	r3, [pc, #480]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	f023 0203 	bic.w	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4975      	ldr	r1, [pc, #468]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024d2:	4b70      	ldr	r3, [pc, #448]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d8:	f023 020c 	bic.w	r2, r3, #12
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e0:	496c      	ldr	r1, [pc, #432]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024f4:	4b67      	ldr	r3, [pc, #412]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002502:	4964      	ldr	r1, [pc, #400]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002516:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002524:	495b      	ldr	r1, [pc, #364]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002538:	4b56      	ldr	r3, [pc, #344]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002546:	4953      	ldr	r1, [pc, #332]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800255a:	4b4e      	ldr	r3, [pc, #312]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	494a      	ldr	r1, [pc, #296]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800257c:	4b45      	ldr	r3, [pc, #276]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258a:	4942      	ldr	r1, [pc, #264]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800259e:	4b3d      	ldr	r3, [pc, #244]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ac:	4939      	ldr	r1, [pc, #228]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025c0:	4b34      	ldr	r3, [pc, #208]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ce:	4931      	ldr	r1, [pc, #196]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d011      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025e2:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025f0:	4928      	ldr	r1, [pc, #160]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002600:	d101      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002602:	2301      	movs	r3, #1
 8002604:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002612:	2301      	movs	r3, #1
 8002614:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002628:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002630:	4918      	ldr	r1, [pc, #96]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00b      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002654:	490f      	ldr	r1, [pc, #60]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d005      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800266a:	f040 80d8 	bne.w	800281e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800266e:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a08      	ldr	r2, [pc, #32]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002674:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800267a:	f7fe fca7 	bl	8000fcc <HAL_GetTick>
 800267e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002682:	f7fe fca3 	bl	8000fcc <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b64      	cmp	r3, #100	; 0x64
 800268e:	d903      	bls.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e196      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002694:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002698:	4b6c      	ldr	r3, [pc, #432]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1ee      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d021      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d11d      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026b8:	4b64      	ldr	r3, [pc, #400]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80026ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026be:	0c1b      	lsrs	r3, r3, #16
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026c6:	4b61      	ldr	r3, [pc, #388]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80026c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026cc:	0e1b      	lsrs	r3, r3, #24
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	019a      	lsls	r2, r3, #6
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	041b      	lsls	r3, r3, #16
 80026de:	431a      	orrs	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	061b      	lsls	r3, r3, #24
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	071b      	lsls	r3, r3, #28
 80026ec:	4957      	ldr	r1, [pc, #348]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002708:	d00a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002712:	2b00      	cmp	r3, #0
 8002714:	d02e      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800271e:	d129      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002720:	4b4a      	ldr	r3, [pc, #296]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002726:	0c1b      	lsrs	r3, r3, #16
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002734:	0f1b      	lsrs	r3, r3, #28
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	019a      	lsls	r2, r3, #6
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	041b      	lsls	r3, r3, #16
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	061b      	lsls	r3, r3, #24
 800274e:	431a      	orrs	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	071b      	lsls	r3, r3, #28
 8002754:	493d      	ldr	r1, [pc, #244]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800275c:	4b3b      	ldr	r3, [pc, #236]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800275e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002762:	f023 021f 	bic.w	r2, r3, #31
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	3b01      	subs	r3, #1
 800276c:	4937      	ldr	r1, [pc, #220]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01d      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002780:	4b32      	ldr	r3, [pc, #200]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002786:	0e1b      	lsrs	r3, r3, #24
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800278e:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002794:	0f1b      	lsrs	r3, r3, #28
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	019a      	lsls	r2, r3, #6
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	041b      	lsls	r3, r3, #16
 80027a8:	431a      	orrs	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	061b      	lsls	r3, r3, #24
 80027ae:	431a      	orrs	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	071b      	lsls	r3, r3, #28
 80027b4:	4925      	ldr	r1, [pc, #148]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d011      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	019a      	lsls	r2, r3, #6
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	041b      	lsls	r3, r3, #16
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	061b      	lsls	r3, r3, #24
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	071b      	lsls	r3, r3, #28
 80027e4:	4919      	ldr	r1, [pc, #100]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027ec:	4b17      	ldr	r3, [pc, #92]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a16      	ldr	r2, [pc, #88]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f8:	f7fe fbe8 	bl	8000fcc <HAL_GetTick>
 80027fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002800:	f7fe fbe4 	bl	8000fcc <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e0d7      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b01      	cmp	r3, #1
 8002822:	f040 80cd 	bne.w	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a08      	ldr	r2, [pc, #32]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800282c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002830:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002832:	f7fe fbcb 	bl	8000fcc <HAL_GetTick>
 8002836:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800283a:	f7fe fbc7 	bl	8000fcc <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b64      	cmp	r3, #100	; 0x64
 8002846:	d903      	bls.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e0ba      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800284c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002850:	4b5e      	ldr	r3, [pc, #376]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800285c:	d0ed      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800287a:	2b00      	cmp	r3, #0
 800287c:	d02e      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d12a      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002886:	4b51      	ldr	r3, [pc, #324]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002894:	4b4d      	ldr	r3, [pc, #308]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	0f1b      	lsrs	r3, r3, #28
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	019a      	lsls	r2, r3, #6
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	061b      	lsls	r3, r3, #24
 80028b4:	431a      	orrs	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	071b      	lsls	r3, r3, #28
 80028ba:	4944      	ldr	r1, [pc, #272]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028c2:	4b42      	ldr	r3, [pc, #264]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80028c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	3b01      	subs	r3, #1
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	493d      	ldr	r1, [pc, #244]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d022      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028f0:	d11d      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028f2:	4b36      	ldr	r3, [pc, #216]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f8:	0e1b      	lsrs	r3, r3, #24
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002900:	4b32      	ldr	r3, [pc, #200]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	0f1b      	lsrs	r3, r3, #28
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	019a      	lsls	r2, r3, #6
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	431a      	orrs	r2, r3
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	061b      	lsls	r3, r3, #24
 8002920:	431a      	orrs	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	071b      	lsls	r3, r3, #28
 8002926:	4929      	ldr	r1, [pc, #164]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d028      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800293a:	4b24      	ldr	r3, [pc, #144]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002940:	0e1b      	lsrs	r3, r3, #24
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002948:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294e:	0c1b      	lsrs	r3, r3, #16
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	019a      	lsls	r2, r3, #6
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	041b      	lsls	r3, r3, #16
 8002960:	431a      	orrs	r2, r3
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	061b      	lsls	r3, r3, #24
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	071b      	lsls	r3, r3, #28
 800296e:	4917      	ldr	r1, [pc, #92]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800297c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	4911      	ldr	r1, [pc, #68]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0e      	ldr	r2, [pc, #56]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002998:	f7fe fb18 	bl	8000fcc <HAL_GetTick>
 800299c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029a0:	f7fe fb14 	bl	8000fcc <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e007      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029be:	d1ef      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3720      	adds	r7, #32
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800

080029d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e01d      	b.n	8002a1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f815 	bl	8002a26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	f000 f986 	bl	8002d20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <HAL_TIM_Base_Start_IT+0x50>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d00b      	beq.n	8002a7e <HAL_TIM_Base_Start_IT+0x42>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6c:	d007      	beq.n	8002a7e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0201 	orr.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	00010007 	.word	0x00010007

08002a90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d122      	bne.n	8002aec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d11b      	bne.n	8002aec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0202 	mvn.w	r2, #2
 8002abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f905 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8f7 	bl	8002cce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f908 	bl	8002cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d122      	bne.n	8002b40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d11b      	bne.n	8002b40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0204 	mvn.w	r2, #4
 8002b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2202      	movs	r2, #2
 8002b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f8db 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f8cd 	bl	8002cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f8de 	bl	8002cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d122      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d11b      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0208 	mvn.w	r2, #8
 8002b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f8b1 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002b80:	e005      	b.n	8002b8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f8a3 	bl	8002cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f8b4 	bl	8002cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b10      	cmp	r3, #16
 8002ba0:	d122      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b10      	cmp	r3, #16
 8002bae:	d11b      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0210 	mvn.w	r2, #16
 8002bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f887 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002bd4:	e005      	b.n	8002be2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f879 	bl	8002cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f88a 	bl	8002cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d10e      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d107      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0201 	mvn.w	r2, #1
 8002c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fd ffc8 	bl	8000ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1e:	2b80      	cmp	r3, #128	; 0x80
 8002c20:	d10e      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2c:	2b80      	cmp	r3, #128	; 0x80
 8002c2e:	d107      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f91a 	bl	8002e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4e:	d10e      	bne.n	8002c6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	2b80      	cmp	r3, #128	; 0x80
 8002c5c:	d107      	bne.n	8002c6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f90d 	bl	8002e88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	d10e      	bne.n	8002c9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d107      	bne.n	8002c9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f838 	bl	8002d0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d10e      	bne.n	8002cc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	d107      	bne.n	8002cc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f06f 0220 	mvn.w	r2, #32
 8002cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f8cd 	bl	8002e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a40      	ldr	r2, [pc, #256]	; (8002e34 <TIM_Base_SetConfig+0x114>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d013      	beq.n	8002d60 <TIM_Base_SetConfig+0x40>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3e:	d00f      	beq.n	8002d60 <TIM_Base_SetConfig+0x40>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a3d      	ldr	r2, [pc, #244]	; (8002e38 <TIM_Base_SetConfig+0x118>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00b      	beq.n	8002d60 <TIM_Base_SetConfig+0x40>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a3c      	ldr	r2, [pc, #240]	; (8002e3c <TIM_Base_SetConfig+0x11c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d007      	beq.n	8002d60 <TIM_Base_SetConfig+0x40>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3b      	ldr	r2, [pc, #236]	; (8002e40 <TIM_Base_SetConfig+0x120>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d003      	beq.n	8002d60 <TIM_Base_SetConfig+0x40>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a3a      	ldr	r2, [pc, #232]	; (8002e44 <TIM_Base_SetConfig+0x124>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d108      	bne.n	8002d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a2f      	ldr	r2, [pc, #188]	; (8002e34 <TIM_Base_SetConfig+0x114>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d02b      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d80:	d027      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2c      	ldr	r2, [pc, #176]	; (8002e38 <TIM_Base_SetConfig+0x118>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d023      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a2b      	ldr	r2, [pc, #172]	; (8002e3c <TIM_Base_SetConfig+0x11c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d01f      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a2a      	ldr	r2, [pc, #168]	; (8002e40 <TIM_Base_SetConfig+0x120>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01b      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a29      	ldr	r2, [pc, #164]	; (8002e44 <TIM_Base_SetConfig+0x124>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d017      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a28      	ldr	r2, [pc, #160]	; (8002e48 <TIM_Base_SetConfig+0x128>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a27      	ldr	r2, [pc, #156]	; (8002e4c <TIM_Base_SetConfig+0x12c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00f      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a26      	ldr	r2, [pc, #152]	; (8002e50 <TIM_Base_SetConfig+0x130>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00b      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a25      	ldr	r2, [pc, #148]	; (8002e54 <TIM_Base_SetConfig+0x134>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d007      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a24      	ldr	r2, [pc, #144]	; (8002e58 <TIM_Base_SetConfig+0x138>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d003      	beq.n	8002dd2 <TIM_Base_SetConfig+0xb2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a23      	ldr	r2, [pc, #140]	; (8002e5c <TIM_Base_SetConfig+0x13c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d108      	bne.n	8002de4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <TIM_Base_SetConfig+0x114>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_Base_SetConfig+0xf8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a0c      	ldr	r2, [pc, #48]	; (8002e44 <TIM_Base_SetConfig+0x124>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d103      	bne.n	8002e20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	615a      	str	r2, [r3, #20]
}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40010000 	.word	0x40010000
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40000800 	.word	0x40000800
 8002e40:	40000c00 	.word	0x40000c00
 8002e44:	40010400 	.word	0x40010400
 8002e48:	40014000 	.word	0x40014000
 8002e4c:	40014400 	.word	0x40014400
 8002e50:	40014800 	.word	0x40014800
 8002e54:	40001800 	.word	0x40001800
 8002e58:	40001c00 	.word	0x40001c00
 8002e5c:	40002000 	.word	0x40002000

08002e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e040      	b.n	8002f30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fd feba 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	; 0x24
 8002ec8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f8be 	bl	800305c <UART_SetConfig>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e022      	b.n	8002f30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fb5c 	bl	80035b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fbe3 	bl	80036f4 <UART_CheckIdleState>
 8002f2e:	4603      	mov	r3, r0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	d17f      	bne.n	8003050 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_UART_Transmit+0x24>
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e078      	b.n	8003052 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_UART_Transmit+0x36>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e071      	b.n	8003052 <HAL_UART_Transmit+0x11a>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2221      	movs	r2, #33	; 0x21
 8002f80:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002f82:	f7fe f823 	bl	8000fcc <HAL_GetTick>
 8002f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	88fa      	ldrh	r2, [r7, #6]
 8002f8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	88fa      	ldrh	r2, [r7, #6]
 8002f94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa0:	d108      	bne.n	8002fb4 <HAL_UART_Transmit+0x7c>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d104      	bne.n	8002fb4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	e003      	b.n	8002fbc <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002fc4:	e02c      	b.n	8003020 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2180      	movs	r1, #128	; 0x80
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fbbe 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e038      	b.n	8003052 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10b      	bne.n	8002ffe <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	e007      	b.n	800300e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	781a      	ldrb	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	3301      	adds	r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1cc      	bne.n	8002fc6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2200      	movs	r2, #0
 8003034:	2140      	movs	r1, #64	; 0x40
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fb8b 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e005      	b.n	8003052 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	e000      	b.n	8003052 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003050:	2302      	movs	r3, #2
  }
}
 8003052:	4618      	mov	r0, r3
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4bb1      	ldr	r3, [pc, #708]	; (8003350 <UART_SetConfig+0x2f4>)
 800308c:	4013      	ands	r3, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	6939      	ldr	r1, [r7, #16]
 8003094:	430b      	orrs	r3, r1
 8003096:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a9f      	ldr	r2, [pc, #636]	; (8003354 <UART_SetConfig+0x2f8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d121      	bne.n	8003120 <UART_SetConfig+0xc4>
 80030dc:	4b9e      	ldr	r3, [pc, #632]	; (8003358 <UART_SetConfig+0x2fc>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d816      	bhi.n	8003118 <UART_SetConfig+0xbc>
 80030ea:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <UART_SetConfig+0x94>)
 80030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f0:	08003101 	.word	0x08003101
 80030f4:	0800310d 	.word	0x0800310d
 80030f8:	08003107 	.word	0x08003107
 80030fc:	08003113 	.word	0x08003113
 8003100:	2301      	movs	r3, #1
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e151      	b.n	80033aa <UART_SetConfig+0x34e>
 8003106:	2302      	movs	r3, #2
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e14e      	b.n	80033aa <UART_SetConfig+0x34e>
 800310c:	2304      	movs	r3, #4
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e14b      	b.n	80033aa <UART_SetConfig+0x34e>
 8003112:	2308      	movs	r3, #8
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e148      	b.n	80033aa <UART_SetConfig+0x34e>
 8003118:	2310      	movs	r3, #16
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	bf00      	nop
 800311e:	e144      	b.n	80033aa <UART_SetConfig+0x34e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a8d      	ldr	r2, [pc, #564]	; (800335c <UART_SetConfig+0x300>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d134      	bne.n	8003194 <UART_SetConfig+0x138>
 800312a:	4b8b      	ldr	r3, [pc, #556]	; (8003358 <UART_SetConfig+0x2fc>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b0c      	cmp	r3, #12
 8003136:	d829      	bhi.n	800318c <UART_SetConfig+0x130>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <UART_SetConfig+0xe4>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003175 	.word	0x08003175
 8003144:	0800318d 	.word	0x0800318d
 8003148:	0800318d 	.word	0x0800318d
 800314c:	0800318d 	.word	0x0800318d
 8003150:	08003181 	.word	0x08003181
 8003154:	0800318d 	.word	0x0800318d
 8003158:	0800318d 	.word	0x0800318d
 800315c:	0800318d 	.word	0x0800318d
 8003160:	0800317b 	.word	0x0800317b
 8003164:	0800318d 	.word	0x0800318d
 8003168:	0800318d 	.word	0x0800318d
 800316c:	0800318d 	.word	0x0800318d
 8003170:	08003187 	.word	0x08003187
 8003174:	2300      	movs	r3, #0
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e117      	b.n	80033aa <UART_SetConfig+0x34e>
 800317a:	2302      	movs	r3, #2
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	e114      	b.n	80033aa <UART_SetConfig+0x34e>
 8003180:	2304      	movs	r3, #4
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e111      	b.n	80033aa <UART_SetConfig+0x34e>
 8003186:	2308      	movs	r3, #8
 8003188:	77fb      	strb	r3, [r7, #31]
 800318a:	e10e      	b.n	80033aa <UART_SetConfig+0x34e>
 800318c:	2310      	movs	r3, #16
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	bf00      	nop
 8003192:	e10a      	b.n	80033aa <UART_SetConfig+0x34e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a71      	ldr	r2, [pc, #452]	; (8003360 <UART_SetConfig+0x304>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d120      	bne.n	80031e0 <UART_SetConfig+0x184>
 800319e:	4b6e      	ldr	r3, [pc, #440]	; (8003358 <UART_SetConfig+0x2fc>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031a8:	2b10      	cmp	r3, #16
 80031aa:	d00f      	beq.n	80031cc <UART_SetConfig+0x170>
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d802      	bhi.n	80031b6 <UART_SetConfig+0x15a>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <UART_SetConfig+0x164>
 80031b4:	e010      	b.n	80031d8 <UART_SetConfig+0x17c>
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d005      	beq.n	80031c6 <UART_SetConfig+0x16a>
 80031ba:	2b30      	cmp	r3, #48	; 0x30
 80031bc:	d009      	beq.n	80031d2 <UART_SetConfig+0x176>
 80031be:	e00b      	b.n	80031d8 <UART_SetConfig+0x17c>
 80031c0:	2300      	movs	r3, #0
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e0f1      	b.n	80033aa <UART_SetConfig+0x34e>
 80031c6:	2302      	movs	r3, #2
 80031c8:	77fb      	strb	r3, [r7, #31]
 80031ca:	e0ee      	b.n	80033aa <UART_SetConfig+0x34e>
 80031cc:	2304      	movs	r3, #4
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e0eb      	b.n	80033aa <UART_SetConfig+0x34e>
 80031d2:	2308      	movs	r3, #8
 80031d4:	77fb      	strb	r3, [r7, #31]
 80031d6:	e0e8      	b.n	80033aa <UART_SetConfig+0x34e>
 80031d8:	2310      	movs	r3, #16
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	bf00      	nop
 80031de:	e0e4      	b.n	80033aa <UART_SetConfig+0x34e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a5f      	ldr	r2, [pc, #380]	; (8003364 <UART_SetConfig+0x308>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d120      	bne.n	800322c <UART_SetConfig+0x1d0>
 80031ea:	4b5b      	ldr	r3, [pc, #364]	; (8003358 <UART_SetConfig+0x2fc>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	d00f      	beq.n	8003218 <UART_SetConfig+0x1bc>
 80031f8:	2b40      	cmp	r3, #64	; 0x40
 80031fa:	d802      	bhi.n	8003202 <UART_SetConfig+0x1a6>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <UART_SetConfig+0x1b0>
 8003200:	e010      	b.n	8003224 <UART_SetConfig+0x1c8>
 8003202:	2b80      	cmp	r3, #128	; 0x80
 8003204:	d005      	beq.n	8003212 <UART_SetConfig+0x1b6>
 8003206:	2bc0      	cmp	r3, #192	; 0xc0
 8003208:	d009      	beq.n	800321e <UART_SetConfig+0x1c2>
 800320a:	e00b      	b.n	8003224 <UART_SetConfig+0x1c8>
 800320c:	2300      	movs	r3, #0
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e0cb      	b.n	80033aa <UART_SetConfig+0x34e>
 8003212:	2302      	movs	r3, #2
 8003214:	77fb      	strb	r3, [r7, #31]
 8003216:	e0c8      	b.n	80033aa <UART_SetConfig+0x34e>
 8003218:	2304      	movs	r3, #4
 800321a:	77fb      	strb	r3, [r7, #31]
 800321c:	e0c5      	b.n	80033aa <UART_SetConfig+0x34e>
 800321e:	2308      	movs	r3, #8
 8003220:	77fb      	strb	r3, [r7, #31]
 8003222:	e0c2      	b.n	80033aa <UART_SetConfig+0x34e>
 8003224:	2310      	movs	r3, #16
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	bf00      	nop
 800322a:	e0be      	b.n	80033aa <UART_SetConfig+0x34e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a4d      	ldr	r2, [pc, #308]	; (8003368 <UART_SetConfig+0x30c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d124      	bne.n	8003280 <UART_SetConfig+0x224>
 8003236:	4b48      	ldr	r3, [pc, #288]	; (8003358 <UART_SetConfig+0x2fc>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003244:	d012      	beq.n	800326c <UART_SetConfig+0x210>
 8003246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324a:	d802      	bhi.n	8003252 <UART_SetConfig+0x1f6>
 800324c:	2b00      	cmp	r3, #0
 800324e:	d007      	beq.n	8003260 <UART_SetConfig+0x204>
 8003250:	e012      	b.n	8003278 <UART_SetConfig+0x21c>
 8003252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003256:	d006      	beq.n	8003266 <UART_SetConfig+0x20a>
 8003258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800325c:	d009      	beq.n	8003272 <UART_SetConfig+0x216>
 800325e:	e00b      	b.n	8003278 <UART_SetConfig+0x21c>
 8003260:	2300      	movs	r3, #0
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	e0a1      	b.n	80033aa <UART_SetConfig+0x34e>
 8003266:	2302      	movs	r3, #2
 8003268:	77fb      	strb	r3, [r7, #31]
 800326a:	e09e      	b.n	80033aa <UART_SetConfig+0x34e>
 800326c:	2304      	movs	r3, #4
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	e09b      	b.n	80033aa <UART_SetConfig+0x34e>
 8003272:	2308      	movs	r3, #8
 8003274:	77fb      	strb	r3, [r7, #31]
 8003276:	e098      	b.n	80033aa <UART_SetConfig+0x34e>
 8003278:	2310      	movs	r3, #16
 800327a:	77fb      	strb	r3, [r7, #31]
 800327c:	bf00      	nop
 800327e:	e094      	b.n	80033aa <UART_SetConfig+0x34e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a39      	ldr	r2, [pc, #228]	; (800336c <UART_SetConfig+0x310>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d124      	bne.n	80032d4 <UART_SetConfig+0x278>
 800328a:	4b33      	ldr	r3, [pc, #204]	; (8003358 <UART_SetConfig+0x2fc>)
 800328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003290:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003298:	d012      	beq.n	80032c0 <UART_SetConfig+0x264>
 800329a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329e:	d802      	bhi.n	80032a6 <UART_SetConfig+0x24a>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d007      	beq.n	80032b4 <UART_SetConfig+0x258>
 80032a4:	e012      	b.n	80032cc <UART_SetConfig+0x270>
 80032a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032aa:	d006      	beq.n	80032ba <UART_SetConfig+0x25e>
 80032ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032b0:	d009      	beq.n	80032c6 <UART_SetConfig+0x26a>
 80032b2:	e00b      	b.n	80032cc <UART_SetConfig+0x270>
 80032b4:	2301      	movs	r3, #1
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e077      	b.n	80033aa <UART_SetConfig+0x34e>
 80032ba:	2302      	movs	r3, #2
 80032bc:	77fb      	strb	r3, [r7, #31]
 80032be:	e074      	b.n	80033aa <UART_SetConfig+0x34e>
 80032c0:	2304      	movs	r3, #4
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e071      	b.n	80033aa <UART_SetConfig+0x34e>
 80032c6:	2308      	movs	r3, #8
 80032c8:	77fb      	strb	r3, [r7, #31]
 80032ca:	e06e      	b.n	80033aa <UART_SetConfig+0x34e>
 80032cc:	2310      	movs	r3, #16
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	bf00      	nop
 80032d2:	e06a      	b.n	80033aa <UART_SetConfig+0x34e>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a25      	ldr	r2, [pc, #148]	; (8003370 <UART_SetConfig+0x314>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d124      	bne.n	8003328 <UART_SetConfig+0x2cc>
 80032de:	4b1e      	ldr	r3, [pc, #120]	; (8003358 <UART_SetConfig+0x2fc>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ec:	d012      	beq.n	8003314 <UART_SetConfig+0x2b8>
 80032ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f2:	d802      	bhi.n	80032fa <UART_SetConfig+0x29e>
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <UART_SetConfig+0x2ac>
 80032f8:	e012      	b.n	8003320 <UART_SetConfig+0x2c4>
 80032fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032fe:	d006      	beq.n	800330e <UART_SetConfig+0x2b2>
 8003300:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003304:	d009      	beq.n	800331a <UART_SetConfig+0x2be>
 8003306:	e00b      	b.n	8003320 <UART_SetConfig+0x2c4>
 8003308:	2300      	movs	r3, #0
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e04d      	b.n	80033aa <UART_SetConfig+0x34e>
 800330e:	2302      	movs	r3, #2
 8003310:	77fb      	strb	r3, [r7, #31]
 8003312:	e04a      	b.n	80033aa <UART_SetConfig+0x34e>
 8003314:	2304      	movs	r3, #4
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e047      	b.n	80033aa <UART_SetConfig+0x34e>
 800331a:	2308      	movs	r3, #8
 800331c:	77fb      	strb	r3, [r7, #31]
 800331e:	e044      	b.n	80033aa <UART_SetConfig+0x34e>
 8003320:	2310      	movs	r3, #16
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	bf00      	nop
 8003326:	e040      	b.n	80033aa <UART_SetConfig+0x34e>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a11      	ldr	r2, [pc, #68]	; (8003374 <UART_SetConfig+0x318>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d139      	bne.n	80033a6 <UART_SetConfig+0x34a>
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <UART_SetConfig+0x2fc>)
 8003334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003338:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800333c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003340:	d027      	beq.n	8003392 <UART_SetConfig+0x336>
 8003342:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003346:	d817      	bhi.n	8003378 <UART_SetConfig+0x31c>
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01c      	beq.n	8003386 <UART_SetConfig+0x32a>
 800334c:	e027      	b.n	800339e <UART_SetConfig+0x342>
 800334e:	bf00      	nop
 8003350:	efff69f3 	.word	0xefff69f3
 8003354:	40011000 	.word	0x40011000
 8003358:	40023800 	.word	0x40023800
 800335c:	40004400 	.word	0x40004400
 8003360:	40004800 	.word	0x40004800
 8003364:	40004c00 	.word	0x40004c00
 8003368:	40005000 	.word	0x40005000
 800336c:	40011400 	.word	0x40011400
 8003370:	40007800 	.word	0x40007800
 8003374:	40007c00 	.word	0x40007c00
 8003378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800337c:	d006      	beq.n	800338c <UART_SetConfig+0x330>
 800337e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003382:	d009      	beq.n	8003398 <UART_SetConfig+0x33c>
 8003384:	e00b      	b.n	800339e <UART_SetConfig+0x342>
 8003386:	2300      	movs	r3, #0
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	e00e      	b.n	80033aa <UART_SetConfig+0x34e>
 800338c:	2302      	movs	r3, #2
 800338e:	77fb      	strb	r3, [r7, #31]
 8003390:	e00b      	b.n	80033aa <UART_SetConfig+0x34e>
 8003392:	2304      	movs	r3, #4
 8003394:	77fb      	strb	r3, [r7, #31]
 8003396:	e008      	b.n	80033aa <UART_SetConfig+0x34e>
 8003398:	2308      	movs	r3, #8
 800339a:	77fb      	strb	r3, [r7, #31]
 800339c:	e005      	b.n	80033aa <UART_SetConfig+0x34e>
 800339e:	2310      	movs	r3, #16
 80033a0:	77fb      	strb	r3, [r7, #31]
 80033a2:	bf00      	nop
 80033a4:	e001      	b.n	80033aa <UART_SetConfig+0x34e>
 80033a6:	2310      	movs	r3, #16
 80033a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b2:	d17f      	bne.n	80034b4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80033b4:	7ffb      	ldrb	r3, [r7, #31]
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d85c      	bhi.n	8003474 <UART_SetConfig+0x418>
 80033ba:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <UART_SetConfig+0x364>)
 80033bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c0:	080033e5 	.word	0x080033e5
 80033c4:	08003405 	.word	0x08003405
 80033c8:	08003425 	.word	0x08003425
 80033cc:	08003475 	.word	0x08003475
 80033d0:	0800343d 	.word	0x0800343d
 80033d4:	08003475 	.word	0x08003475
 80033d8:	08003475 	.word	0x08003475
 80033dc:	08003475 	.word	0x08003475
 80033e0:	0800345d 	.word	0x0800345d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e4:	f7fe feac 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 80033e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	005a      	lsls	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	085b      	lsrs	r3, r3, #1
 80033f4:	441a      	add	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fe:	b29b      	uxth	r3, r3
 8003400:	61bb      	str	r3, [r7, #24]
        break;
 8003402:	e03a      	b.n	800347a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003404:	f7fe feb0 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8003408:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	005a      	lsls	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	441a      	add	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	fbb2 f3f3 	udiv	r3, r2, r3
 800341e:	b29b      	uxth	r3, r3
 8003420:	61bb      	str	r3, [r7, #24]
        break;
 8003422:	e02a      	b.n	800347a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	085a      	lsrs	r2, r3, #1
 800342a:	4b5f      	ldr	r3, [pc, #380]	; (80035a8 <UART_SetConfig+0x54c>)
 800342c:	4413      	add	r3, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6852      	ldr	r2, [r2, #4]
 8003432:	fbb3 f3f2 	udiv	r3, r3, r2
 8003436:	b29b      	uxth	r3, r3
 8003438:	61bb      	str	r3, [r7, #24]
        break;
 800343a:	e01e      	b.n	800347a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800343c:	f7fe fd9c 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8003440:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	005a      	lsls	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	085b      	lsrs	r3, r3, #1
 800344c:	441a      	add	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	fbb2 f3f3 	udiv	r3, r2, r3
 8003456:	b29b      	uxth	r3, r3
 8003458:	61bb      	str	r3, [r7, #24]
        break;
 800345a:	e00e      	b.n	800347a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	fbb2 f3f3 	udiv	r3, r2, r3
 800346e:	b29b      	uxth	r3, r3
 8003470:	61bb      	str	r3, [r7, #24]
        break;
 8003472:	e002      	b.n	800347a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	75fb      	strb	r3, [r7, #23]
        break;
 8003478:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b0f      	cmp	r3, #15
 800347e:	d916      	bls.n	80034ae <UART_SetConfig+0x452>
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003486:	d212      	bcs.n	80034ae <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	b29b      	uxth	r3, r3
 800348c:	f023 030f 	bic.w	r3, r3, #15
 8003490:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	085b      	lsrs	r3, r3, #1
 8003496:	b29b      	uxth	r3, r3
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	b29a      	uxth	r2, r3
 800349e:	897b      	ldrh	r3, [r7, #10]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	897a      	ldrh	r2, [r7, #10]
 80034aa:	60da      	str	r2, [r3, #12]
 80034ac:	e070      	b.n	8003590 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	75fb      	strb	r3, [r7, #23]
 80034b2:	e06d      	b.n	8003590 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80034b4:	7ffb      	ldrb	r3, [r7, #31]
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d859      	bhi.n	800356e <UART_SetConfig+0x512>
 80034ba:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <UART_SetConfig+0x464>)
 80034bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c0:	080034e5 	.word	0x080034e5
 80034c4:	08003503 	.word	0x08003503
 80034c8:	08003521 	.word	0x08003521
 80034cc:	0800356f 	.word	0x0800356f
 80034d0:	08003539 	.word	0x08003539
 80034d4:	0800356f 	.word	0x0800356f
 80034d8:	0800356f 	.word	0x0800356f
 80034dc:	0800356f 	.word	0x0800356f
 80034e0:	08003557 	.word	0x08003557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034e4:	f7fe fe2c 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 80034e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	085a      	lsrs	r2, r3, #1
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	441a      	add	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	61bb      	str	r3, [r7, #24]
        break;
 8003500:	e038      	b.n	8003574 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003502:	f7fe fe31 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8003506:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	085a      	lsrs	r2, r3, #1
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	441a      	add	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	fbb2 f3f3 	udiv	r3, r2, r3
 800351a:	b29b      	uxth	r3, r3
 800351c:	61bb      	str	r3, [r7, #24]
        break;
 800351e:	e029      	b.n	8003574 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	085a      	lsrs	r2, r3, #1
 8003526:	4b21      	ldr	r3, [pc, #132]	; (80035ac <UART_SetConfig+0x550>)
 8003528:	4413      	add	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6852      	ldr	r2, [r2, #4]
 800352e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003532:	b29b      	uxth	r3, r3
 8003534:	61bb      	str	r3, [r7, #24]
        break;
 8003536:	e01d      	b.n	8003574 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003538:	f7fe fd1e 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 800353c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	085a      	lsrs	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	441a      	add	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003550:	b29b      	uxth	r3, r3
 8003552:	61bb      	str	r3, [r7, #24]
        break;
 8003554:	e00e      	b.n	8003574 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	085b      	lsrs	r3, r3, #1
 800355c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	b29b      	uxth	r3, r3
 800356a:	61bb      	str	r3, [r7, #24]
        break;
 800356c:	e002      	b.n	8003574 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	75fb      	strb	r3, [r7, #23]
        break;
 8003572:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b0f      	cmp	r3, #15
 8003578:	d908      	bls.n	800358c <UART_SetConfig+0x530>
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003580:	d204      	bcs.n	800358c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	e001      	b.n	8003590 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800359c:	7dfb      	ldrb	r3, [r7, #23]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	01e84800 	.word	0x01e84800
 80035ac:	00f42400 	.word	0x00f42400

080035b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01a      	beq.n	80036c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ae:	d10a      	bne.n	80036c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	605a      	str	r2, [r3, #4]
  }
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003702:	f7fd fc63 	bl	8000fcc <HAL_GetTick>
 8003706:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b08      	cmp	r3, #8
 8003714:	d10e      	bne.n	8003734 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003716:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f814 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e00a      	b.n	800374a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2220      	movs	r2, #32
 800373e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	603b      	str	r3, [r7, #0]
 800375e:	4613      	mov	r3, r2
 8003760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003762:	e05d      	b.n	8003820 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376a:	d059      	beq.n	8003820 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376c:	f7fd fc2e 	bl	8000fcc <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	429a      	cmp	r2, r3
 800377a:	d302      	bcc.n	8003782 <UART_WaitOnFlagUntilTimeout+0x30>
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d11b      	bne.n	80037ba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003790:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e042      	b.n	8003840 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d02b      	beq.n	8003820 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037d6:	d123      	bne.n	8003820 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037e0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037f0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2220      	movs	r2, #32
 8003812:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e00f      	b.n	8003840 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4013      	ands	r3, r2
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	429a      	cmp	r2, r3
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	429a      	cmp	r2, r3
 800383c:	d092      	beq.n	8003764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003848:	b084      	sub	sp, #16
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	f107 001c 	add.w	r0, r7, #28
 8003856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	2b01      	cmp	r3, #1
 800385e:	d120      	bne.n	80038a2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <USB_CoreInit+0xac>)
 8003872:	4013      	ands	r3, r2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003886:	2b01      	cmp	r3, #1
 8003888:	d105      	bne.n	8003896 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fa52 	bl	8003d40 <USB_CoreReset>
 800389c:	4603      	mov	r3, r0
 800389e:	73fb      	strb	r3, [r7, #15]
 80038a0:	e010      	b.n	80038c4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fa46 	bl	8003d40 <USB_CoreReset>
 80038b4:	4603      	mov	r3, r0
 80038b6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d10b      	bne.n	80038e2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f043 0206 	orr.w	r2, r3, #6
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f043 0220 	orr.w	r2, r3, #32
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038ee:	b004      	add	sp, #16
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	ffbdffbf 	.word	0xffbdffbf

080038f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f023 0201 	bic.w	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	460b      	mov	r3, r1
 8003924:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d106      	bne.n	8003946 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	60da      	str	r2, [r3, #12]
 8003944:	e00b      	b.n	800395e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d106      	bne.n	800395a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	60da      	str	r2, [r3, #12]
 8003958:	e001      	b.n	800395e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e003      	b.n	8003966 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800395e:	2032      	movs	r0, #50	; 0x32
 8003960:	f7fd fb40 	bl	8000fe4 <HAL_Delay>

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003970:	b084      	sub	sp, #16
 8003972:	b580      	push	{r7, lr}
 8003974:	b086      	sub	sp, #24
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800397e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	e009      	b.n	80039a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	3340      	adds	r3, #64	; 0x40
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	2200      	movs	r2, #0
 800399c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	3301      	adds	r3, #1
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2b0e      	cmp	r3, #14
 80039a8:	d9f2      	bls.n	8003990 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d11c      	bne.n	80039ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039be:	f043 0302 	orr.w	r3, r3, #2
 80039c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e005      	b.n	80039f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039fc:	461a      	mov	r2, r3
 80039fe:	2300      	movs	r3, #0
 8003a00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a08:	4619      	mov	r1, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a10:	461a      	mov	r2, r3
 8003a12:	680b      	ldr	r3, [r1, #0]
 8003a14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d10c      	bne.n	8003a36 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d104      	bne.n	8003a2c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a22:	2100      	movs	r1, #0
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f959 	bl	8003cdc <USB_SetDevSpeed>
 8003a2a:	e018      	b.n	8003a5e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f954 	bl	8003cdc <USB_SetDevSpeed>
 8003a34:	e013      	b.n	8003a5e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d10c      	bne.n	8003a56 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d104      	bne.n	8003a4c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a42:	2100      	movs	r1, #0
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f949 	bl	8003cdc <USB_SetDevSpeed>
 8003a4a:	e008      	b.n	8003a5e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f944 	bl	8003cdc <USB_SetDevSpeed>
 8003a54:	e003      	b.n	8003a5e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a56:	2103      	movs	r1, #3
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f93f 	bl	8003cdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a5e:	2110      	movs	r1, #16
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f8f3 	bl	8003c4c <USB_FlushTxFifo>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f911 	bl	8003c98 <USB_FlushRxFifo>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a86:	461a      	mov	r2, r3
 8003a88:	2300      	movs	r3, #0
 8003a8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a92:	461a      	mov	r2, r3
 8003a94:	2300      	movs	r3, #0
 8003a96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	e043      	b.n	8003b32 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003abc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ac0:	d118      	bne.n	8003af4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	e013      	b.n	8003b06 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aea:	461a      	mov	r2, r3
 8003aec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	e008      	b.n	8003b06 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b00:	461a      	mov	r2, r3
 8003b02:	2300      	movs	r3, #0
 8003b04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b12:	461a      	mov	r2, r3
 8003b14:	2300      	movs	r3, #0
 8003b16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b24:	461a      	mov	r2, r3
 8003b26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d3b7      	bcc.n	8003aaa <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	e043      	b.n	8003bc8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b56:	d118      	bne.n	8003b8a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e013      	b.n	8003b9c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b80:	461a      	mov	r2, r3
 8003b82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	e008      	b.n	8003b9c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b96:	461a      	mov	r2, r3
 8003b98:	2300      	movs	r3, #0
 8003b9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2300      	movs	r3, #0
 8003bac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d3b7      	bcc.n	8003b40 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003be2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003bf0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	f043 0210 	orr.w	r2, r3, #16
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699a      	ldr	r2, [r3, #24]
 8003c08:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <USB_DevInit+0x2d4>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	f043 0208 	orr.w	r2, r3, #8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d105      	bne.n	8003c34 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699a      	ldr	r2, [r3, #24]
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <USB_DevInit+0x2d8>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c40:	b004      	add	sp, #16
 8003c42:	4770      	bx	lr
 8003c44:	803c3800 	.word	0x803c3800
 8003c48:	40000004 	.word	0x40000004

08003c4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	019b      	lsls	r3, r3, #6
 8003c5e:	f043 0220 	orr.w	r2, r3, #32
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4a09      	ldr	r2, [pc, #36]	; (8003c94 <USB_FlushTxFifo+0x48>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d901      	bls.n	8003c78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e006      	b.n	8003c86 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d0f0      	beq.n	8003c66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	00030d40 	.word	0x00030d40

08003c98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2210      	movs	r2, #16
 8003ca8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3301      	adds	r3, #1
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4a09      	ldr	r2, [pc, #36]	; (8003cd8 <USB_FlushRxFifo+0x40>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d901      	bls.n	8003cbc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e006      	b.n	8003cca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d0f0      	beq.n	8003caa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	00030d40 	.word	0x00030d40

08003cdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	68f9      	ldr	r1, [r7, #12]
 8003cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d28:	f043 0302 	orr.w	r3, r3, #2
 8003d2c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003d2e:	2003      	movs	r0, #3
 8003d30:	f7fd f958 	bl	8000fe4 <HAL_Delay>

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4a13      	ldr	r2, [pc, #76]	; (8003da4 <USB_CoreReset+0x64>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e01b      	b.n	8003d96 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	daf2      	bge.n	8003d4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f043 0201 	orr.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a09      	ldr	r2, [pc, #36]	; (8003da4 <USB_CoreReset+0x64>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d901      	bls.n	8003d88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e006      	b.n	8003d96 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d0f0      	beq.n	8003d76 <USB_CoreReset+0x36>

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	00030d40 	.word	0x00030d40

08003da8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003dac:	bf00      	nop
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dbe:	f3ef 8305 	mrs	r3, IPSR
 8003dc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dca:	f3ef 8310 	mrs	r3, PRIMASK
 8003dce:	607b      	str	r3, [r7, #4]
  return(result);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d105      	bne.n	8003de2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8003dda:	603b      	str	r3, [r7, #0]
  return(result);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d007      	beq.n	8003df2 <osKernelInitialize+0x3a>
 8003de2:	4b0e      	ldr	r3, [pc, #56]	; (8003e1c <osKernelInitialize+0x64>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d103      	bne.n	8003df2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003dea:	f06f 0305 	mvn.w	r3, #5
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	e00c      	b.n	8003e0c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <osKernelInitialize+0x64>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d105      	bne.n	8003e06 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003dfa:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <osKernelInitialize+0x64>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	e002      	b.n	8003e0c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	2000002c 	.word	0x2000002c

08003e20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e26:	f3ef 8305 	mrs	r3, IPSR
 8003e2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10f      	bne.n	8003e52 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e32:	f3ef 8310 	mrs	r3, PRIMASK
 8003e36:	607b      	str	r3, [r7, #4]
  return(result);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d105      	bne.n	8003e4a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e3e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e42:	603b      	str	r3, [r7, #0]
  return(result);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d007      	beq.n	8003e5a <osKernelStart+0x3a>
 8003e4a:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <osKernelStart+0x68>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d103      	bne.n	8003e5a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003e52:	f06f 0305 	mvn.w	r3, #5
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	e010      	b.n	8003e7c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <osKernelStart+0x68>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d109      	bne.n	8003e76 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e62:	f7ff ffa1 	bl	8003da8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <osKernelStart+0x68>)
 8003e68:	2202      	movs	r2, #2
 8003e6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e6c:	f001 fb58 	bl	8005520 <vTaskStartScheduler>
      stat = osOK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e002      	b.n	8003e7c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003e76:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	2000002c 	.word	0x2000002c

08003e8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b090      	sub	sp, #64	; 0x40
 8003e90:	af04      	add	r7, sp, #16
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e9c:	f3ef 8305 	mrs	r3, IPSR
 8003ea0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ea2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f040 808f 	bne.w	8003fc8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8003eae:	61bb      	str	r3, [r7, #24]
  return(result);
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d105      	bne.n	8003ec2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8003eba:	617b      	str	r3, [r7, #20]
  return(result);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <osThreadNew+0x3e>
 8003ec2:	4b44      	ldr	r3, [pc, #272]	; (8003fd4 <osThreadNew+0x148>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d07e      	beq.n	8003fc8 <osThreadNew+0x13c>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d07b      	beq.n	8003fc8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003ed4:	2318      	movs	r3, #24
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d045      	beq.n	8003f74 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <osThreadNew+0x6a>
        name = attr->name;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d008      	beq.n	8003f1c <osThreadNew+0x90>
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	2b38      	cmp	r3, #56	; 0x38
 8003f0e:	d805      	bhi.n	8003f1c <osThreadNew+0x90>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <osThreadNew+0x94>
        return (NULL);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	e054      	b.n	8003fca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00e      	beq.n	8003f56 <osThreadNew+0xca>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b5b      	cmp	r3, #91	; 0x5b
 8003f3e:	d90a      	bls.n	8003f56 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d006      	beq.n	8003f56 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <osThreadNew+0xca>
        mem = 1;
 8003f50:	2301      	movs	r3, #1
 8003f52:	623b      	str	r3, [r7, #32]
 8003f54:	e010      	b.n	8003f78 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10c      	bne.n	8003f78 <osThreadNew+0xec>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d108      	bne.n	8003f78 <osThreadNew+0xec>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d104      	bne.n	8003f78 <osThreadNew+0xec>
          mem = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	623b      	str	r3, [r7, #32]
 8003f72:	e001      	b.n	8003f78 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d110      	bne.n	8003fa0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f86:	9202      	str	r2, [sp, #8]
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f001 f8f7 	bl	8005188 <xTaskCreateStatic>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	e013      	b.n	8003fc8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d110      	bne.n	8003fc8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	f107 0310 	add.w	r3, r7, #16
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f001 f945 	bl	8005248 <xTaskCreate>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d001      	beq.n	8003fc8 <osThreadNew+0x13c>
          hTask = NULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003fc8:	693b      	ldr	r3, [r7, #16]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3730      	adds	r7, #48	; 0x30
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	2000002c 	.word	0x2000002c

08003fd8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fe0:	f3ef 8305 	mrs	r3, IPSR
 8003fe4:	613b      	str	r3, [r7, #16]
  return(result);
 8003fe6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10f      	bne.n	800400c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fec:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d105      	bne.n	8004004 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ff8:	f3ef 8311 	mrs	r3, BASEPRI
 8003ffc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d007      	beq.n	8004014 <osDelay+0x3c>
 8004004:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <osDelay+0x58>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d103      	bne.n	8004014 <osDelay+0x3c>
    stat = osErrorISR;
 800400c:	f06f 0305 	mvn.w	r3, #5
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	e007      	b.n	8004024 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <osDelay+0x4c>
      vTaskDelay(ticks);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f001 fa48 	bl	80054b4 <vTaskDelay>
    }
  }

  return (stat);
 8004024:	697b      	ldr	r3, [r7, #20]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	2000002c 	.word	0x2000002c

08004034 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f002 fb59 	bl	80066f4 <pvTimerGetTimerID>
 8004042:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <TimerCallback+0x22>
    callb->func (callb->arg);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	6852      	ldr	r2, [r2, #4]
 8004052:	4610      	mov	r0, r2
 8004054:	4798      	blx	r3
  }
}
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004060:	b580      	push	{r7, lr}
 8004062:	b08e      	sub	sp, #56	; 0x38
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	460b      	mov	r3, r1
 800406e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004070:	2300      	movs	r3, #0
 8004072:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004074:	f3ef 8305 	mrs	r3, IPSR
 8004078:	61bb      	str	r3, [r7, #24]
  return(result);
 800407a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800407c:	2b00      	cmp	r3, #0
 800407e:	d16a      	bne.n	8004156 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004080:	f3ef 8310 	mrs	r3, PRIMASK
 8004084:	617b      	str	r3, [r7, #20]
  return(result);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d105      	bne.n	8004098 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800408c:	f3ef 8311 	mrs	r3, BASEPRI
 8004090:	613b      	str	r3, [r7, #16]
  return(result);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <osTimerNew+0x40>
 8004098:	4b31      	ldr	r3, [pc, #196]	; (8004160 <osTimerNew+0x100>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b02      	cmp	r3, #2
 800409e:	d05a      	beq.n	8004156 <osTimerNew+0xf6>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d057      	beq.n	8004156 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80040a6:	2008      	movs	r0, #8
 80040a8:	f002 fd70 	bl	8006b8c <pvPortMalloc>
 80040ac:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d050      	beq.n	8004156 <osTimerNew+0xf6>
      callb->func = func;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80040c0:	7afb      	ldrb	r3, [r7, #11]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d102      	bne.n	80040cc <osTimerNew+0x6c>
        reload = pdFALSE;
 80040c6:	2300      	movs	r3, #0
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ca:	e001      	b.n	80040d0 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 80040cc:	2301      	movs	r3, #1
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295
 80040d4:	623b      	str	r3, [r7, #32]
      name = NULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01c      	beq.n	800411a <osTimerNew+0xba>
        if (attr->name != NULL) {
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <osTimerNew+0x8e>
          name = attr->name;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d006      	beq.n	8004104 <osTimerNew+0xa4>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b2b      	cmp	r3, #43	; 0x2b
 80040fc:	d902      	bls.n	8004104 <osTimerNew+0xa4>
          mem = 1;
 80040fe:	2301      	movs	r3, #1
 8004100:	623b      	str	r3, [r7, #32]
 8004102:	e00c      	b.n	800411e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d108      	bne.n	800411e <osTimerNew+0xbe>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d104      	bne.n	800411e <osTimerNew+0xbe>
            mem = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	623b      	str	r3, [r7, #32]
 8004118:	e001      	b.n	800411e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d10c      	bne.n	800413e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <osTimerNew+0x104>)
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004132:	2101      	movs	r1, #1
 8004134:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004136:	f001 ff56 	bl	8005fe6 <xTimerCreateStatic>
 800413a:	62b8      	str	r0, [r7, #40]	; 0x28
 800413c:	e00b      	b.n	8004156 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d108      	bne.n	8004156 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004144:	4b07      	ldr	r3, [pc, #28]	; (8004164 <osTimerNew+0x104>)
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414c:	2101      	movs	r1, #1
 800414e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004150:	f001 ff28 	bl	8005fa4 <xTimerCreate>
 8004154:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004158:	4618      	mov	r0, r3
 800415a:	3730      	adds	r7, #48	; 0x30
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	2000002c 	.word	0x2000002c
 8004164:	08004035 	.word	0x08004035

08004168 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	; 0x28
 800416c:	af02      	add	r7, sp, #8
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004176:	f3ef 8305 	mrs	r3, IPSR
 800417a:	617b      	str	r3, [r7, #20]
  return(result);
 800417c:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10f      	bne.n	80041a2 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004182:	f3ef 8310 	mrs	r3, PRIMASK
 8004186:	613b      	str	r3, [r7, #16]
  return(result);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d105      	bne.n	800419a <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800418e:	f3ef 8311 	mrs	r3, BASEPRI
 8004192:	60fb      	str	r3, [r7, #12]
  return(result);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <osTimerStart+0x42>
 800419a:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <osTimerStart+0x7c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d103      	bne.n	80041aa <osTimerStart+0x42>
    stat = osErrorISR;
 80041a2:	f06f 0305 	mvn.w	r3, #5
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	e017      	b.n	80041da <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d103      	bne.n	80041b8 <osTimerStart+0x50>
    stat = osErrorParameter;
 80041b0:	f06f 0303 	mvn.w	r3, #3
 80041b4:	61fb      	str	r3, [r7, #28]
 80041b6:	e010      	b.n	80041da <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80041b8:	2300      	movs	r3, #0
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	2300      	movs	r3, #0
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	2104      	movs	r1, #4
 80041c2:	69b8      	ldr	r0, [r7, #24]
 80041c4:	f001 ff8c 	bl	80060e0 <xTimerGenericCommand>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d102      	bne.n	80041d4 <osTimerStart+0x6c>
      stat = osOK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	e002      	b.n	80041da <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 80041d4:	f06f 0302 	mvn.w	r3, #2
 80041d8:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80041da:	69fb      	ldr	r3, [r7, #28]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	2000002c 	.word	0x2000002c

080041e8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08c      	sub	sp, #48	; 0x30
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041f8:	f3ef 8305 	mrs	r3, IPSR
 80041fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80041fe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004200:	2b00      	cmp	r3, #0
 8004202:	f040 8087 	bne.w	8004314 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004206:	f3ef 8310 	mrs	r3, PRIMASK
 800420a:	617b      	str	r3, [r7, #20]
  return(result);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d105      	bne.n	800421e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004212:	f3ef 8311 	mrs	r3, BASEPRI
 8004216:	613b      	str	r3, [r7, #16]
  return(result);
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <osSemaphoreNew+0x3e>
 800421e:	4b40      	ldr	r3, [pc, #256]	; (8004320 <osSemaphoreNew+0x138>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d076      	beq.n	8004314 <osSemaphoreNew+0x12c>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d073      	beq.n	8004314 <osSemaphoreNew+0x12c>
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	429a      	cmp	r2, r3
 8004232:	d86f      	bhi.n	8004314 <osSemaphoreNew+0x12c>
    mem = -1;
 8004234:	f04f 33ff 	mov.w	r3, #4294967295
 8004238:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d015      	beq.n	800426c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d006      	beq.n	8004256 <osSemaphoreNew+0x6e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	2b4f      	cmp	r3, #79	; 0x4f
 800424e:	d902      	bls.n	8004256 <osSemaphoreNew+0x6e>
        mem = 1;
 8004250:	2301      	movs	r3, #1
 8004252:	623b      	str	r3, [r7, #32]
 8004254:	e00c      	b.n	8004270 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d108      	bne.n	8004270 <osSemaphoreNew+0x88>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d104      	bne.n	8004270 <osSemaphoreNew+0x88>
          mem = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	623b      	str	r3, [r7, #32]
 800426a:	e001      	b.n	8004270 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d04d      	beq.n	8004314 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d129      	bne.n	80042d2 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d10b      	bne.n	800429c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	2303      	movs	r3, #3
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	2200      	movs	r2, #0
 8004290:	2100      	movs	r1, #0
 8004292:	2001      	movs	r0, #1
 8004294:	f000 fa10 	bl	80046b8 <xQueueGenericCreateStatic>
 8004298:	6278      	str	r0, [r7, #36]	; 0x24
 800429a:	e005      	b.n	80042a8 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800429c:	2203      	movs	r2, #3
 800429e:	2100      	movs	r1, #0
 80042a0:	2001      	movs	r0, #1
 80042a2:	f000 fa86 	bl	80047b2 <xQueueGenericCreate>
 80042a6:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d022      	beq.n	80042f4 <osSemaphoreNew+0x10c>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01f      	beq.n	80042f4 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80042b4:	2300      	movs	r3, #0
 80042b6:	2200      	movs	r2, #0
 80042b8:	2100      	movs	r1, #0
 80042ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042bc:	f000 fb4c 	bl	8004958 <xQueueGenericSend>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d016      	beq.n	80042f4 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80042c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042c8:	f000 fda4 	bl	8004e14 <vQueueDelete>
            hSemaphore = NULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
 80042d0:	e010      	b.n	80042f4 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d108      	bne.n	80042ea <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	461a      	mov	r2, r3
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 faca 	bl	800487a <xQueueCreateCountingSemaphoreStatic>
 80042e6:	6278      	str	r0, [r7, #36]	; 0x24
 80042e8:	e004      	b.n	80042f4 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fafd 	bl	80048ec <xQueueCreateCountingSemaphore>
 80042f2:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00c      	beq.n	8004314 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <osSemaphoreNew+0x120>
          name = attr->name;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	e001      	b.n	800430c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800430c:	69f9      	ldr	r1, [r7, #28]
 800430e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004310:	f000 feb4 	bl	800507c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004316:	4618      	mov	r0, r3
 8004318:	3728      	adds	r7, #40	; 0x28
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	2000002c 	.word	0x2000002c

08004324 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b08c      	sub	sp, #48	; 0x30
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004330:	2300      	movs	r3, #0
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004334:	f3ef 8305 	mrs	r3, IPSR
 8004338:	61bb      	str	r3, [r7, #24]
  return(result);
 800433a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800433c:	2b00      	cmp	r3, #0
 800433e:	d170      	bne.n	8004422 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004340:	f3ef 8310 	mrs	r3, PRIMASK
 8004344:	617b      	str	r3, [r7, #20]
  return(result);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d105      	bne.n	8004358 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800434c:	f3ef 8311 	mrs	r3, BASEPRI
 8004350:	613b      	str	r3, [r7, #16]
  return(result);
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <osMessageQueueNew+0x3c>
 8004358:	4b34      	ldr	r3, [pc, #208]	; (800442c <osMessageQueueNew+0x108>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d060      	beq.n	8004422 <osMessageQueueNew+0xfe>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d05d      	beq.n	8004422 <osMessageQueueNew+0xfe>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d05a      	beq.n	8004422 <osMessageQueueNew+0xfe>
    mem = -1;
 800436c:	f04f 33ff 	mov.w	r3, #4294967295
 8004370:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d029      	beq.n	80043cc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d012      	beq.n	80043a6 <osMessageQueueNew+0x82>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	2b4f      	cmp	r3, #79	; 0x4f
 8004386:	d90e      	bls.n	80043a6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	429a      	cmp	r2, r3
 800439e:	d302      	bcc.n	80043a6 <osMessageQueueNew+0x82>
        mem = 1;
 80043a0:	2301      	movs	r3, #1
 80043a2:	623b      	str	r3, [r7, #32]
 80043a4:	e014      	b.n	80043d0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d110      	bne.n	80043d0 <osMessageQueueNew+0xac>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10c      	bne.n	80043d0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d108      	bne.n	80043d0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d104      	bne.n	80043d0 <osMessageQueueNew+0xac>
          mem = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	623b      	str	r3, [r7, #32]
 80043ca:	e001      	b.n	80043d0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d10c      	bne.n	80043f0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6899      	ldr	r1, [r3, #8]
 80043de:	2300      	movs	r3, #0
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	460b      	mov	r3, r1
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f966 	bl	80046b8 <xQueueGenericCreateStatic>
 80043ec:	6278      	str	r0, [r7, #36]	; 0x24
 80043ee:	e008      	b.n	8004402 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d105      	bne.n	8004402 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80043f6:	2200      	movs	r2, #0
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 f9d9 	bl	80047b2 <xQueueGenericCreate>
 8004400:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00c      	beq.n	8004422 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <osMessageQueueNew+0xf2>
        name = attr->name;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	61fb      	str	r3, [r7, #28]
 8004414:	e001      	b.n	800441a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800441a:	69f9      	ldr	r1, [r7, #28]
 800441c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800441e:	f000 fe2d 	bl	800507c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004424:	4618      	mov	r0, r3
 8004426:	3728      	adds	r7, #40	; 0x28
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	2000002c 	.word	0x2000002c

08004430 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4a07      	ldr	r2, [pc, #28]	; (800445c <vApplicationGetIdleTaskMemory+0x2c>)
 8004440:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4a06      	ldr	r2, [pc, #24]	; (8004460 <vApplicationGetIdleTaskMemory+0x30>)
 8004446:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2280      	movs	r2, #128	; 0x80
 800444c:	601a      	str	r2, [r3, #0]
}
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000030 	.word	0x20000030
 8004460:	2000008c 	.word	0x2000008c

08004464 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4a07      	ldr	r2, [pc, #28]	; (8004490 <vApplicationGetTimerTaskMemory+0x2c>)
 8004474:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	4a06      	ldr	r2, [pc, #24]	; (8004494 <vApplicationGetTimerTaskMemory+0x30>)
 800447a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004482:	601a      	str	r2, [r3, #0]
}
 8004484:	bf00      	nop
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	2000028c 	.word	0x2000028c
 8004494:	200002e8 	.word	0x200002e8

08004498 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f103 0208 	add.w	r2, r3, #8
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f04f 32ff 	mov.w	r2, #4294967295
 80044b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f103 0208 	add.w	r2, r3, #8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f103 0208 	add.w	r2, r3, #8
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	601a      	str	r2, [r3, #0]
}
 800452e:	bf00      	nop
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800453a:	b480      	push	{r7}
 800453c:	b085      	sub	sp, #20
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d103      	bne.n	800455a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	e00c      	b.n	8004574 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3308      	adds	r3, #8
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e002      	b.n	8004568 <vListInsert+0x2e>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	429a      	cmp	r2, r3
 8004572:	d2f6      	bcs.n	8004562 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	601a      	str	r2, [r3, #0]
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6892      	ldr	r2, [r2, #8]
 80045c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6852      	ldr	r2, [r2, #4]
 80045cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d103      	bne.n	80045e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	1e5a      	subs	r2, r3, #1
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10b      	bne.n	800462c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	b672      	cpsid	i
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	b662      	cpsie	i
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	e7fe      	b.n	800462a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800462c:	f002 f98c 	bl	8006948 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	68f9      	ldr	r1, [r7, #12]
 800463a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800463c:	fb01 f303 	mul.w	r3, r1, r3
 8004640:	441a      	add	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465c:	3b01      	subs	r3, #1
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	441a      	add	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	22ff      	movs	r2, #255	; 0xff
 8004670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	22ff      	movs	r2, #255	; 0xff
 8004678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d109      	bne.n	8004696 <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00f      	beq.n	80046aa <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3310      	adds	r3, #16
 800468e:	4618      	mov	r0, r3
 8004690:	f001 f9a4 	bl	80059dc <xTaskRemoveFromEventList>
 8004694:	e009      	b.n	80046aa <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	3310      	adds	r3, #16
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff fefc 	bl	8004498 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3324      	adds	r3, #36	; 0x24
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff fef7 	bl	8004498 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046aa:	f002 f97f 	bl	80069ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046ae:	2301      	movs	r3, #1
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08e      	sub	sp, #56	; 0x38
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10b      	bne.n	80046e4 <xQueueGenericCreateStatic+0x2c>
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	b672      	cpsid	i
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	b662      	cpsie	i
 80046e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046e2:	e7fe      	b.n	80046e2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10b      	bne.n	8004702 <xQueueGenericCreateStatic+0x4a>
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	b672      	cpsid	i
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	b662      	cpsie	i
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004700:	e7fe      	b.n	8004700 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <xQueueGenericCreateStatic+0x56>
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <xQueueGenericCreateStatic+0x5a>
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <xQueueGenericCreateStatic+0x5c>
 8004712:	2300      	movs	r3, #0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <xQueueGenericCreateStatic+0x78>
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	b672      	cpsid	i
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	b662      	cpsie	i
 800472c:	623b      	str	r3, [r7, #32]
 800472e:	e7fe      	b.n	800472e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d102      	bne.n	800473c <xQueueGenericCreateStatic+0x84>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <xQueueGenericCreateStatic+0x88>
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <xQueueGenericCreateStatic+0x8a>
 8004740:	2300      	movs	r3, #0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10b      	bne.n	800475e <xQueueGenericCreateStatic+0xa6>
 8004746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474a:	b672      	cpsid	i
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	b662      	cpsie	i
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	e7fe      	b.n	800475c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800475e:	2350      	movs	r3, #80	; 0x50
 8004760:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b50      	cmp	r3, #80	; 0x50
 8004766:	d00b      	beq.n	8004780 <xQueueGenericCreateStatic+0xc8>
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	b672      	cpsid	i
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	b662      	cpsie	i
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	e7fe      	b.n	800477e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004780:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00d      	beq.n	80047a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800478c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004794:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	4613      	mov	r3, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f846 	bl	8004834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80047a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3730      	adds	r7, #48	; 0x30
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b08a      	sub	sp, #40	; 0x28
 80047b6:	af02      	add	r7, sp, #8
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	4613      	mov	r3, r2
 80047be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <xQueueGenericCreate+0x2c>
 80047c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ca:	b672      	cpsid	i
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	b662      	cpsie	i
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	e7fe      	b.n	80047dc <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	e004      	b.n	80047f4 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	fb02 f303 	mul.w	r3, r2, r3
 80047f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	3350      	adds	r3, #80	; 0x50
 80047f8:	4618      	mov	r0, r3
 80047fa:	f002 f9c7 	bl	8006b8c <pvPortMalloc>
 80047fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d011      	beq.n	800482a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	3350      	adds	r3, #80	; 0x50
 800480e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004818:	79fa      	ldrb	r2, [r7, #7]
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	4613      	mov	r3, r2
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f805 	bl	8004834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800482a:	69bb      	ldr	r3, [r7, #24]
	}
 800482c:	4618      	mov	r0, r3
 800482e:	3720      	adds	r7, #32
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d103      	bne.n	8004850 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	e002      	b.n	8004856 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004862:	2101      	movs	r1, #1
 8004864:	69b8      	ldr	r0, [r7, #24]
 8004866:	f7ff fecb 	bl	8004600 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	78fa      	ldrb	r2, [r7, #3]
 800486e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004872:	bf00      	nop
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800487a:	b580      	push	{r7, lr}
 800487c:	b08a      	sub	sp, #40	; 0x28
 800487e:	af02      	add	r7, sp, #8
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10b      	bne.n	80048a4 <xQueueCreateCountingSemaphoreStatic+0x2a>
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	b672      	cpsid	i
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	b662      	cpsie	i
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	e7fe      	b.n	80048a2 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d90b      	bls.n	80048c4 <xQueueCreateCountingSemaphoreStatic+0x4a>
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	b672      	cpsid	i
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	b662      	cpsie	i
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e7fe      	b.n	80048c2 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80048c4:	2302      	movs	r3, #2
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	2100      	movs	r1, #0
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f7ff fef2 	bl	80046b8 <xQueueGenericCreateStatic>
 80048d4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80048e2:	69fb      	ldr	r3, [r7, #28]
	}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3720      	adds	r7, #32
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10b      	bne.n	8004914 <xQueueCreateCountingSemaphore+0x28>
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	b672      	cpsid	i
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	b662      	cpsie	i
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	e7fe      	b.n	8004912 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	429a      	cmp	r2, r3
 800491a:	d90b      	bls.n	8004934 <xQueueCreateCountingSemaphore+0x48>
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	b672      	cpsid	i
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	b662      	cpsie	i
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	e7fe      	b.n	8004932 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004934:	2202      	movs	r2, #2
 8004936:	2100      	movs	r1, #0
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff ff3a 	bl	80047b2 <xQueueGenericCreate>
 800493e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800494c:	697b      	ldr	r3, [r7, #20]
	}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08e      	sub	sp, #56	; 0x38
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004966:	2300      	movs	r3, #0
 8004968:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10b      	bne.n	800498c <xQueueGenericSend+0x34>
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	b672      	cpsid	i
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	b662      	cpsie	i
 8004988:	62bb      	str	r3, [r7, #40]	; 0x28
 800498a:	e7fe      	b.n	800498a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d103      	bne.n	800499a <xQueueGenericSend+0x42>
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <xQueueGenericSend+0x46>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <xQueueGenericSend+0x48>
 800499e:	2300      	movs	r3, #0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10b      	bne.n	80049bc <xQueueGenericSend+0x64>
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	b672      	cpsid	i
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	b662      	cpsie	i
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ba:	e7fe      	b.n	80049ba <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d103      	bne.n	80049ca <xQueueGenericSend+0x72>
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <xQueueGenericSend+0x76>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e000      	b.n	80049d0 <xQueueGenericSend+0x78>
 80049ce:	2300      	movs	r3, #0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10b      	bne.n	80049ec <xQueueGenericSend+0x94>
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	b672      	cpsid	i
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	b662      	cpsie	i
 80049e8:	623b      	str	r3, [r7, #32]
 80049ea:	e7fe      	b.n	80049ea <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049ec:	f001 f9ae 	bl	8005d4c <xTaskGetSchedulerState>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d102      	bne.n	80049fc <xQueueGenericSend+0xa4>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <xQueueGenericSend+0xa8>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <xQueueGenericSend+0xaa>
 8004a00:	2300      	movs	r3, #0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10b      	bne.n	8004a1e <xQueueGenericSend+0xc6>
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	b672      	cpsid	i
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	b662      	cpsie	i
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	e7fe      	b.n	8004a1c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a1e:	f001 ff93 	bl	8006948 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d302      	bcc.n	8004a34 <xQueueGenericSend+0xdc>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d112      	bne.n	8004a5a <xQueueGenericSend+0x102>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a3a:	f000 fa0f 	bl	8004e5c <prvCopyDataToQueue>
 8004a3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d004      	beq.n	8004a52 <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4a:	3324      	adds	r3, #36	; 0x24
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 ffc5 	bl	80059dc <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a52:	f001 ffab 	bl	80069ac <vPortExitCritical>
				return pdPASS;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e062      	b.n	8004b20 <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d103      	bne.n	8004a68 <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a60:	f001 ffa4 	bl	80069ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e05b      	b.n	8004b20 <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a6e:	f107 0314 	add.w	r3, r7, #20
 8004a72:	4618      	mov	r0, r3
 8004a74:	f001 f816 	bl	8005aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a7c:	f001 ff96 	bl	80069ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a80:	f000 fdb6 	bl	80055f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a84:	f001 ff60 	bl	8006948 <vPortEnterCritical>
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a8e:	b25b      	sxtb	r3, r3
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a94:	d103      	bne.n	8004a9e <xQueueGenericSend+0x146>
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aa4:	b25b      	sxtb	r3, r3
 8004aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aaa:	d103      	bne.n	8004ab4 <xQueueGenericSend+0x15c>
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab4:	f001 ff7a 	bl	80069ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ab8:	1d3a      	adds	r2, r7, #4
 8004aba:	f107 0314 	add.w	r3, r7, #20
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f001 f805 	bl	8005ad0 <xTaskCheckForTimeOut>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d123      	bne.n	8004b14 <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ace:	f000 fabd 	bl	800504c <prvIsQueueFull>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d017      	beq.n	8004b08 <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	3310      	adds	r3, #16
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	4611      	mov	r1, r2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 ff29 	bl	8005938 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ae6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ae8:	f000 fa48 	bl	8004f7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004aec:	f000 fd8e 	bl	800560c <xTaskResumeAll>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d193      	bne.n	8004a1e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004af6:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <xQueueGenericSend+0x1d0>)
 8004af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	e78a      	b.n	8004a1e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b0a:	f000 fa37 	bl	8004f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b0e:	f000 fd7d 	bl	800560c <xTaskResumeAll>
 8004b12:	e784      	b.n	8004a1e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b16:	f000 fa31 	bl	8004f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b1a:	f000 fd77 	bl	800560c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3738      	adds	r7, #56	; 0x38
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	; 0x38
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <xQueueGenericSendFromISR+0x30>
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	b672      	cpsid	i
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	b662      	cpsie	i
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5a:	e7fe      	b.n	8004b5a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d103      	bne.n	8004b6a <xQueueGenericSendFromISR+0x3e>
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <xQueueGenericSendFromISR+0x42>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e000      	b.n	8004b70 <xQueueGenericSendFromISR+0x44>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10b      	bne.n	8004b8c <xQueueGenericSendFromISR+0x60>
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	b672      	cpsid	i
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	b662      	cpsie	i
 8004b88:	623b      	str	r3, [r7, #32]
 8004b8a:	e7fe      	b.n	8004b8a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d103      	bne.n	8004b9a <xQueueGenericSendFromISR+0x6e>
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <xQueueGenericSendFromISR+0x72>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <xQueueGenericSendFromISR+0x74>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <xQueueGenericSendFromISR+0x90>
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	b672      	cpsid	i
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	b662      	cpsie	i
 8004bb8:	61fb      	str	r3, [r7, #28]
 8004bba:	e7fe      	b.n	8004bba <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bbc:	f001 ffa4 	bl	8006b08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bc0:	f3ef 8211 	mrs	r2, BASEPRI
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	b672      	cpsid	i
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	b662      	cpsie	i
 8004bd8:	61ba      	str	r2, [r7, #24]
 8004bda:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d302      	bcc.n	8004bf2 <xQueueGenericSendFromISR+0xc6>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d12c      	bne.n	8004c4c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c02:	f000 f92b 	bl	8004e5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c06:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d112      	bne.n	8004c36 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d016      	beq.n	8004c46 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	3324      	adds	r3, #36	; 0x24
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fedd 	bl	80059dc <xTaskRemoveFromEventList>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00e      	beq.n	8004c46 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	e007      	b.n	8004c46 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	b25a      	sxtb	r2, r3
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c46:	2301      	movs	r3, #1
 8004c48:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004c4a:	e001      	b.n	8004c50 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c52:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3738      	adds	r7, #56	; 0x38
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08c      	sub	sp, #48	; 0x30
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c70:	2300      	movs	r3, #0
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10b      	bne.n	8004c96 <xQueueReceive+0x32>
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	b672      	cpsid	i
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	b662      	cpsie	i
 8004c92:	623b      	str	r3, [r7, #32]
 8004c94:	e7fe      	b.n	8004c94 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <xQueueReceive+0x40>
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <xQueueReceive+0x44>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <xQueueReceive+0x46>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10b      	bne.n	8004cc6 <xQueueReceive+0x62>
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	b672      	cpsid	i
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	b662      	cpsie	i
 8004cc2:	61fb      	str	r3, [r7, #28]
 8004cc4:	e7fe      	b.n	8004cc4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cc6:	f001 f841 	bl	8005d4c <xTaskGetSchedulerState>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <xQueueReceive+0x72>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <xQueueReceive+0x76>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <xQueueReceive+0x78>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10b      	bne.n	8004cf8 <xQueueReceive+0x94>
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	b672      	cpsid	i
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	b662      	cpsie	i
 8004cf4:	61bb      	str	r3, [r7, #24]
 8004cf6:	e7fe      	b.n	8004cf6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cf8:	f001 fe26 	bl	8006948 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d014      	beq.n	8004d32 <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d08:	68b9      	ldr	r1, [r7, #8]
 8004d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d0c:	f000 f910 	bl	8004f30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	1e5a      	subs	r2, r3, #1
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d004      	beq.n	8004d2a <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	3310      	adds	r3, #16
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fe59 	bl	80059dc <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d2a:	f001 fe3f 	bl	80069ac <vPortExitCritical>
				return pdPASS;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e069      	b.n	8004e06 <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d103      	bne.n	8004d40 <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d38:	f001 fe38 	bl	80069ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e062      	b.n	8004e06 <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d46:	f107 0310 	add.w	r3, r7, #16
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 feaa 	bl	8005aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d50:	2301      	movs	r3, #1
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d54:	f001 fe2a 	bl	80069ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d58:	f000 fc4a 	bl	80055f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d5c:	f001 fdf4 	bl	8006948 <vPortEnterCritical>
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d66:	b25b      	sxtb	r3, r3
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d103      	bne.n	8004d76 <xQueueReceive+0x112>
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d7c:	b25b      	sxtb	r3, r3
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d82:	d103      	bne.n	8004d8c <xQueueReceive+0x128>
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d8c:	f001 fe0e 	bl	80069ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d90:	1d3a      	adds	r2, r7, #4
 8004d92:	f107 0310 	add.w	r3, r7, #16
 8004d96:	4611      	mov	r1, r2
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fe99 	bl	8005ad0 <xTaskCheckForTimeOut>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d123      	bne.n	8004dec <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004da6:	f000 f93b 	bl	8005020 <prvIsQueueEmpty>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d017      	beq.n	8004de0 <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	3324      	adds	r3, #36	; 0x24
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	4611      	mov	r1, r2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fdbd 	bl	8005938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc0:	f000 f8dc 	bl	8004f7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004dc4:	f000 fc22 	bl	800560c <xTaskResumeAll>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d194      	bne.n	8004cf8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004dce:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <xQueueReceive+0x1ac>)
 8004dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	e78b      	b.n	8004cf8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de2:	f000 f8cb 	bl	8004f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004de6:	f000 fc11 	bl	800560c <xTaskResumeAll>
 8004dea:	e785      	b.n	8004cf8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dee:	f000 f8c5 	bl	8004f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004df2:	f000 fc0b 	bl	800560c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004df8:	f000 f912 	bl	8005020 <prvIsQueueEmpty>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f43f af7a 	beq.w	8004cf8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3730      	adds	r7, #48	; 0x30
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	e000ed04 	.word	0xe000ed04

08004e14 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10b      	bne.n	8004e3e <vQueueDelete+0x2a>
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	b672      	cpsid	i
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	b662      	cpsie	i
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	e7fe      	b.n	8004e3c <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f944 	bl	80050cc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d102      	bne.n	8004e54 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f001 ff64 	bl	8006d1c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10d      	bne.n	8004e96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d14d      	bne.n	8004f1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 ff7e 	bl	8005d88 <xTaskPriorityDisinherit>
 8004e8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	e043      	b.n	8004f1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d119      	bne.n	8004ed0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6858      	ldr	r0, [r3, #4]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	f002 f874 	bl	8006f94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	441a      	add	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d32b      	bcc.n	8004f1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	e026      	b.n	8004f1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	68d8      	ldr	r0, [r3, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	461a      	mov	r2, r3
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	f002 f85a 	bl	8006f94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	425b      	negs	r3, r3
 8004eea:	441a      	add	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d207      	bcs.n	8004f0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	425b      	negs	r3, r3
 8004f06:	441a      	add	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d105      	bne.n	8004f1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f26:	697b      	ldr	r3, [r7, #20]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d018      	beq.n	8004f74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	441a      	add	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d303      	bcc.n	8004f64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68d9      	ldr	r1, [r3, #12]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	6838      	ldr	r0, [r7, #0]
 8004f70:	f002 f810 	bl	8006f94 <memcpy>
	}
}
 8004f74:	bf00      	nop
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f84:	f001 fce0 	bl	8006948 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f90:	e011      	b.n	8004fb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d012      	beq.n	8004fc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3324      	adds	r3, #36	; 0x24
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fd1c 	bl	80059dc <xTaskRemoveFromEventList>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004faa:	f000 fdf5 	bl	8005b98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	dce9      	bgt.n	8004f92 <prvUnlockQueue+0x16>
 8004fbe:	e000      	b.n	8004fc2 <prvUnlockQueue+0x46>
					break;
 8004fc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	22ff      	movs	r2, #255	; 0xff
 8004fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004fca:	f001 fcef 	bl	80069ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fce:	f001 fcbb 	bl	8006948 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fda:	e011      	b.n	8005000 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d012      	beq.n	800500a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3310      	adds	r3, #16
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fcf7 	bl	80059dc <xTaskRemoveFromEventList>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ff4:	f000 fdd0 	bl	8005b98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ff8:	7bbb      	ldrb	r3, [r7, #14]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005004:	2b00      	cmp	r3, #0
 8005006:	dce9      	bgt.n	8004fdc <prvUnlockQueue+0x60>
 8005008:	e000      	b.n	800500c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800500a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	22ff      	movs	r2, #255	; 0xff
 8005010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005014:	f001 fcca 	bl	80069ac <vPortExitCritical>
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005028:	f001 fc8e 	bl	8006948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	2b00      	cmp	r3, #0
 8005032:	d102      	bne.n	800503a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005034:	2301      	movs	r3, #1
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	e001      	b.n	800503e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800503e:	f001 fcb5 	bl	80069ac <vPortExitCritical>

	return xReturn;
 8005042:	68fb      	ldr	r3, [r7, #12]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005054:	f001 fc78 	bl	8006948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005060:	429a      	cmp	r2, r3
 8005062:	d102      	bne.n	800506a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005064:	2301      	movs	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	e001      	b.n	800506e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800506e:	f001 fc9d 	bl	80069ac <vPortExitCritical>

	return xReturn;
 8005072:	68fb      	ldr	r3, [r7, #12]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	e014      	b.n	80050b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800508c:	4a0e      	ldr	r2, [pc, #56]	; (80050c8 <vQueueAddToRegistry+0x4c>)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10b      	bne.n	80050b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005098:	490b      	ldr	r1, [pc, #44]	; (80050c8 <vQueueAddToRegistry+0x4c>)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80050a2:	4a09      	ldr	r2, [pc, #36]	; (80050c8 <vQueueAddToRegistry+0x4c>)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	4413      	add	r3, r2
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80050ae:	e005      	b.n	80050bc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3301      	adds	r3, #1
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b07      	cmp	r3, #7
 80050ba:	d9e7      	bls.n	800508c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80050bc:	bf00      	nop
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	20005700 	.word	0x20005700

080050cc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	e016      	b.n	8005108 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80050da:	4a10      	ldr	r2, [pc, #64]	; (800511c <vQueueUnregisterQueue+0x50>)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	4413      	add	r3, r2
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d10b      	bne.n	8005102 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80050ea:	4a0c      	ldr	r2, [pc, #48]	; (800511c <vQueueUnregisterQueue+0x50>)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2100      	movs	r1, #0
 80050f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80050f4:	4a09      	ldr	r2, [pc, #36]	; (800511c <vQueueUnregisterQueue+0x50>)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	4413      	add	r3, r2
 80050fc:	2200      	movs	r2, #0
 80050fe:	605a      	str	r2, [r3, #4]
				break;
 8005100:	e005      	b.n	800510e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3301      	adds	r3, #1
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b07      	cmp	r3, #7
 800510c:	d9e5      	bls.n	80050da <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800510e:	bf00      	nop
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	20005700 	.word	0x20005700

08005120 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005130:	f001 fc0a 	bl	8006948 <vPortEnterCritical>
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800513a:	b25b      	sxtb	r3, r3
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005140:	d103      	bne.n	800514a <vQueueWaitForMessageRestricted+0x2a>
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005150:	b25b      	sxtb	r3, r3
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	d103      	bne.n	8005160 <vQueueWaitForMessageRestricted+0x40>
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005160:	f001 fc24 	bl	80069ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	2b00      	cmp	r3, #0
 800516a:	d106      	bne.n	800517a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	3324      	adds	r3, #36	; 0x24
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	4618      	mov	r0, r3
 8005176:	f000 fc05 	bl	8005984 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800517a:	6978      	ldr	r0, [r7, #20]
 800517c:	f7ff fefe 	bl	8004f7c <prvUnlockQueue>
	}
 8005180:	bf00      	nop
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08e      	sub	sp, #56	; 0x38
 800518c:	af04      	add	r7, sp, #16
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10b      	bne.n	80051b4 <xTaskCreateStatic+0x2c>
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	b672      	cpsid	i
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	b662      	cpsie	i
 80051b0:	623b      	str	r3, [r7, #32]
 80051b2:	e7fe      	b.n	80051b2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10b      	bne.n	80051d2 <xTaskCreateStatic+0x4a>
 80051ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051be:	b672      	cpsid	i
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	b662      	cpsie	i
 80051ce:	61fb      	str	r3, [r7, #28]
 80051d0:	e7fe      	b.n	80051d0 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051d2:	235c      	movs	r3, #92	; 0x5c
 80051d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b5c      	cmp	r3, #92	; 0x5c
 80051da:	d00b      	beq.n	80051f4 <xTaskCreateStatic+0x6c>
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	b672      	cpsid	i
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	b662      	cpsie	i
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	e7fe      	b.n	80051f2 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01e      	beq.n	800523a <xTaskCreateStatic+0xb2>
 80051fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d01b      	beq.n	800523a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800520a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	2202      	movs	r2, #2
 8005210:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005214:	2300      	movs	r3, #0
 8005216:	9303      	str	r3, [sp, #12]
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	9302      	str	r3, [sp, #8]
 800521c:	f107 0314 	add.w	r3, r7, #20
 8005220:	9301      	str	r3, [sp, #4]
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 f850 	bl	80052d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005234:	f000 f8de 	bl	80053f4 <prvAddNewTaskToReadyList>
 8005238:	e001      	b.n	800523e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800523e:	697b      	ldr	r3, [r7, #20]
	}
 8005240:	4618      	mov	r0, r3
 8005242:	3728      	adds	r7, #40	; 0x28
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005248:	b580      	push	{r7, lr}
 800524a:	b08c      	sub	sp, #48	; 0x30
 800524c:	af04      	add	r7, sp, #16
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4618      	mov	r0, r3
 800525e:	f001 fc95 	bl	8006b8c <pvPortMalloc>
 8005262:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00e      	beq.n	8005288 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800526a:	205c      	movs	r0, #92	; 0x5c
 800526c:	f001 fc8e 	bl	8006b8c <pvPortMalloc>
 8005270:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	631a      	str	r2, [r3, #48]	; 0x30
 800527e:	e005      	b.n	800528c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005280:	6978      	ldr	r0, [r7, #20]
 8005282:	f001 fd4b 	bl	8006d1c <vPortFree>
 8005286:	e001      	b.n	800528c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005288:	2300      	movs	r3, #0
 800528a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d017      	beq.n	80052c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800529a:	88fa      	ldrh	r2, [r7, #6]
 800529c:	2300      	movs	r3, #0
 800529e:	9303      	str	r3, [sp, #12]
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	9302      	str	r3, [sp, #8]
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a6:	9301      	str	r3, [sp, #4]
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f80e 	bl	80052d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052b6:	69f8      	ldr	r0, [r7, #28]
 80052b8:	f000 f89c 	bl	80053f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052bc:	2301      	movs	r3, #1
 80052be:	61bb      	str	r3, [r7, #24]
 80052c0:	e002      	b.n	80052c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052c2:	f04f 33ff 	mov.w	r3, #4294967295
 80052c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052c8:	69bb      	ldr	r3, [r7, #24]
	}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3720      	adds	r7, #32
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b088      	sub	sp, #32
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	461a      	mov	r2, r3
 80052ea:	21a5      	movs	r1, #165	; 0xa5
 80052ec:	f001 fe5d 	bl	8006faa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80052fa:	440b      	add	r3, r1
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	f023 0307 	bic.w	r3, r3, #7
 8005308:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00b      	beq.n	800532c <prvInitialiseNewTask+0x5a>
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	b672      	cpsid	i
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	b662      	cpsie	i
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	e7fe      	b.n	800532a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d01f      	beq.n	8005372 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005332:	2300      	movs	r3, #0
 8005334:	61fb      	str	r3, [r7, #28]
 8005336:	e012      	b.n	800535e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	4413      	add	r3, r2
 800533e:	7819      	ldrb	r1, [r3, #0]
 8005340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	4413      	add	r3, r2
 8005346:	3334      	adds	r3, #52	; 0x34
 8005348:	460a      	mov	r2, r1
 800534a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d006      	beq.n	8005366 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	3301      	adds	r3, #1
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	2b0f      	cmp	r3, #15
 8005362:	d9e9      	bls.n	8005338 <prvInitialiseNewTask+0x66>
 8005364:	e000      	b.n	8005368 <prvInitialiseNewTask+0x96>
			{
				break;
 8005366:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005370:	e003      	b.n	800537a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	2b37      	cmp	r3, #55	; 0x37
 800537e:	d901      	bls.n	8005384 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005380:	2337      	movs	r3, #55	; 0x37
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005388:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800538e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	2200      	movs	r2, #0
 8005394:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	3304      	adds	r3, #4
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff f89c 	bl	80044d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	3318      	adds	r3, #24
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff f897 	bl	80044d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	2200      	movs	r2, #0
 80053c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	68f9      	ldr	r1, [r7, #12]
 80053d2:	69b8      	ldr	r0, [r7, #24]
 80053d4:	f001 f9b0 	bl	8006738 <pxPortInitialiseStack>
 80053d8:	4602      	mov	r2, r0
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ea:	bf00      	nop
 80053ec:	3720      	adds	r7, #32
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053fc:	f001 faa4 	bl	8006948 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005400:	4b26      	ldr	r3, [pc, #152]	; (800549c <prvAddNewTaskToReadyList+0xa8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3301      	adds	r3, #1
 8005406:	4a25      	ldr	r2, [pc, #148]	; (800549c <prvAddNewTaskToReadyList+0xa8>)
 8005408:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800540a:	4b25      	ldr	r3, [pc, #148]	; (80054a0 <prvAddNewTaskToReadyList+0xac>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005412:	4a23      	ldr	r2, [pc, #140]	; (80054a0 <prvAddNewTaskToReadyList+0xac>)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005418:	4b20      	ldr	r3, [pc, #128]	; (800549c <prvAddNewTaskToReadyList+0xa8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d110      	bne.n	8005442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005420:	f000 fbd8 	bl	8005bd4 <prvInitialiseTaskLists>
 8005424:	e00d      	b.n	8005442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005426:	4b1f      	ldr	r3, [pc, #124]	; (80054a4 <prvAddNewTaskToReadyList+0xb0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800542e:	4b1c      	ldr	r3, [pc, #112]	; (80054a0 <prvAddNewTaskToReadyList+0xac>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	429a      	cmp	r2, r3
 800543a:	d802      	bhi.n	8005442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800543c:	4a18      	ldr	r2, [pc, #96]	; (80054a0 <prvAddNewTaskToReadyList+0xac>)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005442:	4b19      	ldr	r3, [pc, #100]	; (80054a8 <prvAddNewTaskToReadyList+0xb4>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3301      	adds	r3, #1
 8005448:	4a17      	ldr	r2, [pc, #92]	; (80054a8 <prvAddNewTaskToReadyList+0xb4>)
 800544a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800544c:	4b16      	ldr	r3, [pc, #88]	; (80054a8 <prvAddNewTaskToReadyList+0xb4>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005458:	4b14      	ldr	r3, [pc, #80]	; (80054ac <prvAddNewTaskToReadyList+0xb8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d903      	bls.n	8005468 <prvAddNewTaskToReadyList+0x74>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	4a11      	ldr	r2, [pc, #68]	; (80054ac <prvAddNewTaskToReadyList+0xb8>)
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4a0e      	ldr	r2, [pc, #56]	; (80054b0 <prvAddNewTaskToReadyList+0xbc>)
 8005476:	441a      	add	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3304      	adds	r3, #4
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f7ff f837 	bl	80044f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005484:	f001 fa92 	bl	80069ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005488:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <prvAddNewTaskToReadyList+0xb0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005490:	4b03      	ldr	r3, [pc, #12]	; (80054a0 <prvAddNewTaskToReadyList+0xac>)
 8005492:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005494:	bf00      	nop
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	20000bbc 	.word	0x20000bbc
 80054a0:	200006e8 	.word	0x200006e8
 80054a4:	20000bc8 	.word	0x20000bc8
 80054a8:	20000bd8 	.word	0x20000bd8
 80054ac:	20000bc4 	.word	0x20000bc4
 80054b0:	200006ec 	.word	0x200006ec

080054b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054bc:	2300      	movs	r3, #0
 80054be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d018      	beq.n	80054f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054c6:	4b14      	ldr	r3, [pc, #80]	; (8005518 <vTaskDelay+0x64>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <vTaskDelay+0x32>
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	b672      	cpsid	i
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	b662      	cpsie	i
 80054e2:	60bb      	str	r3, [r7, #8]
 80054e4:	e7fe      	b.n	80054e4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80054e6:	f000 f883 	bl	80055f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054ea:	2100      	movs	r1, #0
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fcbb 	bl	8005e68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054f2:	f000 f88b 	bl	800560c <xTaskResumeAll>
 80054f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d107      	bne.n	800550e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80054fe:	4b07      	ldr	r3, [pc, #28]	; (800551c <vTaskDelay+0x68>)
 8005500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800550e:	bf00      	nop
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20000be4 	.word	0x20000be4
 800551c:	e000ed04 	.word	0xe000ed04

08005520 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	; 0x28
 8005524:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800552a:	2300      	movs	r3, #0
 800552c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800552e:	463a      	mov	r2, r7
 8005530:	1d39      	adds	r1, r7, #4
 8005532:	f107 0308 	add.w	r3, r7, #8
 8005536:	4618      	mov	r0, r3
 8005538:	f7fe ff7a 	bl	8004430 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	9202      	str	r2, [sp, #8]
 8005544:	9301      	str	r3, [sp, #4]
 8005546:	2300      	movs	r3, #0
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	2300      	movs	r3, #0
 800554c:	460a      	mov	r2, r1
 800554e:	4922      	ldr	r1, [pc, #136]	; (80055d8 <vTaskStartScheduler+0xb8>)
 8005550:	4822      	ldr	r0, [pc, #136]	; (80055dc <vTaskStartScheduler+0xbc>)
 8005552:	f7ff fe19 	bl	8005188 <xTaskCreateStatic>
 8005556:	4602      	mov	r2, r0
 8005558:	4b21      	ldr	r3, [pc, #132]	; (80055e0 <vTaskStartScheduler+0xc0>)
 800555a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800555c:	4b20      	ldr	r3, [pc, #128]	; (80055e0 <vTaskStartScheduler+0xc0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005564:	2301      	movs	r3, #1
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	e001      	b.n	800556e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d102      	bne.n	800557a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005574:	f000 fccc 	bl	8005f10 <xTimerCreateTimerTask>
 8005578:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d117      	bne.n	80055b0 <vTaskStartScheduler+0x90>
 8005580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005584:	b672      	cpsid	i
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	b662      	cpsie	i
 8005594:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005596:	4b13      	ldr	r3, [pc, #76]	; (80055e4 <vTaskStartScheduler+0xc4>)
 8005598:	f04f 32ff 	mov.w	r2, #4294967295
 800559c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800559e:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <vTaskStartScheduler+0xc8>)
 80055a0:	2201      	movs	r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055a4:	4b11      	ldr	r3, [pc, #68]	; (80055ec <vTaskStartScheduler+0xcc>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055aa:	f001 f951 	bl	8006850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055ae:	e00f      	b.n	80055d0 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b6:	d10b      	bne.n	80055d0 <vTaskStartScheduler+0xb0>
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	b672      	cpsid	i
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	b662      	cpsie	i
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	e7fe      	b.n	80055ce <vTaskStartScheduler+0xae>
}
 80055d0:	bf00      	nop
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	080070b0 	.word	0x080070b0
 80055dc:	08005bb1 	.word	0x08005bb1
 80055e0:	20000be0 	.word	0x20000be0
 80055e4:	20000bdc 	.word	0x20000bdc
 80055e8:	20000bc8 	.word	0x20000bc8
 80055ec:	20000bc0 	.word	0x20000bc0

080055f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80055f4:	4b04      	ldr	r3, [pc, #16]	; (8005608 <vTaskSuspendAll+0x18>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3301      	adds	r3, #1
 80055fa:	4a03      	ldr	r2, [pc, #12]	; (8005608 <vTaskSuspendAll+0x18>)
 80055fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80055fe:	bf00      	nop
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	20000be4 	.word	0x20000be4

0800560c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005616:	2300      	movs	r3, #0
 8005618:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800561a:	4b3c      	ldr	r3, [pc, #240]	; (800570c <xTaskResumeAll+0x100>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10b      	bne.n	800563a <xTaskResumeAll+0x2e>
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	b672      	cpsid	i
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	b662      	cpsie	i
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	e7fe      	b.n	8005638 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800563a:	f001 f985 	bl	8006948 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800563e:	4b33      	ldr	r3, [pc, #204]	; (800570c <xTaskResumeAll+0x100>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3b01      	subs	r3, #1
 8005644:	4a31      	ldr	r2, [pc, #196]	; (800570c <xTaskResumeAll+0x100>)
 8005646:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005648:	4b30      	ldr	r3, [pc, #192]	; (800570c <xTaskResumeAll+0x100>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d156      	bne.n	80056fe <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005650:	4b2f      	ldr	r3, [pc, #188]	; (8005710 <xTaskResumeAll+0x104>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d052      	beq.n	80056fe <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005658:	e02f      	b.n	80056ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800565a:	4b2e      	ldr	r3, [pc, #184]	; (8005714 <xTaskResumeAll+0x108>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3318      	adds	r3, #24
 8005666:	4618      	mov	r0, r3
 8005668:	f7fe ffa0 	bl	80045ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3304      	adds	r3, #4
 8005670:	4618      	mov	r0, r3
 8005672:	f7fe ff9b 	bl	80045ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567a:	4b27      	ldr	r3, [pc, #156]	; (8005718 <xTaskResumeAll+0x10c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d903      	bls.n	800568a <xTaskResumeAll+0x7e>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	4a24      	ldr	r2, [pc, #144]	; (8005718 <xTaskResumeAll+0x10c>)
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4a21      	ldr	r2, [pc, #132]	; (800571c <xTaskResumeAll+0x110>)
 8005698:	441a      	add	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	3304      	adds	r3, #4
 800569e:	4619      	mov	r1, r3
 80056a0:	4610      	mov	r0, r2
 80056a2:	f7fe ff26 	bl	80044f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056aa:	4b1d      	ldr	r3, [pc, #116]	; (8005720 <xTaskResumeAll+0x114>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d302      	bcc.n	80056ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80056b4:	4b1b      	ldr	r3, [pc, #108]	; (8005724 <xTaskResumeAll+0x118>)
 80056b6:	2201      	movs	r2, #1
 80056b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056ba:	4b16      	ldr	r3, [pc, #88]	; (8005714 <xTaskResumeAll+0x108>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1cb      	bne.n	800565a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056c8:	f000 fb20 	bl	8005d0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056cc:	4b16      	ldr	r3, [pc, #88]	; (8005728 <xTaskResumeAll+0x11c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d010      	beq.n	80056fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056d8:	f000 f838 	bl	800574c <xTaskIncrementTick>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80056e2:	4b10      	ldr	r3, [pc, #64]	; (8005724 <xTaskResumeAll+0x118>)
 80056e4:	2201      	movs	r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f1      	bne.n	80056d8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80056f4:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <xTaskResumeAll+0x11c>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056fa:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <xTaskResumeAll+0x118>)
 80056fc:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056fe:	f001 f955 	bl	80069ac <vPortExitCritical>

	return xAlreadyYielded;
 8005702:	687b      	ldr	r3, [r7, #4]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20000be4 	.word	0x20000be4
 8005710:	20000bbc 	.word	0x20000bbc
 8005714:	20000b7c 	.word	0x20000b7c
 8005718:	20000bc4 	.word	0x20000bc4
 800571c:	200006ec 	.word	0x200006ec
 8005720:	200006e8 	.word	0x200006e8
 8005724:	20000bd0 	.word	0x20000bd0
 8005728:	20000bcc 	.word	0x20000bcc

0800572c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005732:	4b05      	ldr	r3, [pc, #20]	; (8005748 <xTaskGetTickCount+0x1c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005738:	687b      	ldr	r3, [r7, #4]
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20000bc0 	.word	0x20000bc0

0800574c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005756:	4b40      	ldr	r3, [pc, #256]	; (8005858 <xTaskIncrementTick+0x10c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d171      	bne.n	8005842 <xTaskIncrementTick+0xf6>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800575e:	4b3f      	ldr	r3, [pc, #252]	; (800585c <xTaskIncrementTick+0x110>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3301      	adds	r3, #1
 8005764:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005766:	4a3d      	ldr	r2, [pc, #244]	; (800585c <xTaskIncrementTick+0x110>)
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d121      	bne.n	80057b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005772:	4b3b      	ldr	r3, [pc, #236]	; (8005860 <xTaskIncrementTick+0x114>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00b      	beq.n	8005794 <xTaskIncrementTick+0x48>
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	b672      	cpsid	i
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	b662      	cpsie	i
 8005790:	603b      	str	r3, [r7, #0]
 8005792:	e7fe      	b.n	8005792 <xTaskIncrementTick+0x46>
 8005794:	4b32      	ldr	r3, [pc, #200]	; (8005860 <xTaskIncrementTick+0x114>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	4b32      	ldr	r3, [pc, #200]	; (8005864 <xTaskIncrementTick+0x118>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a30      	ldr	r2, [pc, #192]	; (8005860 <xTaskIncrementTick+0x114>)
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	4a30      	ldr	r2, [pc, #192]	; (8005864 <xTaskIncrementTick+0x118>)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	4b2f      	ldr	r3, [pc, #188]	; (8005868 <xTaskIncrementTick+0x11c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3301      	adds	r3, #1
 80057ae:	4a2e      	ldr	r2, [pc, #184]	; (8005868 <xTaskIncrementTick+0x11c>)
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	f000 faab 	bl	8005d0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057b6:	4b2d      	ldr	r3, [pc, #180]	; (800586c <xTaskIncrementTick+0x120>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d345      	bcc.n	800584c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057c0:	4b27      	ldr	r3, [pc, #156]	; (8005860 <xTaskIncrementTick+0x114>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d104      	bne.n	80057d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ca:	4b28      	ldr	r3, [pc, #160]	; (800586c <xTaskIncrementTick+0x120>)
 80057cc:	f04f 32ff 	mov.w	r2, #4294967295
 80057d0:	601a      	str	r2, [r3, #0]
					break;
 80057d2:	e03b      	b.n	800584c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d4:	4b22      	ldr	r3, [pc, #136]	; (8005860 <xTaskIncrementTick+0x114>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d203      	bcs.n	80057f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057ec:	4a1f      	ldr	r2, [pc, #124]	; (800586c <xTaskIncrementTick+0x120>)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057f2:	e02b      	b.n	800584c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	3304      	adds	r3, #4
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fe fed7 	bl	80045ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	2b00      	cmp	r3, #0
 8005804:	d004      	beq.n	8005810 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	3318      	adds	r3, #24
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe fece 	bl	80045ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005814:	4b16      	ldr	r3, [pc, #88]	; (8005870 <xTaskIncrementTick+0x124>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d903      	bls.n	8005824 <xTaskIncrementTick+0xd8>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	4a13      	ldr	r2, [pc, #76]	; (8005870 <xTaskIncrementTick+0x124>)
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4a10      	ldr	r2, [pc, #64]	; (8005874 <xTaskIncrementTick+0x128>)
 8005832:	441a      	add	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f7fe fe59 	bl	80044f2 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005840:	e7be      	b.n	80057c0 <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005842:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <xTaskIncrementTick+0x12c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3301      	adds	r3, #1
 8005848:	4a0b      	ldr	r2, [pc, #44]	; (8005878 <xTaskIncrementTick+0x12c>)
 800584a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800584c:	697b      	ldr	r3, [r7, #20]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000be4 	.word	0x20000be4
 800585c:	20000bc0 	.word	0x20000bc0
 8005860:	20000b74 	.word	0x20000b74
 8005864:	20000b78 	.word	0x20000b78
 8005868:	20000bd4 	.word	0x20000bd4
 800586c:	20000bdc 	.word	0x20000bdc
 8005870:	20000bc4 	.word	0x20000bc4
 8005874:	200006ec 	.word	0x200006ec
 8005878:	20000bcc 	.word	0x20000bcc

0800587c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005882:	4b28      	ldr	r3, [pc, #160]	; (8005924 <vTaskSwitchContext+0xa8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800588a:	4b27      	ldr	r3, [pc, #156]	; (8005928 <vTaskSwitchContext+0xac>)
 800588c:	2201      	movs	r2, #1
 800588e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005890:	e042      	b.n	8005918 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005892:	4b25      	ldr	r3, [pc, #148]	; (8005928 <vTaskSwitchContext+0xac>)
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005898:	4b24      	ldr	r3, [pc, #144]	; (800592c <vTaskSwitchContext+0xb0>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	e011      	b.n	80058c4 <vTaskSwitchContext+0x48>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10b      	bne.n	80058be <vTaskSwitchContext+0x42>
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	b672      	cpsid	i
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	b662      	cpsie	i
 80058ba:	607b      	str	r3, [r7, #4]
 80058bc:	e7fe      	b.n	80058bc <vTaskSwitchContext+0x40>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	491a      	ldr	r1, [pc, #104]	; (8005930 <vTaskSwitchContext+0xb4>)
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0e3      	beq.n	80058a0 <vTaskSwitchContext+0x24>
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4a13      	ldr	r2, [pc, #76]	; (8005930 <vTaskSwitchContext+0xb4>)
 80058e4:	4413      	add	r3, r2
 80058e6:	60bb      	str	r3, [r7, #8]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	605a      	str	r2, [r3, #4]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	3308      	adds	r3, #8
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d104      	bne.n	8005908 <vTaskSwitchContext+0x8c>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	605a      	str	r2, [r3, #4]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	4a09      	ldr	r2, [pc, #36]	; (8005934 <vTaskSwitchContext+0xb8>)
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	4a06      	ldr	r2, [pc, #24]	; (800592c <vTaskSwitchContext+0xb0>)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6013      	str	r3, [r2, #0]
}
 8005918:	bf00      	nop
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	20000be4 	.word	0x20000be4
 8005928:	20000bd0 	.word	0x20000bd0
 800592c:	20000bc4 	.word	0x20000bc4
 8005930:	200006ec 	.word	0x200006ec
 8005934:	200006e8 	.word	0x200006e8

08005938 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10b      	bne.n	8005960 <vTaskPlaceOnEventList+0x28>
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	b672      	cpsid	i
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	b662      	cpsie	i
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	e7fe      	b.n	800595e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005960:	4b07      	ldr	r3, [pc, #28]	; (8005980 <vTaskPlaceOnEventList+0x48>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3318      	adds	r3, #24
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7fe fde6 	bl	800453a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800596e:	2101      	movs	r1, #1
 8005970:	6838      	ldr	r0, [r7, #0]
 8005972:	f000 fa79 	bl	8005e68 <prvAddCurrentTaskToDelayedList>
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	200006e8 	.word	0x200006e8

08005984 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10b      	bne.n	80059ae <vTaskPlaceOnEventListRestricted+0x2a>
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	b672      	cpsid	i
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	b662      	cpsie	i
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	e7fe      	b.n	80059ac <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059ae:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3318      	adds	r3, #24
 80059b4:	4619      	mov	r1, r3
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7fe fd9b 	bl	80044f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80059c2:	f04f 33ff 	mov.w	r3, #4294967295
 80059c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	68b8      	ldr	r0, [r7, #8]
 80059cc:	f000 fa4c 	bl	8005e68 <prvAddCurrentTaskToDelayedList>
	}
 80059d0:	bf00      	nop
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	200006e8 	.word	0x200006e8

080059dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10b      	bne.n	8005a0a <xTaskRemoveFromEventList+0x2e>
 80059f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f6:	b672      	cpsid	i
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	b662      	cpsie	i
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	e7fe      	b.n	8005a08 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	3318      	adds	r3, #24
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe fdcc 	bl	80045ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a14:	4b1d      	ldr	r3, [pc, #116]	; (8005a8c <xTaskRemoveFromEventList+0xb0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d11d      	bne.n	8005a58 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe fdc3 	bl	80045ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2a:	4b19      	ldr	r3, [pc, #100]	; (8005a90 <xTaskRemoveFromEventList+0xb4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d903      	bls.n	8005a3a <xTaskRemoveFromEventList+0x5e>
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	4a16      	ldr	r2, [pc, #88]	; (8005a90 <xTaskRemoveFromEventList+0xb4>)
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4a13      	ldr	r2, [pc, #76]	; (8005a94 <xTaskRemoveFromEventList+0xb8>)
 8005a48:	441a      	add	r2, r3
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	4619      	mov	r1, r3
 8005a50:	4610      	mov	r0, r2
 8005a52:	f7fe fd4e 	bl	80044f2 <vListInsertEnd>
 8005a56:	e005      	b.n	8005a64 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	3318      	adds	r3, #24
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	480e      	ldr	r0, [pc, #56]	; (8005a98 <xTaskRemoveFromEventList+0xbc>)
 8005a60:	f7fe fd47 	bl	80044f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a68:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <xTaskRemoveFromEventList+0xc0>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d905      	bls.n	8005a7e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a72:	2301      	movs	r3, #1
 8005a74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a76:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <xTaskRemoveFromEventList+0xc4>)
 8005a78:	2201      	movs	r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	e001      	b.n	8005a82 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a82:	697b      	ldr	r3, [r7, #20]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20000be4 	.word	0x20000be4
 8005a90:	20000bc4 	.word	0x20000bc4
 8005a94:	200006ec 	.word	0x200006ec
 8005a98:	20000b7c 	.word	0x20000b7c
 8005a9c:	200006e8 	.word	0x200006e8
 8005aa0:	20000bd0 	.word	0x20000bd0

08005aa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005aac:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <vTaskInternalSetTimeOutState+0x24>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <vTaskInternalSetTimeOutState+0x28>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	605a      	str	r2, [r3, #4]
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	20000bd4 	.word	0x20000bd4
 8005acc:	20000bc0 	.word	0x20000bc0

08005ad0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10b      	bne.n	8005af8 <xTaskCheckForTimeOut+0x28>
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	b672      	cpsid	i
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	b662      	cpsie	i
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	e7fe      	b.n	8005af6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10b      	bne.n	8005b16 <xTaskCheckForTimeOut+0x46>
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	b672      	cpsid	i
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	b662      	cpsie	i
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e7fe      	b.n	8005b14 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8005b16:	f000 ff17 	bl	8006948 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b1a:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <xTaskCheckForTimeOut+0xc0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d102      	bne.n	8005b3a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61fb      	str	r3, [r7, #28]
 8005b38:	e023      	b.n	8005b82 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4b15      	ldr	r3, [pc, #84]	; (8005b94 <xTaskCheckForTimeOut+0xc4>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d007      	beq.n	8005b56 <xTaskCheckForTimeOut+0x86>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d302      	bcc.n	8005b56 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b50:	2301      	movs	r3, #1
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	e015      	b.n	8005b82 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d20b      	bcs.n	8005b78 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	1ad2      	subs	r2, r2, r3
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff ff99 	bl	8005aa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61fb      	str	r3, [r7, #28]
 8005b76:	e004      	b.n	8005b82 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b82:	f000 ff13 	bl	80069ac <vPortExitCritical>

	return xReturn;
 8005b86:	69fb      	ldr	r3, [r7, #28]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3720      	adds	r7, #32
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20000bc0 	.word	0x20000bc0
 8005b94:	20000bd4 	.word	0x20000bd4

08005b98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b9c:	4b03      	ldr	r3, [pc, #12]	; (8005bac <vTaskMissedYield+0x14>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
}
 8005ba2:	bf00      	nop
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	20000bd0 	.word	0x20000bd0

08005bb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bb8:	f000 f84c 	bl	8005c54 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8005bbc:	4b04      	ldr	r3, [pc, #16]	; (8005bd0 <prvIdleTask+0x20>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bcc:	e7f4      	b.n	8005bb8 <prvIdleTask+0x8>
 8005bce:	bf00      	nop
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bda:	2300      	movs	r3, #0
 8005bdc:	607b      	str	r3, [r7, #4]
 8005bde:	e00c      	b.n	8005bfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4a12      	ldr	r2, [pc, #72]	; (8005c34 <prvInitialiseTaskLists+0x60>)
 8005bec:	4413      	add	r3, r2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fe fc52 	bl	8004498 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	607b      	str	r3, [r7, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b37      	cmp	r3, #55	; 0x37
 8005bfe:	d9ef      	bls.n	8005be0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c00:	480d      	ldr	r0, [pc, #52]	; (8005c38 <prvInitialiseTaskLists+0x64>)
 8005c02:	f7fe fc49 	bl	8004498 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c06:	480d      	ldr	r0, [pc, #52]	; (8005c3c <prvInitialiseTaskLists+0x68>)
 8005c08:	f7fe fc46 	bl	8004498 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c0c:	480c      	ldr	r0, [pc, #48]	; (8005c40 <prvInitialiseTaskLists+0x6c>)
 8005c0e:	f7fe fc43 	bl	8004498 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c12:	480c      	ldr	r0, [pc, #48]	; (8005c44 <prvInitialiseTaskLists+0x70>)
 8005c14:	f7fe fc40 	bl	8004498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c18:	480b      	ldr	r0, [pc, #44]	; (8005c48 <prvInitialiseTaskLists+0x74>)
 8005c1a:	f7fe fc3d 	bl	8004498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c1e:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <prvInitialiseTaskLists+0x78>)
 8005c20:	4a05      	ldr	r2, [pc, #20]	; (8005c38 <prvInitialiseTaskLists+0x64>)
 8005c22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c24:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <prvInitialiseTaskLists+0x7c>)
 8005c26:	4a05      	ldr	r2, [pc, #20]	; (8005c3c <prvInitialiseTaskLists+0x68>)
 8005c28:	601a      	str	r2, [r3, #0]
}
 8005c2a:	bf00      	nop
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	200006ec 	.word	0x200006ec
 8005c38:	20000b4c 	.word	0x20000b4c
 8005c3c:	20000b60 	.word	0x20000b60
 8005c40:	20000b7c 	.word	0x20000b7c
 8005c44:	20000b90 	.word	0x20000b90
 8005c48:	20000ba8 	.word	0x20000ba8
 8005c4c:	20000b74 	.word	0x20000b74
 8005c50:	20000b78 	.word	0x20000b78

08005c54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c5a:	e019      	b.n	8005c90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c5c:	f000 fe74 	bl	8006948 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c60:	4b0f      	ldr	r3, [pc, #60]	; (8005ca0 <prvCheckTasksWaitingTermination+0x4c>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fe fc9d 	bl	80045ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c72:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <prvCheckTasksWaitingTermination+0x50>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	4a0a      	ldr	r2, [pc, #40]	; (8005ca4 <prvCheckTasksWaitingTermination+0x50>)
 8005c7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <prvCheckTasksWaitingTermination+0x54>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3b01      	subs	r3, #1
 8005c82:	4a09      	ldr	r2, [pc, #36]	; (8005ca8 <prvCheckTasksWaitingTermination+0x54>)
 8005c84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c86:	f000 fe91 	bl	80069ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f80e 	bl	8005cac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c90:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <prvCheckTasksWaitingTermination+0x54>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1e1      	bne.n	8005c5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c98:	bf00      	nop
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20000b90 	.word	0x20000b90
 8005ca4:	20000bbc 	.word	0x20000bbc
 8005ca8:	20000ba4 	.word	0x20000ba4

08005cac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d108      	bne.n	8005cd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 f82a 	bl	8006d1c <vPortFree>
				vPortFree( pxTCB );
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 f827 	bl	8006d1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cce:	e019      	b.n	8005d04 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d103      	bne.n	8005ce2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 f81e 	bl	8006d1c <vPortFree>
	}
 8005ce0:	e010      	b.n	8005d04 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d00b      	beq.n	8005d04 <prvDeleteTCB+0x58>
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	b672      	cpsid	i
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	b662      	cpsie	i
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	e7fe      	b.n	8005d02 <prvDeleteTCB+0x56>
	}
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d12:	4b0c      	ldr	r3, [pc, #48]	; (8005d44 <prvResetNextTaskUnblockTime+0x38>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d104      	bne.n	8005d26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <prvResetNextTaskUnblockTime+0x3c>)
 8005d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d24:	e008      	b.n	8005d38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d26:	4b07      	ldr	r3, [pc, #28]	; (8005d44 <prvResetNextTaskUnblockTime+0x38>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	4a04      	ldr	r2, [pc, #16]	; (8005d48 <prvResetNextTaskUnblockTime+0x3c>)
 8005d36:	6013      	str	r3, [r2, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	20000b74 	.word	0x20000b74
 8005d48:	20000bdc 	.word	0x20000bdc

08005d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d52:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <xTaskGetSchedulerState+0x34>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d102      	bne.n	8005d60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	607b      	str	r3, [r7, #4]
 8005d5e:	e008      	b.n	8005d72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d60:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <xTaskGetSchedulerState+0x38>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d102      	bne.n	8005d6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d68:	2302      	movs	r3, #2
 8005d6a:	607b      	str	r3, [r7, #4]
 8005d6c:	e001      	b.n	8005d72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d72:	687b      	ldr	r3, [r7, #4]
	}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	20000bc8 	.word	0x20000bc8
 8005d84:	20000be4 	.word	0x20000be4

08005d88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d058      	beq.n	8005e50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d9e:	4b2f      	ldr	r3, [pc, #188]	; (8005e5c <xTaskPriorityDisinherit+0xd4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d00b      	beq.n	8005dc0 <xTaskPriorityDisinherit+0x38>
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	b672      	cpsid	i
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	b662      	cpsie	i
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	e7fe      	b.n	8005dbe <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10b      	bne.n	8005de0 <xTaskPriorityDisinherit+0x58>
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	b672      	cpsid	i
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	b662      	cpsie	i
 8005ddc:	60bb      	str	r3, [r7, #8]
 8005dde:	e7fe      	b.n	8005dde <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de4:	1e5a      	subs	r2, r3, #1
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d02c      	beq.n	8005e50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d128      	bne.n	8005e50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	3304      	adds	r3, #4
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fe fbd2 	bl	80045ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e20:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <xTaskPriorityDisinherit+0xd8>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d903      	bls.n	8005e30 <xTaskPriorityDisinherit+0xa8>
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	4a0c      	ldr	r2, [pc, #48]	; (8005e60 <xTaskPriorityDisinherit+0xd8>)
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4a09      	ldr	r2, [pc, #36]	; (8005e64 <xTaskPriorityDisinherit+0xdc>)
 8005e3e:	441a      	add	r2, r3
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4619      	mov	r1, r3
 8005e46:	4610      	mov	r0, r2
 8005e48:	f7fe fb53 	bl	80044f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e50:	697b      	ldr	r3, [r7, #20]
	}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	200006e8 	.word	0x200006e8
 8005e60:	20000bc4 	.word	0x20000bc4
 8005e64:	200006ec 	.word	0x200006ec

08005e68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e72:	4b21      	ldr	r3, [pc, #132]	; (8005ef8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e78:	4b20      	ldr	r3, [pc, #128]	; (8005efc <prvAddCurrentTaskToDelayedList+0x94>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe fb94 	bl	80045ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8a:	d10a      	bne.n	8005ea2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e92:	4b1a      	ldr	r3, [pc, #104]	; (8005efc <prvAddCurrentTaskToDelayedList+0x94>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3304      	adds	r3, #4
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4819      	ldr	r0, [pc, #100]	; (8005f00 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e9c:	f7fe fb29 	bl	80044f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ea0:	e026      	b.n	8005ef0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005eaa:	4b14      	ldr	r3, [pc, #80]	; (8005efc <prvAddCurrentTaskToDelayedList+0x94>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d209      	bcs.n	8005ece <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <prvAddCurrentTaskToDelayedList+0x94>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f7fe fb37 	bl	800453a <vListInsert>
}
 8005ecc:	e010      	b.n	8005ef0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ece:	4b0e      	ldr	r3, [pc, #56]	; (8005f08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <prvAddCurrentTaskToDelayedList+0x94>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4610      	mov	r0, r2
 8005edc:	f7fe fb2d 	bl	800453a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d202      	bcs.n	8005ef0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005eea:	4a08      	ldr	r2, [pc, #32]	; (8005f0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	6013      	str	r3, [r2, #0]
}
 8005ef0:	bf00      	nop
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	20000bc0 	.word	0x20000bc0
 8005efc:	200006e8 	.word	0x200006e8
 8005f00:	20000ba8 	.word	0x20000ba8
 8005f04:	20000b78 	.word	0x20000b78
 8005f08:	20000b74 	.word	0x20000b74
 8005f0c:	20000bdc 	.word	0x20000bdc

08005f10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	; 0x28
 8005f14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f1a:	f000 fbab 	bl	8006674 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f1e:	4b1d      	ldr	r3, [pc, #116]	; (8005f94 <xTimerCreateTimerTask+0x84>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d021      	beq.n	8005f6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f2e:	1d3a      	adds	r2, r7, #4
 8005f30:	f107 0108 	add.w	r1, r7, #8
 8005f34:	f107 030c 	add.w	r3, r7, #12
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fe fa93 	bl	8004464 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	9202      	str	r2, [sp, #8]
 8005f46:	9301      	str	r3, [sp, #4]
 8005f48:	2302      	movs	r3, #2
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	460a      	mov	r2, r1
 8005f50:	4911      	ldr	r1, [pc, #68]	; (8005f98 <xTimerCreateTimerTask+0x88>)
 8005f52:	4812      	ldr	r0, [pc, #72]	; (8005f9c <xTimerCreateTimerTask+0x8c>)
 8005f54:	f7ff f918 	bl	8005188 <xTaskCreateStatic>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <xTimerCreateTimerTask+0x90>)
 8005f5c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f5e:	4b10      	ldr	r3, [pc, #64]	; (8005fa0 <xTimerCreateTimerTask+0x90>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f66:	2301      	movs	r3, #1
 8005f68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10b      	bne.n	8005f88 <xTimerCreateTimerTask+0x78>
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	b672      	cpsid	i
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	b662      	cpsie	i
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	e7fe      	b.n	8005f86 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8005f88:	697b      	ldr	r3, [r7, #20]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20000c18 	.word	0x20000c18
 8005f98:	080070b8 	.word	0x080070b8
 8005f9c:	08006219 	.word	0x08006219
 8005fa0:	20000c1c 	.word	0x20000c1c

08005fa4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005fb2:	202c      	movs	r0, #44	; 0x2c
 8005fb4:	f000 fdea 	bl	8006b8c <pvPortMalloc>
 8005fb8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00d      	beq.n	8005fdc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 f845 	bl	8006066 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005fdc:	697b      	ldr	r3, [r7, #20]
	}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b08a      	sub	sp, #40	; 0x28
 8005fea:	af02      	add	r7, sp, #8
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
 8005ff2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005ff4:	232c      	movs	r3, #44	; 0x2c
 8005ff6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	2b2c      	cmp	r3, #44	; 0x2c
 8005ffc:	d00b      	beq.n	8006016 <xTimerCreateStatic+0x30>
 8005ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006002:	b672      	cpsid	i
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	b662      	cpsie	i
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	e7fe      	b.n	8006014 <xTimerCreateStatic+0x2e>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006016:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10b      	bne.n	8006036 <xTimerCreateStatic+0x50>
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	b672      	cpsid	i
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	b662      	cpsie	i
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	e7fe      	b.n	8006034 <xTimerCreateStatic+0x4e>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00d      	beq.n	800605c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	9301      	str	r3, [sp, #4]
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 f805 	bl	8006066 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800605c:	69fb      	ldr	r3, [r7, #28]
	}
 800605e:	4618      	mov	r0, r3
 8006060:	3720      	adds	r7, #32
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b086      	sub	sp, #24
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	607a      	str	r2, [r7, #4]
 8006072:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10b      	bne.n	8006092 <prvInitialiseNewTimer+0x2c>
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	b672      	cpsid	i
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	b662      	cpsie	i
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	e7fe      	b.n	8006090 <prvInitialiseNewTimer+0x2a>

	if( pxNewTimer != NULL )
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01e      	beq.n	80060d6 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006098:	f000 faec 	bl	8006674 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	6a3a      	ldr	r2, [r7, #32]
 80060b2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	3304      	adds	r3, #4
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fe fa0d 	bl	80044d8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d008      	beq.n	80060d6 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ca:	f043 0304 	orr.w	r3, r3, #4
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80060d6:	bf00      	nop
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08a      	sub	sp, #40	; 0x28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10b      	bne.n	8006110 <xTimerGenericCommand+0x30>
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	b672      	cpsid	i
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	b662      	cpsie	i
 800610c:	623b      	str	r3, [r7, #32]
 800610e:	e7fe      	b.n	800610e <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006110:	4b19      	ldr	r3, [pc, #100]	; (8006178 <xTimerGenericCommand+0x98>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d02a      	beq.n	800616e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b05      	cmp	r3, #5
 8006128:	dc18      	bgt.n	800615c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800612a:	f7ff fe0f 	bl	8005d4c <xTaskGetSchedulerState>
 800612e:	4603      	mov	r3, r0
 8006130:	2b02      	cmp	r3, #2
 8006132:	d109      	bne.n	8006148 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006134:	4b10      	ldr	r3, [pc, #64]	; (8006178 <xTimerGenericCommand+0x98>)
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	f107 0110 	add.w	r1, r7, #16
 800613c:	2300      	movs	r3, #0
 800613e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006140:	f7fe fc0a 	bl	8004958 <xQueueGenericSend>
 8006144:	6278      	str	r0, [r7, #36]	; 0x24
 8006146:	e012      	b.n	800616e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006148:	4b0b      	ldr	r3, [pc, #44]	; (8006178 <xTimerGenericCommand+0x98>)
 800614a:	6818      	ldr	r0, [r3, #0]
 800614c:	f107 0110 	add.w	r1, r7, #16
 8006150:	2300      	movs	r3, #0
 8006152:	2200      	movs	r2, #0
 8006154:	f7fe fc00 	bl	8004958 <xQueueGenericSend>
 8006158:	6278      	str	r0, [r7, #36]	; 0x24
 800615a:	e008      	b.n	800616e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <xTimerGenericCommand+0x98>)
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	f107 0110 	add.w	r1, r7, #16
 8006164:	2300      	movs	r3, #0
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	f7fe fce0 	bl	8004b2c <xQueueGenericSendFromISR>
 800616c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006170:	4618      	mov	r0, r3
 8006172:	3728      	adds	r7, #40	; 0x28
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	20000c18 	.word	0x20000c18

0800617c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af02      	add	r7, sp, #8
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006186:	4b23      	ldr	r3, [pc, #140]	; (8006214 <prvProcessExpiredTimer+0x98>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	3304      	adds	r3, #4
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe fa09 	bl	80045ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d023      	beq.n	80061f0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	699a      	ldr	r2, [r3, #24]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	18d1      	adds	r1, r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	6978      	ldr	r0, [r7, #20]
 80061b6:	f000 f8d3 	bl	8006360 <prvInsertTimerInActiveList>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d020      	beq.n	8006202 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061c0:	2300      	movs	r3, #0
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	2300      	movs	r3, #0
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	2100      	movs	r1, #0
 80061ca:	6978      	ldr	r0, [r7, #20]
 80061cc:	f7ff ff88 	bl	80060e0 <xTimerGenericCommand>
 80061d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d114      	bne.n	8006202 <prvProcessExpiredTimer+0x86>
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	b672      	cpsid	i
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	b662      	cpsie	i
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	e7fe      	b.n	80061ee <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061f6:	f023 0301 	bic.w	r3, r3, #1
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	6978      	ldr	r0, [r7, #20]
 8006208:	4798      	blx	r3
}
 800620a:	bf00      	nop
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000c10 	.word	0x20000c10

08006218 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006220:	f107 0308 	add.w	r3, r7, #8
 8006224:	4618      	mov	r0, r3
 8006226:	f000 f857 	bl	80062d8 <prvGetNextExpireTime>
 800622a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4619      	mov	r1, r3
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 f803 	bl	800623c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006236:	f000 f8d5 	bl	80063e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800623a:	e7f1      	b.n	8006220 <prvTimerTask+0x8>

0800623c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006246:	f7ff f9d3 	bl	80055f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800624a:	f107 0308 	add.w	r3, r7, #8
 800624e:	4618      	mov	r0, r3
 8006250:	f000 f866 	bl	8006320 <prvSampleTimeNow>
 8006254:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d130      	bne.n	80062be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <prvProcessTimerOrBlockTask+0x3c>
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	429a      	cmp	r2, r3
 8006268:	d806      	bhi.n	8006278 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800626a:	f7ff f9cf 	bl	800560c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800626e:	68f9      	ldr	r1, [r7, #12]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff ff83 	bl	800617c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006276:	e024      	b.n	80062c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d008      	beq.n	8006290 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800627e:	4b13      	ldr	r3, [pc, #76]	; (80062cc <prvProcessTimerOrBlockTask+0x90>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <prvProcessTimerOrBlockTask+0x50>
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <prvProcessTimerOrBlockTask+0x52>
 800628c:	2300      	movs	r3, #0
 800628e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006290:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <prvProcessTimerOrBlockTask+0x94>)
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	4619      	mov	r1, r3
 800629e:	f7fe ff3f 	bl	8005120 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062a2:	f7ff f9b3 	bl	800560c <xTaskResumeAll>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10a      	bne.n	80062c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <prvProcessTimerOrBlockTask+0x98>)
 80062ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	f3bf 8f6f 	isb	sy
}
 80062bc:	e001      	b.n	80062c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80062be:	f7ff f9a5 	bl	800560c <xTaskResumeAll>
}
 80062c2:	bf00      	nop
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000c14 	.word	0x20000c14
 80062d0:	20000c18 	.word	0x20000c18
 80062d4:	e000ed04 	.word	0xe000ed04

080062d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80062e0:	4b0e      	ldr	r3, [pc, #56]	; (800631c <prvGetNextExpireTime+0x44>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <prvGetNextExpireTime+0x16>
 80062ea:	2201      	movs	r2, #1
 80062ec:	e000      	b.n	80062f0 <prvGetNextExpireTime+0x18>
 80062ee:	2200      	movs	r2, #0
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d105      	bne.n	8006308 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062fc:	4b07      	ldr	r3, [pc, #28]	; (800631c <prvGetNextExpireTime+0x44>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	e001      	b.n	800630c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800630c:	68fb      	ldr	r3, [r7, #12]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000c10 	.word	0x20000c10

08006320 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006328:	f7ff fa00 	bl	800572c <xTaskGetTickCount>
 800632c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800632e:	4b0b      	ldr	r3, [pc, #44]	; (800635c <prvSampleTimeNow+0x3c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	429a      	cmp	r2, r3
 8006336:	d205      	bcs.n	8006344 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006338:	f000 f936 	bl	80065a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	e002      	b.n	800634a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800634a:	4a04      	ldr	r2, [pc, #16]	; (800635c <prvSampleTimeNow+0x3c>)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006350:	68fb      	ldr	r3, [r7, #12]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20000c20 	.word	0x20000c20

08006360 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800636e:	2300      	movs	r3, #0
 8006370:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	429a      	cmp	r2, r3
 8006384:	d812      	bhi.n	80063ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	1ad2      	subs	r2, r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	429a      	cmp	r2, r3
 8006392:	d302      	bcc.n	800639a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006394:	2301      	movs	r3, #1
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	e01b      	b.n	80063d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800639a:	4b10      	ldr	r3, [pc, #64]	; (80063dc <prvInsertTimerInActiveList+0x7c>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3304      	adds	r3, #4
 80063a2:	4619      	mov	r1, r3
 80063a4:	4610      	mov	r0, r2
 80063a6:	f7fe f8c8 	bl	800453a <vListInsert>
 80063aa:	e012      	b.n	80063d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d206      	bcs.n	80063c2 <prvInsertTimerInActiveList+0x62>
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d302      	bcc.n	80063c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063bc:	2301      	movs	r3, #1
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	e007      	b.n	80063d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063c2:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <prvInsertTimerInActiveList+0x80>)
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3304      	adds	r3, #4
 80063ca:	4619      	mov	r1, r3
 80063cc:	4610      	mov	r0, r2
 80063ce:	f7fe f8b4 	bl	800453a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80063d2:	697b      	ldr	r3, [r7, #20]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	20000c14 	.word	0x20000c14
 80063e0:	20000c10 	.word	0x20000c10

080063e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08e      	sub	sp, #56	; 0x38
 80063e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063ea:	e0cc      	b.n	8006586 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	da19      	bge.n	8006426 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80063f2:	1d3b      	adds	r3, r7, #4
 80063f4:	3304      	adds	r3, #4
 80063f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80063f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10b      	bne.n	8006416 <prvProcessReceivedCommands+0x32>
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	b672      	cpsid	i
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	b662      	cpsie	i
 8006412:	61fb      	str	r3, [r7, #28]
 8006414:	e7fe      	b.n	8006414 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800641c:	6850      	ldr	r0, [r2, #4]
 800641e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006420:	6892      	ldr	r2, [r2, #8]
 8006422:	4611      	mov	r1, r2
 8006424:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	f2c0 80ab 	blt.w	8006584 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d004      	beq.n	8006444 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	3304      	adds	r3, #4
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe f8b4 	bl	80045ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006444:	463b      	mov	r3, r7
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff ff6a 	bl	8006320 <prvSampleTimeNow>
 800644c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b09      	cmp	r3, #9
 8006452:	f200 8098 	bhi.w	8006586 <prvProcessReceivedCommands+0x1a2>
 8006456:	a201      	add	r2, pc, #4	; (adr r2, 800645c <prvProcessReceivedCommands+0x78>)
 8006458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645c:	08006485 	.word	0x08006485
 8006460:	08006485 	.word	0x08006485
 8006464:	08006485 	.word	0x08006485
 8006468:	080064fb 	.word	0x080064fb
 800646c:	0800650f 	.word	0x0800650f
 8006470:	0800655b 	.word	0x0800655b
 8006474:	08006485 	.word	0x08006485
 8006478:	08006485 	.word	0x08006485
 800647c:	080064fb 	.word	0x080064fb
 8006480:	0800650f 	.word	0x0800650f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800648a:	f043 0301 	orr.w	r3, r3, #1
 800648e:	b2da      	uxtb	r2, r3
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	18d1      	adds	r1, r2, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064a4:	f7ff ff5c 	bl	8006360 <prvInsertTimerInActiveList>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d06b      	beq.n	8006586 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d060      	beq.n	8006586 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	441a      	add	r2, r3
 80064cc:	2300      	movs	r3, #0
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	2300      	movs	r3, #0
 80064d2:	2100      	movs	r1, #0
 80064d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064d6:	f7ff fe03 	bl	80060e0 <xTimerGenericCommand>
 80064da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d151      	bne.n	8006586 <prvProcessReceivedCommands+0x1a2>
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	b672      	cpsid	i
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	b662      	cpsie	i
 80064f6:	61bb      	str	r3, [r7, #24]
 80064f8:	e7fe      	b.n	80064f8 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006500:	f023 0301 	bic.w	r3, r3, #1
 8006504:	b2da      	uxtb	r2, r3
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800650c:	e03b      	b.n	8006586 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006514:	f043 0301 	orr.w	r3, r3, #1
 8006518:	b2da      	uxtb	r2, r3
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10b      	bne.n	8006546 <prvProcessReceivedCommands+0x162>
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	b672      	cpsid	i
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	b662      	cpsie	i
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	e7fe      	b.n	8006544 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	699a      	ldr	r2, [r3, #24]
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	18d1      	adds	r1, r2, r3
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006554:	f7ff ff04 	bl	8006360 <prvInsertTimerInActiveList>
					break;
 8006558:	e015      	b.n	8006586 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d103      	bne.n	8006570 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800656a:	f000 fbd7 	bl	8006d1c <vPortFree>
 800656e:	e00a      	b.n	8006586 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006576:	f023 0301 	bic.w	r3, r3, #1
 800657a:	b2da      	uxtb	r2, r3
 800657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006582:	e000      	b.n	8006586 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006584:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006586:	4b07      	ldr	r3, [pc, #28]	; (80065a4 <prvProcessReceivedCommands+0x1c0>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	1d39      	adds	r1, r7, #4
 800658c:	2200      	movs	r2, #0
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe fb68 	bl	8004c64 <xQueueReceive>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	f47f af28 	bne.w	80063ec <prvProcessReceivedCommands+0x8>
	}
}
 800659c:	bf00      	nop
 800659e:	3730      	adds	r7, #48	; 0x30
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000c18 	.word	0x20000c18

080065a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065ae:	e049      	b.n	8006644 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065b0:	4b2e      	ldr	r3, [pc, #184]	; (800666c <prvSwitchTimerLists+0xc4>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ba:	4b2c      	ldr	r3, [pc, #176]	; (800666c <prvSwitchTimerLists+0xc4>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3304      	adds	r3, #4
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fd ffef 	bl	80045ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d02f      	beq.n	8006644 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4413      	add	r3, r2
 80065ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d90e      	bls.n	8006614 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006602:	4b1a      	ldr	r3, [pc, #104]	; (800666c <prvSwitchTimerLists+0xc4>)
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3304      	adds	r3, #4
 800660a:	4619      	mov	r1, r3
 800660c:	4610      	mov	r0, r2
 800660e:	f7fd ff94 	bl	800453a <vListInsert>
 8006612:	e017      	b.n	8006644 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006614:	2300      	movs	r3, #0
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	2300      	movs	r3, #0
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	2100      	movs	r1, #0
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f7ff fd5e 	bl	80060e0 <xTimerGenericCommand>
 8006624:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10b      	bne.n	8006644 <prvSwitchTimerLists+0x9c>
 800662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006630:	b672      	cpsid	i
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	b662      	cpsie	i
 8006640:	603b      	str	r3, [r7, #0]
 8006642:	e7fe      	b.n	8006642 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006644:	4b09      	ldr	r3, [pc, #36]	; (800666c <prvSwitchTimerLists+0xc4>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1b0      	bne.n	80065b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800664e:	4b07      	ldr	r3, [pc, #28]	; (800666c <prvSwitchTimerLists+0xc4>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006654:	4b06      	ldr	r3, [pc, #24]	; (8006670 <prvSwitchTimerLists+0xc8>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a04      	ldr	r2, [pc, #16]	; (800666c <prvSwitchTimerLists+0xc4>)
 800665a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800665c:	4a04      	ldr	r2, [pc, #16]	; (8006670 <prvSwitchTimerLists+0xc8>)
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	6013      	str	r3, [r2, #0]
}
 8006662:	bf00      	nop
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20000c10 	.word	0x20000c10
 8006670:	20000c14 	.word	0x20000c14

08006674 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800667a:	f000 f965 	bl	8006948 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800667e:	4b15      	ldr	r3, [pc, #84]	; (80066d4 <prvCheckForValidListAndQueue+0x60>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d120      	bne.n	80066c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006686:	4814      	ldr	r0, [pc, #80]	; (80066d8 <prvCheckForValidListAndQueue+0x64>)
 8006688:	f7fd ff06 	bl	8004498 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800668c:	4813      	ldr	r0, [pc, #76]	; (80066dc <prvCheckForValidListAndQueue+0x68>)
 800668e:	f7fd ff03 	bl	8004498 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006692:	4b13      	ldr	r3, [pc, #76]	; (80066e0 <prvCheckForValidListAndQueue+0x6c>)
 8006694:	4a10      	ldr	r2, [pc, #64]	; (80066d8 <prvCheckForValidListAndQueue+0x64>)
 8006696:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006698:	4b12      	ldr	r3, [pc, #72]	; (80066e4 <prvCheckForValidListAndQueue+0x70>)
 800669a:	4a10      	ldr	r2, [pc, #64]	; (80066dc <prvCheckForValidListAndQueue+0x68>)
 800669c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800669e:	2300      	movs	r3, #0
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	4b11      	ldr	r3, [pc, #68]	; (80066e8 <prvCheckForValidListAndQueue+0x74>)
 80066a4:	4a11      	ldr	r2, [pc, #68]	; (80066ec <prvCheckForValidListAndQueue+0x78>)
 80066a6:	2110      	movs	r1, #16
 80066a8:	200a      	movs	r0, #10
 80066aa:	f7fe f805 	bl	80046b8 <xQueueGenericCreateStatic>
 80066ae:	4602      	mov	r2, r0
 80066b0:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <prvCheckForValidListAndQueue+0x60>)
 80066b2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066b4:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <prvCheckForValidListAndQueue+0x60>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066bc:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <prvCheckForValidListAndQueue+0x60>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	490b      	ldr	r1, [pc, #44]	; (80066f0 <prvCheckForValidListAndQueue+0x7c>)
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fe fcda 	bl	800507c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066c8:	f000 f970 	bl	80069ac <vPortExitCritical>
}
 80066cc:	bf00      	nop
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000c18 	.word	0x20000c18
 80066d8:	20000be8 	.word	0x20000be8
 80066dc:	20000bfc 	.word	0x20000bfc
 80066e0:	20000c10 	.word	0x20000c10
 80066e4:	20000c14 	.word	0x20000c14
 80066e8:	20000cc4 	.word	0x20000cc4
 80066ec:	20000c24 	.word	0x20000c24
 80066f0:	080070c0 	.word	0x080070c0

080066f4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10b      	bne.n	800671e <pvTimerGetTimerID+0x2a>
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	b672      	cpsid	i
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	b662      	cpsie	i
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	e7fe      	b.n	800671c <pvTimerGetTimerID+0x28>

	taskENTER_CRITICAL();
 800671e:	f000 f913 	bl	8006948 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006728:	f000 f940 	bl	80069ac <vPortExitCritical>

	return pvReturn;
 800672c:	693b      	ldr	r3, [r7, #16]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3b04      	subs	r3, #4
 8006748:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006750:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3b04      	subs	r3, #4
 8006756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f023 0201 	bic.w	r2, r3, #1
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	3b04      	subs	r3, #4
 8006766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006768:	4a0c      	ldr	r2, [pc, #48]	; (800679c <pxPortInitialiseStack+0x64>)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	3b14      	subs	r3, #20
 8006772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3b04      	subs	r3, #4
 800677e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f06f 0202 	mvn.w	r2, #2
 8006786:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3b20      	subs	r3, #32
 800678c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800678e:	68fb      	ldr	r3, [r7, #12]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	080067a1 	.word	0x080067a1

080067a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067a6:	2300      	movs	r3, #0
 80067a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067aa:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <prvTaskExitError+0x58>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b2:	d00b      	beq.n	80067cc <prvTaskExitError+0x2c>
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	b672      	cpsid	i
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	b662      	cpsie	i
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	e7fe      	b.n	80067ca <prvTaskExitError+0x2a>
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	b672      	cpsid	i
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	b662      	cpsie	i
 80067e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067e2:	bf00      	nop
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0fc      	beq.n	80067e4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067ea:	bf00      	nop
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	2000000c 	.word	0x2000000c
 80067fc:	00000000 	.word	0x00000000

08006800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006800:	4b07      	ldr	r3, [pc, #28]	; (8006820 <pxCurrentTCBConst2>)
 8006802:	6819      	ldr	r1, [r3, #0]
 8006804:	6808      	ldr	r0, [r1, #0]
 8006806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680a:	f380 8809 	msr	PSP, r0
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f04f 0000 	mov.w	r0, #0
 8006816:	f380 8811 	msr	BASEPRI, r0
 800681a:	4770      	bx	lr
 800681c:	f3af 8000 	nop.w

08006820 <pxCurrentTCBConst2>:
 8006820:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop

08006828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006828:	4808      	ldr	r0, [pc, #32]	; (800684c <prvPortStartFirstTask+0x24>)
 800682a:	6800      	ldr	r0, [r0, #0]
 800682c:	6800      	ldr	r0, [r0, #0]
 800682e:	f380 8808 	msr	MSP, r0
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	f380 8814 	msr	CONTROL, r0
 800683a:	b662      	cpsie	i
 800683c:	b661      	cpsie	f
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	df00      	svc	0
 8006848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800684a:	bf00      	nop
 800684c:	e000ed08 	.word	0xe000ed08

08006850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006856:	4b36      	ldr	r3, [pc, #216]	; (8006930 <xPortStartScheduler+0xe0>)
 8006858:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	b2db      	uxtb	r3, r3
 8006860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	22ff      	movs	r2, #255	; 0xff
 8006866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006878:	b2da      	uxtb	r2, r3
 800687a:	4b2e      	ldr	r3, [pc, #184]	; (8006934 <xPortStartScheduler+0xe4>)
 800687c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800687e:	4b2e      	ldr	r3, [pc, #184]	; (8006938 <xPortStartScheduler+0xe8>)
 8006880:	2207      	movs	r2, #7
 8006882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006884:	e009      	b.n	800689a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006886:	4b2c      	ldr	r3, [pc, #176]	; (8006938 <xPortStartScheduler+0xe8>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3b01      	subs	r3, #1
 800688c:	4a2a      	ldr	r2, [pc, #168]	; (8006938 <xPortStartScheduler+0xe8>)
 800688e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	b2db      	uxtb	r3, r3
 8006898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a2:	2b80      	cmp	r3, #128	; 0x80
 80068a4:	d0ef      	beq.n	8006886 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068a6:	4b24      	ldr	r3, [pc, #144]	; (8006938 <xPortStartScheduler+0xe8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f1c3 0307 	rsb	r3, r3, #7
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d00b      	beq.n	80068ca <xPortStartScheduler+0x7a>
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	b672      	cpsid	i
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	b662      	cpsie	i
 80068c6:	60bb      	str	r3, [r7, #8]
 80068c8:	e7fe      	b.n	80068c8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068ca:	4b1b      	ldr	r3, [pc, #108]	; (8006938 <xPortStartScheduler+0xe8>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	4a19      	ldr	r2, [pc, #100]	; (8006938 <xPortStartScheduler+0xe8>)
 80068d2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068d4:	4b18      	ldr	r3, [pc, #96]	; (8006938 <xPortStartScheduler+0xe8>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068dc:	4a16      	ldr	r2, [pc, #88]	; (8006938 <xPortStartScheduler+0xe8>)
 80068de:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068e8:	4b14      	ldr	r3, [pc, #80]	; (800693c <xPortStartScheduler+0xec>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a13      	ldr	r2, [pc, #76]	; (800693c <xPortStartScheduler+0xec>)
 80068ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068f2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068f4:	4b11      	ldr	r3, [pc, #68]	; (800693c <xPortStartScheduler+0xec>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a10      	ldr	r2, [pc, #64]	; (800693c <xPortStartScheduler+0xec>)
 80068fa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80068fe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006900:	f000 f8d4 	bl	8006aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006904:	4b0e      	ldr	r3, [pc, #56]	; (8006940 <xPortStartScheduler+0xf0>)
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800690a:	f000 f8f3 	bl	8006af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800690e:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <xPortStartScheduler+0xf4>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a0c      	ldr	r2, [pc, #48]	; (8006944 <xPortStartScheduler+0xf4>)
 8006914:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006918:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800691a:	f7ff ff85 	bl	8006828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800691e:	f7fe ffad 	bl	800587c <vTaskSwitchContext>
	prvTaskExitError();
 8006922:	f7ff ff3d 	bl	80067a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	e000e400 	.word	0xe000e400
 8006934:	20000d14 	.word	0x20000d14
 8006938:	20000d18 	.word	0x20000d18
 800693c:	e000ed20 	.word	0xe000ed20
 8006940:	2000000c 	.word	0x2000000c
 8006944:	e000ef34 	.word	0xe000ef34

08006948 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	b672      	cpsid	i
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	b662      	cpsie	i
 8006962:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006964:	4b0f      	ldr	r3, [pc, #60]	; (80069a4 <vPortEnterCritical+0x5c>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3301      	adds	r3, #1
 800696a:	4a0e      	ldr	r2, [pc, #56]	; (80069a4 <vPortEnterCritical+0x5c>)
 800696c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800696e:	4b0d      	ldr	r3, [pc, #52]	; (80069a4 <vPortEnterCritical+0x5c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d110      	bne.n	8006998 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006976:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <vPortEnterCritical+0x60>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00b      	beq.n	8006998 <vPortEnterCritical+0x50>
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	b672      	cpsid	i
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	b662      	cpsie	i
 8006994:	603b      	str	r3, [r7, #0]
 8006996:	e7fe      	b.n	8006996 <vPortEnterCritical+0x4e>
	}
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	2000000c 	.word	0x2000000c
 80069a8:	e000ed04 	.word	0xe000ed04

080069ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069b2:	4b12      	ldr	r3, [pc, #72]	; (80069fc <vPortExitCritical+0x50>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10b      	bne.n	80069d2 <vPortExitCritical+0x26>
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	b672      	cpsid	i
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	b662      	cpsie	i
 80069ce:	607b      	str	r3, [r7, #4]
 80069d0:	e7fe      	b.n	80069d0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80069d2:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <vPortExitCritical+0x50>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	4a08      	ldr	r2, [pc, #32]	; (80069fc <vPortExitCritical+0x50>)
 80069da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069dc:	4b07      	ldr	r3, [pc, #28]	; (80069fc <vPortExitCritical+0x50>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d104      	bne.n	80069ee <vPortExitCritical+0x42>
 80069e4:	2300      	movs	r3, #0
 80069e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	2000000c 	.word	0x2000000c

08006a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a00:	f3ef 8009 	mrs	r0, PSP
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	4b15      	ldr	r3, [pc, #84]	; (8006a60 <pxCurrentTCBConst>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	f01e 0f10 	tst.w	lr, #16
 8006a10:	bf08      	it	eq
 8006a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1a:	6010      	str	r0, [r2, #0]
 8006a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a24:	b672      	cpsid	i
 8006a26:	f380 8811 	msr	BASEPRI, r0
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	b662      	cpsie	i
 8006a34:	f7fe ff22 	bl	800587c <vTaskSwitchContext>
 8006a38:	f04f 0000 	mov.w	r0, #0
 8006a3c:	f380 8811 	msr	BASEPRI, r0
 8006a40:	bc09      	pop	{r0, r3}
 8006a42:	6819      	ldr	r1, [r3, #0]
 8006a44:	6808      	ldr	r0, [r1, #0]
 8006a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4a:	f01e 0f10 	tst.w	lr, #16
 8006a4e:	bf08      	it	eq
 8006a50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a54:	f380 8809 	msr	PSP, r0
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop

08006a60 <pxCurrentTCBConst>:
 8006a60:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop

08006a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	b672      	cpsid	i
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	b662      	cpsie	i
 8006a82:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a84:	f7fe fe62 	bl	800574c <xTaskIncrementTick>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a8e:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <SysTick_Handler+0x40>)
 8006a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	2300      	movs	r3, #0
 8006a98:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	e000ed04 	.word	0xe000ed04

08006aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ab0:	4b0b      	ldr	r3, [pc, #44]	; (8006ae0 <vPortSetupTimerInterrupt+0x34>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ab6:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <vPortSetupTimerInterrupt+0x38>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006abc:	4b0a      	ldr	r3, [pc, #40]	; (8006ae8 <vPortSetupTimerInterrupt+0x3c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a0a      	ldr	r2, [pc, #40]	; (8006aec <vPortSetupTimerInterrupt+0x40>)
 8006ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac6:	099b      	lsrs	r3, r3, #6
 8006ac8:	4a09      	ldr	r2, [pc, #36]	; (8006af0 <vPortSetupTimerInterrupt+0x44>)
 8006aca:	3b01      	subs	r3, #1
 8006acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ace:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <vPortSetupTimerInterrupt+0x34>)
 8006ad0:	2207      	movs	r2, #7
 8006ad2:	601a      	str	r2, [r3, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	e000e010 	.word	0xe000e010
 8006ae4:	e000e018 	.word	0xe000e018
 8006ae8:	20000000 	.word	0x20000000
 8006aec:	10624dd3 	.word	0x10624dd3
 8006af0:	e000e014 	.word	0xe000e014

08006af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b04 <vPortEnableVFP+0x10>
 8006af8:	6801      	ldr	r1, [r0, #0]
 8006afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006afe:	6001      	str	r1, [r0, #0]
 8006b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b02:	bf00      	nop
 8006b04:	e000ed88 	.word	0xe000ed88

08006b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b0e:	f3ef 8305 	mrs	r3, IPSR
 8006b12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b0f      	cmp	r3, #15
 8006b18:	d915      	bls.n	8006b46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b1a:	4a18      	ldr	r2, [pc, #96]	; (8006b7c <vPortValidateInterruptPriority+0x74>)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b24:	4b16      	ldr	r3, [pc, #88]	; (8006b80 <vPortValidateInterruptPriority+0x78>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	7afa      	ldrb	r2, [r7, #11]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d20b      	bcs.n	8006b46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	b672      	cpsid	i
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	b662      	cpsie	i
 8006b42:	607b      	str	r3, [r7, #4]
 8006b44:	e7fe      	b.n	8006b44 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b46:	4b0f      	ldr	r3, [pc, #60]	; (8006b84 <vPortValidateInterruptPriority+0x7c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b4e:	4b0e      	ldr	r3, [pc, #56]	; (8006b88 <vPortValidateInterruptPriority+0x80>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d90b      	bls.n	8006b6e <vPortValidateInterruptPriority+0x66>
 8006b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5a:	b672      	cpsid	i
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	b662      	cpsie	i
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	e7fe      	b.n	8006b6c <vPortValidateInterruptPriority+0x64>
	}
 8006b6e:	bf00      	nop
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	e000e3f0 	.word	0xe000e3f0
 8006b80:	20000d14 	.word	0x20000d14
 8006b84:	e000ed0c 	.word	0xe000ed0c
 8006b88:	20000d18 	.word	0x20000d18

08006b8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08a      	sub	sp, #40	; 0x28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b94:	2300      	movs	r3, #0
 8006b96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b98:	f7fe fd2a 	bl	80055f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b9c:	4b5a      	ldr	r3, [pc, #360]	; (8006d08 <pvPortMalloc+0x17c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ba4:	f000 f916 	bl	8006dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ba8:	4b58      	ldr	r3, [pc, #352]	; (8006d0c <pvPortMalloc+0x180>)
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4013      	ands	r3, r2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f040 8090 	bne.w	8006cd6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d01e      	beq.n	8006bfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006bbc:	2208      	movs	r2, #8
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f003 0307 	and.w	r3, r3, #7
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d015      	beq.n	8006bfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f023 0307 	bic.w	r3, r3, #7
 8006bd4:	3308      	adds	r3, #8
 8006bd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f003 0307 	and.w	r3, r3, #7
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00b      	beq.n	8006bfa <pvPortMalloc+0x6e>
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	b672      	cpsid	i
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	b662      	cpsie	i
 8006bf6:	617b      	str	r3, [r7, #20]
 8006bf8:	e7fe      	b.n	8006bf8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d06a      	beq.n	8006cd6 <pvPortMalloc+0x14a>
 8006c00:	4b43      	ldr	r3, [pc, #268]	; (8006d10 <pvPortMalloc+0x184>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d865      	bhi.n	8006cd6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c0a:	4b42      	ldr	r3, [pc, #264]	; (8006d14 <pvPortMalloc+0x188>)
 8006c0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c0e:	4b41      	ldr	r3, [pc, #260]	; (8006d14 <pvPortMalloc+0x188>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c14:	e004      	b.n	8006c20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d903      	bls.n	8006c32 <pvPortMalloc+0xa6>
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f1      	bne.n	8006c16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c32:	4b35      	ldr	r3, [pc, #212]	; (8006d08 <pvPortMalloc+0x17c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d04c      	beq.n	8006cd6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2208      	movs	r2, #8
 8006c42:	4413      	add	r3, r2
 8006c44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	1ad2      	subs	r2, r2, r3
 8006c56:	2308      	movs	r3, #8
 8006c58:	005b      	lsls	r3, r3, #1
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d920      	bls.n	8006ca0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4413      	add	r3, r2
 8006c64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00b      	beq.n	8006c88 <pvPortMalloc+0xfc>
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	b672      	cpsid	i
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	b662      	cpsie	i
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	e7fe      	b.n	8006c86 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	1ad2      	subs	r2, r2, r3
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c9a:	69b8      	ldr	r0, [r7, #24]
 8006c9c:	f000 f8fc 	bl	8006e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ca0:	4b1b      	ldr	r3, [pc, #108]	; (8006d10 <pvPortMalloc+0x184>)
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	4a19      	ldr	r2, [pc, #100]	; (8006d10 <pvPortMalloc+0x184>)
 8006cac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cae:	4b18      	ldr	r3, [pc, #96]	; (8006d10 <pvPortMalloc+0x184>)
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4b19      	ldr	r3, [pc, #100]	; (8006d18 <pvPortMalloc+0x18c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d203      	bcs.n	8006cc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cba:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <pvPortMalloc+0x184>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a16      	ldr	r2, [pc, #88]	; (8006d18 <pvPortMalloc+0x18c>)
 8006cc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	4b11      	ldr	r3, [pc, #68]	; (8006d0c <pvPortMalloc+0x180>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006cd6:	f7fe fc99 	bl	800560c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	f003 0307 	and.w	r3, r3, #7
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00b      	beq.n	8006cfc <pvPortMalloc+0x170>
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	b672      	cpsid	i
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	b662      	cpsie	i
 8006cf8:	60fb      	str	r3, [r7, #12]
 8006cfa:	e7fe      	b.n	8006cfa <pvPortMalloc+0x16e>
	return pvReturn;
 8006cfc:	69fb      	ldr	r3, [r7, #28]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3728      	adds	r7, #40	; 0x28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20004924 	.word	0x20004924
 8006d0c:	20004930 	.word	0x20004930
 8006d10:	20004928 	.word	0x20004928
 8006d14:	2000491c 	.word	0x2000491c
 8006d18:	2000492c 	.word	0x2000492c

08006d1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d04a      	beq.n	8006dc4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d2e:	2308      	movs	r3, #8
 8006d30:	425b      	negs	r3, r3
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	4413      	add	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	4b22      	ldr	r3, [pc, #136]	; (8006dcc <vPortFree+0xb0>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4013      	ands	r3, r2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10b      	bne.n	8006d62 <vPortFree+0x46>
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	b672      	cpsid	i
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	b662      	cpsie	i
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	e7fe      	b.n	8006d60 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00b      	beq.n	8006d82 <vPortFree+0x66>
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	b672      	cpsid	i
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	b662      	cpsie	i
 8006d7e:	60bb      	str	r3, [r7, #8]
 8006d80:	e7fe      	b.n	8006d80 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	4b11      	ldr	r3, [pc, #68]	; (8006dcc <vPortFree+0xb0>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d019      	beq.n	8006dc4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d115      	bne.n	8006dc4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	4b0b      	ldr	r3, [pc, #44]	; (8006dcc <vPortFree+0xb0>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	43db      	mvns	r3, r3
 8006da2:	401a      	ands	r2, r3
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006da8:	f7fe fc22 	bl	80055f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	4b07      	ldr	r3, [pc, #28]	; (8006dd0 <vPortFree+0xb4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4413      	add	r3, r2
 8006db6:	4a06      	ldr	r2, [pc, #24]	; (8006dd0 <vPortFree+0xb4>)
 8006db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dba:	6938      	ldr	r0, [r7, #16]
 8006dbc:	f000 f86c 	bl	8006e98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006dc0:	f7fe fc24 	bl	800560c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dc4:	bf00      	nop
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	20004930 	.word	0x20004930
 8006dd0:	20004928 	.word	0x20004928

08006dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006dda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006de0:	4b27      	ldr	r3, [pc, #156]	; (8006e80 <prvHeapInit+0xac>)
 8006de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00c      	beq.n	8006e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3307      	adds	r3, #7
 8006df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 0307 	bic.w	r3, r3, #7
 8006dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	4a1f      	ldr	r2, [pc, #124]	; (8006e80 <prvHeapInit+0xac>)
 8006e04:	4413      	add	r3, r2
 8006e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e0c:	4a1d      	ldr	r2, [pc, #116]	; (8006e84 <prvHeapInit+0xb0>)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e12:	4b1c      	ldr	r3, [pc, #112]	; (8006e84 <prvHeapInit+0xb0>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e20:	2208      	movs	r2, #8
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	1a9b      	subs	r3, r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f023 0307 	bic.w	r3, r3, #7
 8006e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4a15      	ldr	r2, [pc, #84]	; (8006e88 <prvHeapInit+0xb4>)
 8006e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e36:	4b14      	ldr	r3, [pc, #80]	; (8006e88 <prvHeapInit+0xb4>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e3e:	4b12      	ldr	r3, [pc, #72]	; (8006e88 <prvHeapInit+0xb4>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2200      	movs	r2, #0
 8006e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	1ad2      	subs	r2, r2, r3
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e54:	4b0c      	ldr	r3, [pc, #48]	; (8006e88 <prvHeapInit+0xb4>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	4a0a      	ldr	r2, [pc, #40]	; (8006e8c <prvHeapInit+0xb8>)
 8006e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	4a09      	ldr	r2, [pc, #36]	; (8006e90 <prvHeapInit+0xbc>)
 8006e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e6c:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <prvHeapInit+0xc0>)
 8006e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e72:	601a      	str	r2, [r3, #0]
}
 8006e74:	bf00      	nop
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	20000d1c 	.word	0x20000d1c
 8006e84:	2000491c 	.word	0x2000491c
 8006e88:	20004924 	.word	0x20004924
 8006e8c:	2000492c 	.word	0x2000492c
 8006e90:	20004928 	.word	0x20004928
 8006e94:	20004930 	.word	0x20004930

08006e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ea0:	4b28      	ldr	r3, [pc, #160]	; (8006f44 <prvInsertBlockIntoFreeList+0xac>)
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	e002      	b.n	8006eac <prvInsertBlockIntoFreeList+0x14>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d8f7      	bhi.n	8006ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d108      	bne.n	8006eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	441a      	add	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	441a      	add	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d118      	bne.n	8006f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4b15      	ldr	r3, [pc, #84]	; (8006f48 <prvInsertBlockIntoFreeList+0xb0>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d00d      	beq.n	8006f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	441a      	add	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	e008      	b.n	8006f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f16:	4b0c      	ldr	r3, [pc, #48]	; (8006f48 <prvInsertBlockIntoFreeList+0xb0>)
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	e003      	b.n	8006f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d002      	beq.n	8006f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f36:	bf00      	nop
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	2000491c 	.word	0x2000491c
 8006f48:	20004924 	.word	0x20004924

08006f4c <__libc_init_array>:
 8006f4c:	b570      	push	{r4, r5, r6, lr}
 8006f4e:	4e0d      	ldr	r6, [pc, #52]	; (8006f84 <__libc_init_array+0x38>)
 8006f50:	4c0d      	ldr	r4, [pc, #52]	; (8006f88 <__libc_init_array+0x3c>)
 8006f52:	1ba4      	subs	r4, r4, r6
 8006f54:	10a4      	asrs	r4, r4, #2
 8006f56:	2500      	movs	r5, #0
 8006f58:	42a5      	cmp	r5, r4
 8006f5a:	d109      	bne.n	8006f70 <__libc_init_array+0x24>
 8006f5c:	4e0b      	ldr	r6, [pc, #44]	; (8006f8c <__libc_init_array+0x40>)
 8006f5e:	4c0c      	ldr	r4, [pc, #48]	; (8006f90 <__libc_init_array+0x44>)
 8006f60:	f000 f82c 	bl	8006fbc <_init>
 8006f64:	1ba4      	subs	r4, r4, r6
 8006f66:	10a4      	asrs	r4, r4, #2
 8006f68:	2500      	movs	r5, #0
 8006f6a:	42a5      	cmp	r5, r4
 8006f6c:	d105      	bne.n	8006f7a <__libc_init_array+0x2e>
 8006f6e:	bd70      	pop	{r4, r5, r6, pc}
 8006f70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f74:	4798      	blx	r3
 8006f76:	3501      	adds	r5, #1
 8006f78:	e7ee      	b.n	8006f58 <__libc_init_array+0xc>
 8006f7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f7e:	4798      	blx	r3
 8006f80:	3501      	adds	r5, #1
 8006f82:	e7f2      	b.n	8006f6a <__libc_init_array+0x1e>
 8006f84:	08007258 	.word	0x08007258
 8006f88:	08007258 	.word	0x08007258
 8006f8c:	08007258 	.word	0x08007258
 8006f90:	0800725c 	.word	0x0800725c

08006f94 <memcpy>:
 8006f94:	b510      	push	{r4, lr}
 8006f96:	1e43      	subs	r3, r0, #1
 8006f98:	440a      	add	r2, r1
 8006f9a:	4291      	cmp	r1, r2
 8006f9c:	d100      	bne.n	8006fa0 <memcpy+0xc>
 8006f9e:	bd10      	pop	{r4, pc}
 8006fa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fa8:	e7f7      	b.n	8006f9a <memcpy+0x6>

08006faa <memset>:
 8006faa:	4402      	add	r2, r0
 8006fac:	4603      	mov	r3, r0
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d100      	bne.n	8006fb4 <memset+0xa>
 8006fb2:	4770      	bx	lr
 8006fb4:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb8:	e7f9      	b.n	8006fae <memset+0x4>
	...

08006fbc <_init>:
 8006fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbe:	bf00      	nop
 8006fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc2:	bc08      	pop	{r3}
 8006fc4:	469e      	mov	lr, r3
 8006fc6:	4770      	bx	lr

08006fc8 <_fini>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	bf00      	nop
 8006fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fce:	bc08      	pop	{r3}
 8006fd0:	469e      	mov	lr, r3
 8006fd2:	4770      	bx	lr
